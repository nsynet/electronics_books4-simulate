
4.10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003054  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031fc  080031fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080031fc  080031fc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031fc  080031fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031fc  080031fc  000131fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003200  08003200  00013200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  08003274  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08003274  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ab1  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000182e  00000000  00000000  00027b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d0  00000000  00000000  00029378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f8  00000000  00000000  00029b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013bc3  00000000  00000000  0002a240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006c95  00000000  00000000  0003de03  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006a67d  00000000  00000000  00044a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000af115  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002154  00000000  00000000  000af190  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003148 	.word	0x08003148

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003148 	.word	0x08003148

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb4b 	bl	80007ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8af 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f975 	bl	8000448 <MX_GPIO_Init>
  MX_RTC_Init();
 800015e:	f000 f8ff 	bl	8000360 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f947 	bl	80003f4 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_RTC_GetTime(&hrtc, &sTimeStructure, RTC_FORMAT_BIN);  //十进�??
 8000166:	f107 0320 	add.w	r3, r7, #32
 800016a:	2200      	movs	r2, #0
 800016c:	4619      	mov	r1, r3
 800016e:	4849      	ldr	r0, [pc, #292]	; (8000294 <main+0x148>)
 8000170:	f001 fd18 	bl	8001ba4 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDateStructure, RTC_FORMAT_BCD);  //BCD
 8000174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000178:	2201      	movs	r2, #1
 800017a:	4619      	mov	r1, r3
 800017c:	4845      	ldr	r0, [pc, #276]	; (8000294 <main+0x148>)
 800017e:	f001 fe9f 	bl	8001ec0 <HAL_RTC_GetDate>
	  sprintf(sYear,"%04x",0x2000+sDateStructure.Year);
 8000182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000186:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 800018a:	f107 0318 	add.w	r3, r7, #24
 800018e:	4942      	ldr	r1, [pc, #264]	; (8000298 <main+0x14c>)
 8000190:	4618      	mov	r0, r3
 8000192:	f002 fbc7 	bl	8002924 <siprintf>
	  sprintf(sMonth,"%02x",sDateStructure.Month);
 8000196:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800019a:	461a      	mov	r2, r3
 800019c:	f107 0314 	add.w	r3, r7, #20
 80001a0:	493e      	ldr	r1, [pc, #248]	; (800029c <main+0x150>)
 80001a2:	4618      	mov	r0, r3
 80001a4:	f002 fbbe 	bl	8002924 <siprintf>
	  sprintf(sDate,"%02x",sDateStructure.Date);
 80001a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80001ac:	461a      	mov	r2, r3
 80001ae:	f107 0310 	add.w	r3, r7, #16
 80001b2:	493a      	ldr	r1, [pc, #232]	; (800029c <main+0x150>)
 80001b4:	4618      	mov	r0, r3
 80001b6:	f002 fbb5 	bl	8002924 <siprintf>
	  sprintf(sHour,"%02d",sTimeStructure.Hours);
 80001ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80001be:	461a      	mov	r2, r3
 80001c0:	f107 030c 	add.w	r3, r7, #12
 80001c4:	4936      	ldr	r1, [pc, #216]	; (80002a0 <main+0x154>)
 80001c6:	4618      	mov	r0, r3
 80001c8:	f002 fbac 	bl	8002924 <siprintf>
	  sprintf(sMin,"%02d",sTimeStructure.Minutes);
 80001cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80001d0:	461a      	mov	r2, r3
 80001d2:	f107 0308 	add.w	r3, r7, #8
 80001d6:	4932      	ldr	r1, [pc, #200]	; (80002a0 <main+0x154>)
 80001d8:	4618      	mov	r0, r3
 80001da:	f002 fba3 	bl	8002924 <siprintf>
	  sprintf(sSec,"%02d",sTimeStructure.Seconds);
 80001de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80001e2:	461a      	mov	r2, r3
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	492e      	ldr	r1, [pc, #184]	; (80002a0 <main+0x154>)
 80001e8:	4618      	mov	r0, r3
 80001ea:	f002 fb9b 	bl	8002924 <siprintf>
	  /* 打印日期 */
	  HAL_UART_Transmit(&huart1,sYear,4,4);
 80001ee:	f107 0118 	add.w	r1, r7, #24
 80001f2:	2304      	movs	r3, #4
 80001f4:	2204      	movs	r2, #4
 80001f6:	482b      	ldr	r0, [pc, #172]	; (80002a4 <main+0x158>)
 80001f8:	f002 f9a5 	bl	8002546 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,&"-",1,1);
 80001fc:	2301      	movs	r3, #1
 80001fe:	2201      	movs	r2, #1
 8000200:	4929      	ldr	r1, [pc, #164]	; (80002a8 <main+0x15c>)
 8000202:	4828      	ldr	r0, [pc, #160]	; (80002a4 <main+0x158>)
 8000204:	f002 f99f 	bl	8002546 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,sMonth,2,2);
 8000208:	f107 0114 	add.w	r1, r7, #20
 800020c:	2302      	movs	r3, #2
 800020e:	2202      	movs	r2, #2
 8000210:	4824      	ldr	r0, [pc, #144]	; (80002a4 <main+0x158>)
 8000212:	f002 f998 	bl	8002546 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,&"-",1,1);
 8000216:	2301      	movs	r3, #1
 8000218:	2201      	movs	r2, #1
 800021a:	4923      	ldr	r1, [pc, #140]	; (80002a8 <main+0x15c>)
 800021c:	4821      	ldr	r0, [pc, #132]	; (80002a4 <main+0x158>)
 800021e:	f002 f992 	bl	8002546 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,sDate,2,2);
 8000222:	f107 0110 	add.w	r1, r7, #16
 8000226:	2302      	movs	r3, #2
 8000228:	2202      	movs	r2, #2
 800022a:	481e      	ldr	r0, [pc, #120]	; (80002a4 <main+0x158>)
 800022c:	f002 f98b 	bl	8002546 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,&" ",1,2);
 8000230:	2302      	movs	r3, #2
 8000232:	2201      	movs	r2, #1
 8000234:	491d      	ldr	r1, [pc, #116]	; (80002ac <main+0x160>)
 8000236:	481b      	ldr	r0, [pc, #108]	; (80002a4 <main+0x158>)
 8000238:	f002 f985 	bl	8002546 <HAL_UART_Transmit>
	  /* 打印时间 */
	  HAL_UART_Transmit(&huart1,sHour,2,2);
 800023c:	f107 010c 	add.w	r1, r7, #12
 8000240:	2302      	movs	r3, #2
 8000242:	2202      	movs	r2, #2
 8000244:	4817      	ldr	r0, [pc, #92]	; (80002a4 <main+0x158>)
 8000246:	f002 f97e 	bl	8002546 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,&":",1,1);
 800024a:	2301      	movs	r3, #1
 800024c:	2201      	movs	r2, #1
 800024e:	4918      	ldr	r1, [pc, #96]	; (80002b0 <main+0x164>)
 8000250:	4814      	ldr	r0, [pc, #80]	; (80002a4 <main+0x158>)
 8000252:	f002 f978 	bl	8002546 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,sMin,2,2);
 8000256:	f107 0108 	add.w	r1, r7, #8
 800025a:	2302      	movs	r3, #2
 800025c:	2202      	movs	r2, #2
 800025e:	4811      	ldr	r0, [pc, #68]	; (80002a4 <main+0x158>)
 8000260:	f002 f971 	bl	8002546 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,&":",1,1);
 8000264:	2301      	movs	r3, #1
 8000266:	2201      	movs	r2, #1
 8000268:	4911      	ldr	r1, [pc, #68]	; (80002b0 <main+0x164>)
 800026a:	480e      	ldr	r0, [pc, #56]	; (80002a4 <main+0x158>)
 800026c:	f002 f96b 	bl	8002546 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,sSec,2,2);
 8000270:	1d39      	adds	r1, r7, #4
 8000272:	2302      	movs	r3, #2
 8000274:	2202      	movs	r2, #2
 8000276:	480b      	ldr	r0, [pc, #44]	; (80002a4 <main+0x158>)
 8000278:	f002 f965 	bl	8002546 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,&"\n\r",2,2);
 800027c:	2302      	movs	r3, #2
 800027e:	2202      	movs	r2, #2
 8000280:	490c      	ldr	r1, [pc, #48]	; (80002b4 <main+0x168>)
 8000282:	4808      	ldr	r0, [pc, #32]	; (80002a4 <main+0x158>)
 8000284:	f002 f95f 	bl	8002546 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 8000288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800028c:	f000 fb10 	bl	80008b0 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &sTimeStructure, RTC_FORMAT_BIN);  //十进�??
 8000290:	e769      	b.n	8000166 <main+0x1a>
 8000292:	bf00      	nop
 8000294:	200000d8 	.word	0x200000d8
 8000298:	08003160 	.word	0x08003160
 800029c:	08003168 	.word	0x08003168
 80002a0:	08003170 	.word	0x08003170
 80002a4:	20000098 	.word	0x20000098
 80002a8:	08003178 	.word	0x08003178
 80002ac:	0800317c 	.word	0x0800317c
 80002b0:	08003180 	.word	0x08003180
 80002b4:	08003184 	.word	0x08003184

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b094      	sub	sp, #80	; 0x50
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c2:	2228      	movs	r2, #40	; 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 fb24 	bl	8002914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80002e8:	230a      	movs	r3, #10
 80002ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	2301      	movs	r3, #1
 80002ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f0:	2310      	movs	r3, #16
 80002f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002f4:	2301      	movs	r3, #1
 80002f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f8:	2300      	movs	r3, #0
 80002fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fd93 	bl	8000e2c <HAL_RCC_OscConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800030c:	f000 f904 	bl	8000518 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000310:	230f      	movs	r3, #15
 8000312:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000314:	2300      	movs	r3, #0
 8000316:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000324:	f107 0314 	add.w	r3, r7, #20
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fffe 	bl	800132c <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000336:	f000 f8ef 	bl	8000518 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800033a:	2301      	movs	r3, #1
 800033c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800033e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000342:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	4618      	mov	r0, r3
 8000348:	f001 f98c 	bl	8001664 <HAL_RCCEx_PeriphCLKConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000352:	f000 f8e1 	bl	8000518 <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3750      	adds	r7, #80	; 0x50
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2100      	movs	r1, #0
 800036a:	460a      	mov	r2, r1
 800036c:	801a      	strh	r2, [r3, #0]
 800036e:	460a      	mov	r2, r1
 8000370:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000372:	2300      	movs	r3, #0
 8000374:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000376:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <MX_RTC_Init+0x8c>)
 8000378:	4a1d      	ldr	r2, [pc, #116]	; (80003f0 <MX_RTC_Init+0x90>)
 800037a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <MX_RTC_Init+0x8c>)
 800037e:	f04f 32ff 	mov.w	r2, #4294967295
 8000382:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000384:	4b19      	ldr	r3, [pc, #100]	; (80003ec <MX_RTC_Init+0x8c>)
 8000386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800038a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800038c:	4817      	ldr	r0, [pc, #92]	; (80003ec <MX_RTC_Init+0x8c>)
 800038e:	f001 fadb 	bl	8001948 <HAL_RTC_Init>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000398:	f000 f8be 	bl	8000518 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 800039c:	2312      	movs	r3, #18
 800039e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x36;
 80003a0:	2336      	movs	r3, #54	; 0x36
 80003a2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2201      	movs	r2, #1
 80003ac:	4619      	mov	r1, r3
 80003ae:	480f      	ldr	r0, [pc, #60]	; (80003ec <MX_RTC_Init+0x8c>)
 80003b0:	f001 fb60 	bl	8001a74 <HAL_RTC_SetTime>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80003ba:	f000 f8ad 	bl	8000518 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80003be:	2303      	movs	r3, #3
 80003c0:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_MAY;
 80003c2:	2305      	movs	r3, #5
 80003c4:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x20;
 80003c6:	2320      	movs	r3, #32
 80003c8:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x20;
 80003ca:	2320      	movs	r3, #32
 80003cc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80003ce:	463b      	mov	r3, r7
 80003d0:	2201      	movs	r2, #1
 80003d2:	4619      	mov	r1, r3
 80003d4:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_RTC_Init+0x8c>)
 80003d6:	f001 fcbd 	bl	8001d54 <HAL_RTC_SetDate>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80003e0:	f000 f89a 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80003e4:	bf00      	nop
 80003e6:	3708      	adds	r7, #8
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	200000d8 	.word	0x200000d8
 80003f0:	40002800 	.word	0x40002800

080003f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 80003fa:	4a12      	ldr	r2, [pc, #72]	; (8000444 <MX_USART1_UART_Init+0x50>)
 80003fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000400:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000404:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 800041a:	220c      	movs	r2, #12
 800041c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000426:	2200      	movs	r2, #0
 8000428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800042a:	4805      	ldr	r0, [pc, #20]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 800042c:	f002 f83e 	bl	80024ac <HAL_UART_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000436:	f000 f86f 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000098 	.word	0x20000098
 8000444:	40013800 	.word	0x40013800

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 0308 	add.w	r3, r7, #8
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <MX_GPIO_Init+0x5c>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <MX_GPIO_Init+0x5c>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <MX_GPIO_Init+0x5c>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000474:	2320      	movs	r3, #32
 8000476:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000478:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <MX_GPIO_Init+0x60>)
 800047a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800047c:	2301      	movs	r3, #1
 800047e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000480:	f107 0308 	add.w	r3, r7, #8
 8000484:	4619      	mov	r1, r3
 8000486:	4809      	ldr	r0, [pc, #36]	; (80004ac <MX_GPIO_Init+0x64>)
 8000488:	f000 fb42 	bl	8000b10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	2100      	movs	r1, #0
 8000490:	2017      	movs	r0, #23
 8000492:	f000 fb06 	bl	8000aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000496:	2017      	movs	r0, #23
 8000498:	f000 fb1f 	bl	8000ada <HAL_NVIC_EnableIRQ>

}
 800049c:	bf00      	nop
 800049e:	3718      	adds	r7, #24
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40021000 	.word	0x40021000
 80004a8:	10110000 	.word	0x10110000
 80004ac:	40010800 	.word	0x40010800

080004b0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	80fb      	strh	r3, [r7, #6]
	RTC_DateTypeDef sDateStructure;
	RTC_TimeTypeDef sTimeStructure;
	if(GPIO_Pin==GPIO_PIN_5)  //检测到EXTI5线产生外部中断事件
 80004ba:	88fb      	ldrh	r3, [r7, #6]
 80004bc:	2b20      	cmp	r3, #32
 80004be:	d123      	bne.n	8000508 <HAL_GPIO_EXTI_Callback+0x58>
	{
		sDateStructure.Year=20;
 80004c0:	2314      	movs	r3, #20
 80004c2:	73fb      	strb	r3, [r7, #15]
		sDateStructure.Month=5;
 80004c4:	2305      	movs	r3, #5
 80004c6:	737b      	strb	r3, [r7, #13]
		sDateStructure.Date=20;
 80004c8:	2314      	movs	r3, #20
 80004ca:	73bb      	strb	r3, [r7, #14]
		sDateStructure.WeekDay=3;
 80004cc:	2303      	movs	r3, #3
 80004ce:	733b      	strb	r3, [r7, #12]
		HAL_RTC_SetDate(&hrtc,&sDateStructure,RTC_FORMAT_BIN);  //十进�?
 80004d0:	f107 030c 	add.w	r3, r7, #12
 80004d4:	2200      	movs	r2, #0
 80004d6:	4619      	mov	r1, r3
 80004d8:	480d      	ldr	r0, [pc, #52]	; (8000510 <HAL_GPIO_EXTI_Callback+0x60>)
 80004da:	f001 fc3b 	bl	8001d54 <HAL_RTC_SetDate>
		sTimeStructure.Hours=0x12;
 80004de:	2312      	movs	r3, #18
 80004e0:	723b      	strb	r3, [r7, #8]
		sTimeStructure.Minutes=0x36;
 80004e2:	2336      	movs	r3, #54	; 0x36
 80004e4:	727b      	strb	r3, [r7, #9]
		sTimeStructure.Seconds=0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	72bb      	strb	r3, [r7, #10]
		HAL_RTC_SetTime(&hrtc, &sTimeStructure, RTC_FORMAT_BCD);  //BCD
 80004ea:	f107 0308 	add.w	r3, r7, #8
 80004ee:	2201      	movs	r2, #1
 80004f0:	4619      	mov	r1, r3
 80004f2:	4807      	ldr	r0, [pc, #28]	; (8000510 <HAL_GPIO_EXTI_Callback+0x60>)
 80004f4:	f001 fabe 	bl	8001a74 <HAL_RTC_SetTime>
		while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==GPIO_PIN_RESET);
 80004f8:	bf00      	nop
 80004fa:	2120      	movs	r1, #32
 80004fc:	4805      	ldr	r0, [pc, #20]	; (8000514 <HAL_GPIO_EXTI_Callback+0x64>)
 80004fe:	f000 fc59 	bl	8000db4 <HAL_GPIO_ReadPin>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d0f8      	beq.n	80004fa <HAL_GPIO_EXTI_Callback+0x4a>
	}
}
 8000508:	bf00      	nop
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	200000d8 	.word	0x200000d8
 8000514:	40010800 	.word	0x40010800

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <HAL_MspInit+0x5c>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a14      	ldr	r2, [pc, #80]	; (8000580 <HAL_MspInit+0x5c>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_MspInit+0x5c>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <HAL_MspInit+0x5c>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <HAL_MspInit+0x5c>)
 8000548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054c:	61d3      	str	r3, [r2, #28]
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_MspInit+0x5c>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <HAL_MspInit+0x60>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <HAL_MspInit+0x60>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000
 8000584:	40010000 	.word	0x40010000

08000588 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <HAL_RTC_MspInit+0x3c>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d110      	bne.n	80005bc <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800059a:	f000 fc3b 	bl	8000e14 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <HAL_RTC_MspInit+0x40>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	4a09      	ldr	r2, [pc, #36]	; (80005c8 <HAL_RTC_MspInit+0x40>)
 80005a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005a8:	61d3      	str	r3, [r2, #28]
 80005aa:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <HAL_RTC_MspInit+0x40>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <HAL_RTC_MspInit+0x44>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40002800 	.word	0x40002800
 80005c8:	40021000 	.word	0x40021000
 80005cc:	4242043c 	.word	0x4242043c

080005d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a1c      	ldr	r2, [pc, #112]	; (800065c <HAL_UART_MspInit+0x8c>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d131      	bne.n	8000654 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <HAL_UART_MspInit+0x90>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <HAL_UART_MspInit+0x90>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b18      	ldr	r3, [pc, #96]	; (8000660 <HAL_UART_MspInit+0x90>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <HAL_UART_MspInit+0x90>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a14      	ldr	r2, [pc, #80]	; (8000660 <HAL_UART_MspInit+0x90>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_UART_MspInit+0x90>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000624:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000626:	2302      	movs	r3, #2
 8000628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062a:	2303      	movs	r3, #3
 800062c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	4619      	mov	r1, r3
 8000634:	480b      	ldr	r0, [pc, #44]	; (8000664 <HAL_UART_MspInit+0x94>)
 8000636:	f000 fa6b 	bl	8000b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800063a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800063e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	4619      	mov	r1, r3
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <HAL_UART_MspInit+0x94>)
 8000650:	f000 fa5e 	bl	8000b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40013800 	.word	0x40013800
 8000660:	40021000 	.word	0x40021000
 8000664:	40010800 	.word	0x40010800

08000668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <HardFault_Handler+0x4>

0800067a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <MemManage_Handler+0x4>

08000680 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <BusFault_Handler+0x4>

08000686 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <UsageFault_Handler+0x4>

0800068c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b4:	f000 f8e0 	bl	8000878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}

080006bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80006c0:	2020      	movs	r0, #32
 80006c2:	f000 fb8f 	bl	8000de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d4:	4a14      	ldr	r2, [pc, #80]	; (8000728 <_sbrk+0x5c>)
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <_sbrk+0x60>)
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <_sbrk+0x64>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d102      	bne.n	80006ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <_sbrk+0x64>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <_sbrk+0x68>)
 80006ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <_sbrk+0x64>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d207      	bcs.n	800070c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006fc:	f002 f8e0 	bl	80028c0 <__errno>
 8000700:	4602      	mov	r2, r0
 8000702:	230c      	movs	r3, #12
 8000704:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	e009      	b.n	8000720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <_sbrk+0x64>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <_sbrk+0x64>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	4a05      	ldr	r2, [pc, #20]	; (8000730 <_sbrk+0x64>)
 800071c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800071e:	68fb      	ldr	r3, [r7, #12]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20002800 	.word	0x20002800
 800072c:	00000400 	.word	0x00000400
 8000730:	2000008c 	.word	0x2000008c
 8000734:	200000f8 	.word	0x200000f8

08000738 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <SystemInit+0x5c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a14      	ldr	r2, [pc, #80]	; (8000794 <SystemInit+0x5c>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <SystemInit+0x5c>)
 800074a:	685a      	ldr	r2, [r3, #4]
 800074c:	4911      	ldr	r1, [pc, #68]	; (8000794 <SystemInit+0x5c>)
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x60>)
 8000750:	4013      	ands	r3, r2
 8000752:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <SystemInit+0x5c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <SystemInit+0x5c>)
 800075a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800075e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000762:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <SystemInit+0x5c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <SystemInit+0x5c>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <SystemInit+0x5c>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4a07      	ldr	r2, [pc, #28]	; (8000794 <SystemInit+0x5c>)
 8000776:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800077a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <SystemInit+0x5c>)
 800077e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000782:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <SystemInit+0x64>)
 8000786:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800078a:	609a      	str	r2, [r3, #8]
#endif 
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40021000 	.word	0x40021000
 8000798:	f8ff0000 	.word	0xf8ff0000
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007a2:	e003      	b.n	80007ac <LoopCopyDataInit>

080007a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007aa:	3104      	adds	r1, #4

080007ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007ac:	480a      	ldr	r0, [pc, #40]	; (80007d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007b4:	d3f6      	bcc.n	80007a4 <CopyDataInit>
  ldr r2, =_sbss
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007b8:	e002      	b.n	80007c0 <LoopFillZerobss>

080007ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007bc:	f842 3b04 	str.w	r3, [r2], #4

080007c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007c4:	d3f9      	bcc.n	80007ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007c6:	f7ff ffb7 	bl	8000738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ca:	f002 f87f 	bl	80028cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ce:	f7ff fcbd 	bl	800014c <main>
  bx lr
 80007d2:	4770      	bx	lr
  ldr r3, =_sidata
 80007d4:	08003204 	.word	0x08003204
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007dc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80007e0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80007e4:	200000f4 	.word	0x200000f4

080007e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC1_2_IRQHandler>
	...

080007ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_Init+0x28>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <HAL_Init+0x28>)
 80007f6:	f043 0310 	orr.w	r3, r3, #16
 80007fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 f945 	bl	8000a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000802:	2000      	movs	r0, #0
 8000804:	f000 f808 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000808:	f7ff fe8c 	bl	8000524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40022000 	.word	0x40022000

08000818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_InitTick+0x54>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_InitTick+0x58>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f95d 	bl	8000af6 <HAL_SYSTICK_Config>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e00e      	b.n	8000864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d80a      	bhi.n	8000862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f000 f925 	bl	8000aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000858:	4a06      	ldr	r2, [pc, #24]	; (8000874 <HAL_InitTick+0x5c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000000 	.word	0x20000000
 8000870:	20000008 	.word	0x20000008
 8000874:	20000004 	.word	0x20000004

08000878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HAL_IncTick+0x1c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_IncTick+0x20>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a03      	ldr	r2, [pc, #12]	; (8000898 <HAL_IncTick+0x20>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	20000008 	.word	0x20000008
 8000898:	200000ec 	.word	0x200000ec

0800089c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return uwTick;
 80008a0:	4b02      	ldr	r3, [pc, #8]	; (80008ac <HAL_GetTick+0x10>)
 80008a2:	681b      	ldr	r3, [r3, #0]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	200000ec 	.word	0x200000ec

080008b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b8:	f7ff fff0 	bl	800089c <HAL_GetTick>
 80008bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c8:	d005      	beq.n	80008d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <HAL_Delay+0x40>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4413      	add	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008d6:	bf00      	nop
 80008d8:	f7ff ffe0 	bl	800089c <HAL_GetTick>
 80008dc:	4602      	mov	r2, r0
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d8f7      	bhi.n	80008d8 <HAL_Delay+0x28>
  {
  }
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000008 	.word	0x20000008

080008f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800091c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000926:	4a04      	ldr	r2, [pc, #16]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	60d3      	str	r3, [r2, #12]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <__NVIC_GetPriorityGrouping+0x18>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	f003 0307 	and.w	r3, r3, #7
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	2b00      	cmp	r3, #0
 8000968:	db0b      	blt.n	8000982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	f003 021f 	and.w	r2, r3, #31
 8000970:	4906      	ldr	r1, [pc, #24]	; (800098c <__NVIC_EnableIRQ+0x34>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	095b      	lsrs	r3, r3, #5
 8000978:	2001      	movs	r0, #1
 800097a:	fa00 f202 	lsl.w	r2, r0, r2
 800097e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	e000e100 	.word	0xe000e100

08000990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db0a      	blt.n	80009ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	490c      	ldr	r1, [pc, #48]	; (80009dc <__NVIC_SetPriority+0x4c>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	440b      	add	r3, r1
 80009b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b8:	e00a      	b.n	80009d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4908      	ldr	r1, [pc, #32]	; (80009e0 <__NVIC_SetPriority+0x50>)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	3b04      	subs	r3, #4
 80009c8:	0112      	lsls	r2, r2, #4
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	440b      	add	r3, r1
 80009ce:	761a      	strb	r2, [r3, #24]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	; 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f1c3 0307 	rsb	r3, r3, #7
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	bf28      	it	cs
 8000a02:	2304      	movcs	r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	d902      	bls.n	8000a14 <NVIC_EncodePriority+0x30>
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3b03      	subs	r3, #3
 8000a12:	e000      	b.n	8000a16 <NVIC_EncodePriority+0x32>
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43da      	mvns	r2, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	43d9      	mvns	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	4313      	orrs	r3, r2
         );
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3724      	adds	r7, #36	; 0x24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a58:	d301      	bcc.n	8000a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00f      	b.n	8000a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <SysTick_Config+0x40>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a66:	210f      	movs	r1, #15
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f7ff ff90 	bl	8000990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SysTick_Config+0x40>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <SysTick_Config+0x40>)
 8000a78:	2207      	movs	r2, #7
 8000a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	e000e010 	.word	0xe000e010

08000a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ff2d 	bl	80008f4 <__NVIC_SetPriorityGrouping>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab4:	f7ff ff42 	bl	800093c <__NVIC_GetPriorityGrouping>
 8000ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	6978      	ldr	r0, [r7, #20]
 8000ac0:	f7ff ff90 	bl	80009e4 <NVIC_EncodePriority>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff5f 	bl	8000990 <__NVIC_SetPriority>
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff35 	bl	8000958 <__NVIC_EnableIRQ>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff ffa2 	bl	8000a48 <SysTick_Config>
 8000b04:	4603      	mov	r3, r0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b08b      	sub	sp, #44	; 0x2c
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b22:	e121      	b.n	8000d68 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b24:	2201      	movs	r2, #1
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	69fa      	ldr	r2, [r7, #28]
 8000b34:	4013      	ands	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	f040 8110 	bne.w	8000d62 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2b12      	cmp	r3, #18
 8000b48:	d034      	beq.n	8000bb4 <HAL_GPIO_Init+0xa4>
 8000b4a:	2b12      	cmp	r3, #18
 8000b4c:	d80d      	bhi.n	8000b6a <HAL_GPIO_Init+0x5a>
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d02b      	beq.n	8000baa <HAL_GPIO_Init+0x9a>
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d804      	bhi.n	8000b60 <HAL_GPIO_Init+0x50>
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d031      	beq.n	8000bbe <HAL_GPIO_Init+0xae>
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d01c      	beq.n	8000b98 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b5e:	e048      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	d043      	beq.n	8000bec <HAL_GPIO_Init+0xdc>
 8000b64:	2b11      	cmp	r3, #17
 8000b66:	d01b      	beq.n	8000ba0 <HAL_GPIO_Init+0x90>
          break;
 8000b68:	e043      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b6a:	4a86      	ldr	r2, [pc, #536]	; (8000d84 <HAL_GPIO_Init+0x274>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d026      	beq.n	8000bbe <HAL_GPIO_Init+0xae>
 8000b70:	4a84      	ldr	r2, [pc, #528]	; (8000d84 <HAL_GPIO_Init+0x274>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d806      	bhi.n	8000b84 <HAL_GPIO_Init+0x74>
 8000b76:	4a84      	ldr	r2, [pc, #528]	; (8000d88 <HAL_GPIO_Init+0x278>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d020      	beq.n	8000bbe <HAL_GPIO_Init+0xae>
 8000b7c:	4a83      	ldr	r2, [pc, #524]	; (8000d8c <HAL_GPIO_Init+0x27c>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d01d      	beq.n	8000bbe <HAL_GPIO_Init+0xae>
          break;
 8000b82:	e036      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b84:	4a82      	ldr	r2, [pc, #520]	; (8000d90 <HAL_GPIO_Init+0x280>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d019      	beq.n	8000bbe <HAL_GPIO_Init+0xae>
 8000b8a:	4a82      	ldr	r2, [pc, #520]	; (8000d94 <HAL_GPIO_Init+0x284>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d016      	beq.n	8000bbe <HAL_GPIO_Init+0xae>
 8000b90:	4a81      	ldr	r2, [pc, #516]	; (8000d98 <HAL_GPIO_Init+0x288>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d013      	beq.n	8000bbe <HAL_GPIO_Init+0xae>
          break;
 8000b96:	e02c      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	623b      	str	r3, [r7, #32]
          break;
 8000b9e:	e028      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	623b      	str	r3, [r7, #32]
          break;
 8000ba8:	e023      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	3308      	adds	r3, #8
 8000bb0:	623b      	str	r3, [r7, #32]
          break;
 8000bb2:	e01e      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	330c      	adds	r3, #12
 8000bba:	623b      	str	r3, [r7, #32]
          break;
 8000bbc:	e019      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	623b      	str	r3, [r7, #32]
          break;
 8000bca:	e012      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d105      	bne.n	8000be0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	69fa      	ldr	r2, [r7, #28]
 8000bdc:	611a      	str	r2, [r3, #16]
          break;
 8000bde:	e008      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000be0:	2308      	movs	r3, #8
 8000be2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	69fa      	ldr	r2, [r7, #28]
 8000be8:	615a      	str	r2, [r3, #20]
          break;
 8000bea:	e002      	b.n	8000bf2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
          break;
 8000bf0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	2bff      	cmp	r3, #255	; 0xff
 8000bf6:	d801      	bhi.n	8000bfc <HAL_GPIO_Init+0xec>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	e001      	b.n	8000c00 <HAL_GPIO_Init+0xf0>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3304      	adds	r3, #4
 8000c00:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	2bff      	cmp	r3, #255	; 0xff
 8000c06:	d802      	bhi.n	8000c0e <HAL_GPIO_Init+0xfe>
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	e002      	b.n	8000c14 <HAL_GPIO_Init+0x104>
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	3b08      	subs	r3, #8
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	210f      	movs	r1, #15
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	401a      	ands	r2, r3
 8000c26:	6a39      	ldr	r1, [r7, #32]
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f000 8090 	beq.w	8000d62 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c42:	4b56      	ldr	r3, [pc, #344]	; (8000d9c <HAL_GPIO_Init+0x28c>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	4a55      	ldr	r2, [pc, #340]	; (8000d9c <HAL_GPIO_Init+0x28c>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6193      	str	r3, [r2, #24]
 8000c4e:	4b53      	ldr	r3, [pc, #332]	; (8000d9c <HAL_GPIO_Init+0x28c>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c5a:	4a51      	ldr	r2, [pc, #324]	; (8000da0 <HAL_GPIO_Init+0x290>)
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3302      	adds	r3, #2
 8000c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c66:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	220f      	movs	r2, #15
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a48      	ldr	r2, [pc, #288]	; (8000da4 <HAL_GPIO_Init+0x294>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d00d      	beq.n	8000ca2 <HAL_GPIO_Init+0x192>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a47      	ldr	r2, [pc, #284]	; (8000da8 <HAL_GPIO_Init+0x298>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d007      	beq.n	8000c9e <HAL_GPIO_Init+0x18e>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a46      	ldr	r2, [pc, #280]	; (8000dac <HAL_GPIO_Init+0x29c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d101      	bne.n	8000c9a <HAL_GPIO_Init+0x18a>
 8000c96:	2302      	movs	r3, #2
 8000c98:	e004      	b.n	8000ca4 <HAL_GPIO_Init+0x194>
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e002      	b.n	8000ca4 <HAL_GPIO_Init+0x194>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e000      	b.n	8000ca4 <HAL_GPIO_Init+0x194>
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ca6:	f002 0203 	and.w	r2, r2, #3
 8000caa:	0092      	lsls	r2, r2, #2
 8000cac:	4093      	lsls	r3, r2
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cb4:	493a      	ldr	r1, [pc, #232]	; (8000da0 <HAL_GPIO_Init+0x290>)
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	089b      	lsrs	r3, r3, #2
 8000cba:	3302      	adds	r3, #2
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d006      	beq.n	8000cdc <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cce:	4b38      	ldr	r3, [pc, #224]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4937      	ldr	r1, [pc, #220]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	600b      	str	r3, [r1, #0]
 8000cda:	e006      	b.n	8000cea <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cdc:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	4932      	ldr	r1, [pc, #200]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d006      	beq.n	8000d04 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cf6:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	492d      	ldr	r1, [pc, #180]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	604b      	str	r3, [r1, #4]
 8000d02:	e006      	b.n	8000d12 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d04:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	4928      	ldr	r1, [pc, #160]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000d0e:	4013      	ands	r3, r2
 8000d10:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d006      	beq.n	8000d2c <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d1e:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	4923      	ldr	r1, [pc, #140]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	608b      	str	r3, [r1, #8]
 8000d2a:	e006      	b.n	8000d3a <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d2c:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	43db      	mvns	r3, r3
 8000d34:	491e      	ldr	r1, [pc, #120]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000d36:	4013      	ands	r3, r2
 8000d38:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d006      	beq.n	8000d54 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	4919      	ldr	r1, [pc, #100]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	60cb      	str	r3, [r1, #12]
 8000d52:	e006      	b.n	8000d62 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	4914      	ldr	r1, [pc, #80]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	3301      	adds	r3, #1
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f47f aed6 	bne.w	8000b24 <HAL_GPIO_Init+0x14>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	372c      	adds	r7, #44	; 0x2c
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	10210000 	.word	0x10210000
 8000d88:	10110000 	.word	0x10110000
 8000d8c:	10120000 	.word	0x10120000
 8000d90:	10310000 	.word	0x10310000
 8000d94:	10320000 	.word	0x10320000
 8000d98:	10220000 	.word	0x10220000
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010000 	.word	0x40010000
 8000da4:	40010800 	.word	0x40010800
 8000da8:	40010c00 	.word	0x40010c00
 8000dac:	40011000 	.word	0x40011000
 8000db0:	40010400 	.word	0x40010400

08000db4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	887b      	ldrh	r3, [r7, #2]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d002      	beq.n	8000dd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	73fb      	strb	r3, [r7, #15]
 8000dd0:	e001      	b.n	8000dd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
	...

08000de4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000df0:	695a      	ldr	r2, [r3, #20]
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	4013      	ands	r3, r2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d006      	beq.n	8000e08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fb54 	bl	80004b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40010400 	.word	0x40010400

08000e14 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_PWR_EnableBkUpAccess+0x14>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	420e0020 	.word	0x420e0020

08000e2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e26c      	b.n	8001318 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 8087 	beq.w	8000f5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e4c:	4b92      	ldr	r3, [pc, #584]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 030c 	and.w	r3, r3, #12
 8000e54:	2b04      	cmp	r3, #4
 8000e56:	d00c      	beq.n	8000e72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e58:	4b8f      	ldr	r3, [pc, #572]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 030c 	and.w	r3, r3, #12
 8000e60:	2b08      	cmp	r3, #8
 8000e62:	d112      	bne.n	8000e8a <HAL_RCC_OscConfig+0x5e>
 8000e64:	4b8c      	ldr	r3, [pc, #560]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e70:	d10b      	bne.n	8000e8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e72:	4b89      	ldr	r3, [pc, #548]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d06c      	beq.n	8000f58 <HAL_RCC_OscConfig+0x12c>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d168      	bne.n	8000f58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e246      	b.n	8001318 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e92:	d106      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x76>
 8000e94:	4b80      	ldr	r3, [pc, #512]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a7f      	ldr	r2, [pc, #508]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	e02e      	b.n	8000f00 <HAL_RCC_OscConfig+0xd4>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x98>
 8000eaa:	4b7b      	ldr	r3, [pc, #492]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a7a      	ldr	r2, [pc, #488]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	4b78      	ldr	r3, [pc, #480]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a77      	ldr	r2, [pc, #476]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e01d      	b.n	8000f00 <HAL_RCC_OscConfig+0xd4>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ecc:	d10c      	bne.n	8000ee8 <HAL_RCC_OscConfig+0xbc>
 8000ece:	4b72      	ldr	r3, [pc, #456]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a71      	ldr	r2, [pc, #452]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	4b6f      	ldr	r3, [pc, #444]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a6e      	ldr	r2, [pc, #440]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e00b      	b.n	8000f00 <HAL_RCC_OscConfig+0xd4>
 8000ee8:	4b6b      	ldr	r3, [pc, #428]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a6a      	ldr	r2, [pc, #424]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b68      	ldr	r3, [pc, #416]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a67      	ldr	r2, [pc, #412]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000efe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d013      	beq.n	8000f30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fcc8 	bl	800089c <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f10:	f7ff fcc4 	bl	800089c <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b64      	cmp	r3, #100	; 0x64
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e1fa      	b.n	8001318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f22:	4b5d      	ldr	r3, [pc, #372]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0f0      	beq.n	8000f10 <HAL_RCC_OscConfig+0xe4>
 8000f2e:	e014      	b.n	8000f5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f30:	f7ff fcb4 	bl	800089c <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f38:	f7ff fcb0 	bl	800089c <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b64      	cmp	r3, #100	; 0x64
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e1e6      	b.n	8001318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f4a:	4b53      	ldr	r3, [pc, #332]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f0      	bne.n	8000f38 <HAL_RCC_OscConfig+0x10c>
 8000f56:	e000      	b.n	8000f5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d063      	beq.n	800102e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f66:	4b4c      	ldr	r3, [pc, #304]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00b      	beq.n	8000f8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f72:	4b49      	ldr	r3, [pc, #292]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 030c 	and.w	r3, r3, #12
 8000f7a:	2b08      	cmp	r3, #8
 8000f7c:	d11c      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x18c>
 8000f7e:	4b46      	ldr	r3, [pc, #280]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d116      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f8a:	4b43      	ldr	r3, [pc, #268]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d005      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x176>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d001      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e1ba      	b.n	8001318 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa2:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	4939      	ldr	r1, [pc, #228]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb6:	e03a      	b.n	800102e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d020      	beq.n	8001002 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc0:	4b36      	ldr	r3, [pc, #216]	; (800109c <HAL_RCC_OscConfig+0x270>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fc69 	bl	800089c <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fce:	f7ff fc65 	bl	800089c <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e19b      	b.n	8001318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe0:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0f0      	beq.n	8000fce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fec:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	4927      	ldr	r1, [pc, #156]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	600b      	str	r3, [r1, #0]
 8001000:	e015      	b.n	800102e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001002:	4b26      	ldr	r3, [pc, #152]	; (800109c <HAL_RCC_OscConfig+0x270>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001008:	f7ff fc48 	bl	800089c <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001010:	f7ff fc44 	bl	800089c <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e17a      	b.n	8001318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f0      	bne.n	8001010 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	2b00      	cmp	r3, #0
 8001038:	d03a      	beq.n	80010b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d019      	beq.n	8001076 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <HAL_RCC_OscConfig+0x274>)
 8001044:	2201      	movs	r2, #1
 8001046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001048:	f7ff fc28 	bl	800089c <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001050:	f7ff fc24 	bl	800089c <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e15a      	b.n	8001318 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <HAL_RCC_OscConfig+0x26c>)
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f0      	beq.n	8001050 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800106e:	2001      	movs	r0, #1
 8001070:	f000 fada 	bl	8001628 <RCC_Delay>
 8001074:	e01c      	b.n	80010b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_RCC_OscConfig+0x274>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107c:	f7ff fc0e 	bl	800089c <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001082:	e00f      	b.n	80010a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001084:	f7ff fc0a 	bl	800089c <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d908      	bls.n	80010a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e140      	b.n	8001318 <HAL_RCC_OscConfig+0x4ec>
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000
 800109c:	42420000 	.word	0x42420000
 80010a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a4:	4b9e      	ldr	r3, [pc, #632]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1e9      	bne.n	8001084 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80a6 	beq.w	800120a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010c2:	4b97      	ldr	r3, [pc, #604]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10d      	bne.n	80010ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	4b94      	ldr	r3, [pc, #592]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a93      	ldr	r2, [pc, #588]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	61d3      	str	r3, [r2, #28]
 80010da:	4b91      	ldr	r3, [pc, #580]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010e6:	2301      	movs	r3, #1
 80010e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ea:	4b8e      	ldr	r3, [pc, #568]	; (8001324 <HAL_RCC_OscConfig+0x4f8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d118      	bne.n	8001128 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010f6:	4b8b      	ldr	r3, [pc, #556]	; (8001324 <HAL_RCC_OscConfig+0x4f8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a8a      	ldr	r2, [pc, #552]	; (8001324 <HAL_RCC_OscConfig+0x4f8>)
 80010fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001102:	f7ff fbcb 	bl	800089c <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800110a:	f7ff fbc7 	bl	800089c <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b64      	cmp	r3, #100	; 0x64
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e0fd      	b.n	8001318 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800111c:	4b81      	ldr	r3, [pc, #516]	; (8001324 <HAL_RCC_OscConfig+0x4f8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0f0      	beq.n	800110a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d106      	bne.n	800113e <HAL_RCC_OscConfig+0x312>
 8001130:	4b7b      	ldr	r3, [pc, #492]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	4a7a      	ldr	r2, [pc, #488]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6213      	str	r3, [r2, #32]
 800113c:	e02d      	b.n	800119a <HAL_RCC_OscConfig+0x36e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10c      	bne.n	8001160 <HAL_RCC_OscConfig+0x334>
 8001146:	4b76      	ldr	r3, [pc, #472]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	4a75      	ldr	r2, [pc, #468]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 800114c:	f023 0301 	bic.w	r3, r3, #1
 8001150:	6213      	str	r3, [r2, #32]
 8001152:	4b73      	ldr	r3, [pc, #460]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	4a72      	ldr	r2, [pc, #456]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 8001158:	f023 0304 	bic.w	r3, r3, #4
 800115c:	6213      	str	r3, [r2, #32]
 800115e:	e01c      	b.n	800119a <HAL_RCC_OscConfig+0x36e>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b05      	cmp	r3, #5
 8001166:	d10c      	bne.n	8001182 <HAL_RCC_OscConfig+0x356>
 8001168:	4b6d      	ldr	r3, [pc, #436]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	4a6c      	ldr	r2, [pc, #432]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	6213      	str	r3, [r2, #32]
 8001174:	4b6a      	ldr	r3, [pc, #424]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	4a69      	ldr	r2, [pc, #420]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6213      	str	r3, [r2, #32]
 8001180:	e00b      	b.n	800119a <HAL_RCC_OscConfig+0x36e>
 8001182:	4b67      	ldr	r3, [pc, #412]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 8001184:	6a1b      	ldr	r3, [r3, #32]
 8001186:	4a66      	ldr	r2, [pc, #408]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 8001188:	f023 0301 	bic.w	r3, r3, #1
 800118c:	6213      	str	r3, [r2, #32]
 800118e:	4b64      	ldr	r3, [pc, #400]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 8001190:	6a1b      	ldr	r3, [r3, #32]
 8001192:	4a63      	ldr	r2, [pc, #396]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 8001194:	f023 0304 	bic.w	r3, r3, #4
 8001198:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d015      	beq.n	80011ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a2:	f7ff fb7b 	bl	800089c <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a8:	e00a      	b.n	80011c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011aa:	f7ff fb77 	bl	800089c <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e0ab      	b.n	8001318 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c0:	4b57      	ldr	r3, [pc, #348]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0ee      	beq.n	80011aa <HAL_RCC_OscConfig+0x37e>
 80011cc:	e014      	b.n	80011f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ce:	f7ff fb65 	bl	800089c <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d4:	e00a      	b.n	80011ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d6:	f7ff fb61 	bl	800089c <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e095      	b.n	8001318 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ec:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1ee      	bne.n	80011d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011f8:	7dfb      	ldrb	r3, [r7, #23]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d105      	bne.n	800120a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011fe:	4b48      	ldr	r3, [pc, #288]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a47      	ldr	r2, [pc, #284]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 8001204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001208:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 8081 	beq.w	8001316 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001214:	4b42      	ldr	r3, [pc, #264]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 030c 	and.w	r3, r3, #12
 800121c:	2b08      	cmp	r3, #8
 800121e:	d061      	beq.n	80012e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	2b02      	cmp	r3, #2
 8001226:	d146      	bne.n	80012b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001228:	4b3f      	ldr	r3, [pc, #252]	; (8001328 <HAL_RCC_OscConfig+0x4fc>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122e:	f7ff fb35 	bl	800089c <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001236:	f7ff fb31 	bl	800089c <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e067      	b.n	8001318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001248:	4b35      	ldr	r3, [pc, #212]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f0      	bne.n	8001236 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125c:	d108      	bne.n	8001270 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800125e:	4b30      	ldr	r3, [pc, #192]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	492d      	ldr	r1, [pc, #180]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001270:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a19      	ldr	r1, [r3, #32]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	430b      	orrs	r3, r1
 8001282:	4927      	ldr	r1, [pc, #156]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 8001284:	4313      	orrs	r3, r2
 8001286:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001288:	4b27      	ldr	r3, [pc, #156]	; (8001328 <HAL_RCC_OscConfig+0x4fc>)
 800128a:	2201      	movs	r2, #1
 800128c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128e:	f7ff fb05 	bl	800089c <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001296:	f7ff fb01 	bl	800089c <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e037      	b.n	8001318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x46a>
 80012b4:	e02f      	b.n	8001316 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <HAL_RCC_OscConfig+0x4fc>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff faee 	bl	800089c <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c4:	f7ff faea 	bl	800089c <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e020      	b.n	8001318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x498>
 80012e2:	e018      	b.n	8001316 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e013      	b.n	8001318 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_RCC_OscConfig+0x4f4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	429a      	cmp	r2, r3
 8001302:	d106      	bne.n	8001312 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800130e:	429a      	cmp	r2, r3
 8001310:	d001      	beq.n	8001316 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40021000 	.word	0x40021000
 8001324:	40007000 	.word	0x40007000
 8001328:	42420060 	.word	0x42420060

0800132c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e0d0      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001340:	4b6a      	ldr	r3, [pc, #424]	; (80014ec <HAL_RCC_ClockConfig+0x1c0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d910      	bls.n	8001370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134e:	4b67      	ldr	r3, [pc, #412]	; (80014ec <HAL_RCC_ClockConfig+0x1c0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 0207 	bic.w	r2, r3, #7
 8001356:	4965      	ldr	r1, [pc, #404]	; (80014ec <HAL_RCC_ClockConfig+0x1c0>)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	4313      	orrs	r3, r2
 800135c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800135e:	4b63      	ldr	r3, [pc, #396]	; (80014ec <HAL_RCC_ClockConfig+0x1c0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	d001      	beq.n	8001370 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0b8      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d020      	beq.n	80013be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001388:	4b59      	ldr	r3, [pc, #356]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a58      	ldr	r2, [pc, #352]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001392:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013a0:	4b53      	ldr	r3, [pc, #332]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4a52      	ldr	r2, [pc, #328]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 80013a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ac:	4b50      	ldr	r3, [pc, #320]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	494d      	ldr	r1, [pc, #308]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d040      	beq.n	800144c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d107      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d2:	4b47      	ldr	r3, [pc, #284]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d115      	bne.n	800140a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e07f      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d107      	bne.n	80013fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ea:	4b41      	ldr	r3, [pc, #260]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d109      	bne.n	800140a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e073      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fa:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e06b      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800140a:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f023 0203 	bic.w	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4936      	ldr	r1, [pc, #216]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800141c:	f7ff fa3e 	bl	800089c <HAL_GetTick>
 8001420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001422:	e00a      	b.n	800143a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001424:	f7ff fa3a 	bl	800089c <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e053      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 020c 	and.w	r2, r3, #12
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	429a      	cmp	r2, r3
 800144a:	d1eb      	bne.n	8001424 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800144c:	4b27      	ldr	r3, [pc, #156]	; (80014ec <HAL_RCC_ClockConfig+0x1c0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	d210      	bcs.n	800147c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145a:	4b24      	ldr	r3, [pc, #144]	; (80014ec <HAL_RCC_ClockConfig+0x1c0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 0207 	bic.w	r2, r3, #7
 8001462:	4922      	ldr	r1, [pc, #136]	; (80014ec <HAL_RCC_ClockConfig+0x1c0>)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <HAL_RCC_ClockConfig+0x1c0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d001      	beq.n	800147c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e032      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d008      	beq.n	800149a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	4916      	ldr	r1, [pc, #88]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d009      	beq.n	80014ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	490e      	ldr	r1, [pc, #56]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014ba:	f000 f821 	bl	8001500 <HAL_RCC_GetSysClockFreq>
 80014be:	4601      	mov	r1, r0
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	091b      	lsrs	r3, r3, #4
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 80014cc:	5cd3      	ldrb	r3, [r2, r3]
 80014ce:	fa21 f303 	lsr.w	r3, r1, r3
 80014d2:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <HAL_RCC_ClockConfig+0x1cc>)
 80014d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_RCC_ClockConfig+0x1d0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f99c 	bl	8000818 <HAL_InitTick>

  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40022000 	.word	0x40022000
 80014f0:	40021000 	.word	0x40021000
 80014f4:	080031b0 	.word	0x080031b0
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000004 	.word	0x20000004

08001500 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001500:	b490      	push	{r4, r7}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001508:	1d3c      	adds	r4, r7, #4
 800150a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800150c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001510:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b04      	cmp	r3, #4
 8001538:	d002      	beq.n	8001540 <HAL_RCC_GetSysClockFreq+0x40>
 800153a:	2b08      	cmp	r3, #8
 800153c:	d003      	beq.n	8001546 <HAL_RCC_GetSysClockFreq+0x46>
 800153e:	e02d      	b.n	800159c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001540:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001542:	623b      	str	r3, [r7, #32]
      break;
 8001544:	e02d      	b.n	80015a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	0c9b      	lsrs	r3, r3, #18
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001552:	4413      	add	r3, r2
 8001554:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001558:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d013      	beq.n	800158c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	0c5b      	lsrs	r3, r3, #17
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001572:	4413      	add	r3, r2
 8001574:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001578:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800157e:	fb02 f203 	mul.w	r2, r2, r3
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	fbb2 f3f3 	udiv	r3, r2, r3
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
 800158a:	e004      	b.n	8001596 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001590:	fb02 f303 	mul.w	r3, r2, r3
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	623b      	str	r3, [r7, #32]
      break;
 800159a:	e002      	b.n	80015a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800159e:	623b      	str	r3, [r7, #32]
      break;
 80015a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015a2:	6a3b      	ldr	r3, [r7, #32]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3728      	adds	r7, #40	; 0x28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc90      	pop	{r4, r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	08003188 	.word	0x08003188
 80015b4:	08003198 	.word	0x08003198
 80015b8:	40021000 	.word	0x40021000
 80015bc:	007a1200 	.word	0x007a1200
 80015c0:	003d0900 	.word	0x003d0900

080015c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015c8:	4b02      	ldr	r3, [pc, #8]	; (80015d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	20000000 	.word	0x20000000

080015d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015dc:	f7ff fff2 	bl	80015c4 <HAL_RCC_GetHCLKFreq>
 80015e0:	4601      	mov	r1, r0
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	0a1b      	lsrs	r3, r3, #8
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	4a03      	ldr	r2, [pc, #12]	; (80015fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ee:	5cd3      	ldrb	r3, [r2, r3]
 80015f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000
 80015fc:	080031c0 	.word	0x080031c0

08001600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001604:	f7ff ffde 	bl	80015c4 <HAL_RCC_GetHCLKFreq>
 8001608:	4601      	mov	r1, r0
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	0adb      	lsrs	r3, r3, #11
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	4a03      	ldr	r2, [pc, #12]	; (8001624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001616:	5cd3      	ldrb	r3, [r2, r3]
 8001618:	fa21 f303 	lsr.w	r3, r1, r3
}
 800161c:	4618      	mov	r0, r3
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000
 8001624:	080031c0 	.word	0x080031c0

08001628 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <RCC_Delay+0x34>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <RCC_Delay+0x38>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	0a5b      	lsrs	r3, r3, #9
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	fb02 f303 	mul.w	r3, r2, r3
 8001642:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001644:	bf00      	nop
  }
  while (Delay --);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1e5a      	subs	r2, r3, #1
 800164a:	60fa      	str	r2, [r7, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f9      	bne.n	8001644 <RCC_Delay+0x1c>
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000000 	.word	0x20000000
 8001660:	10624dd3 	.word	0x10624dd3

08001664 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d07d      	beq.n	800177c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001684:	4b4f      	ldr	r3, [pc, #316]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10d      	bne.n	80016ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001690:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	4a4b      	ldr	r2, [pc, #300]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169a:	61d3      	str	r3, [r2, #28]
 800169c:	4b49      	ldr	r3, [pc, #292]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a8:	2301      	movs	r3, #1
 80016aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ac:	4b46      	ldr	r3, [pc, #280]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d118      	bne.n	80016ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b8:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a42      	ldr	r2, [pc, #264]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c4:	f7ff f8ea 	bl	800089c <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ca:	e008      	b.n	80016de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016cc:	f7ff f8e6 	bl	800089c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	; 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e06d      	b.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016de:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016ea:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d02e      	beq.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	429a      	cmp	r2, r3
 8001706:	d027      	beq.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001708:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001710:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001712:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001718:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800171e:	4a29      	ldr	r2, [pc, #164]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d014      	beq.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172e:	f7ff f8b5 	bl	800089c <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001734:	e00a      	b.n	800174c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f7ff f8b1 	bl	800089c <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f241 3288 	movw	r2, #5000	; 0x1388
 8001744:	4293      	cmp	r3, r2
 8001746:	d901      	bls.n	800174c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e036      	b.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0ee      	beq.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4917      	ldr	r1, [pc, #92]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001766:	4313      	orrs	r3, r2
 8001768:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d105      	bne.n	800177c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800177a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	490b      	ldr	r1, [pc, #44]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001796:	4313      	orrs	r3, r2
 8001798:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d008      	beq.n	80017b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	4904      	ldr	r1, [pc, #16]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40007000 	.word	0x40007000
 80017cc:	42420440 	.word	0x42420440

080017d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b08d      	sub	sp, #52	; 0x34
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017d8:	4b55      	ldr	r3, [pc, #340]	; (8001930 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80017da:	f107 040c 	add.w	r4, r7, #12
 80017de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017e4:	4b53      	ldr	r3, [pc, #332]	; (8001934 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
 80017ee:	2300      	movs	r3, #0
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	2300      	movs	r3, #0
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d07f      	beq.n	8001904 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8001804:	2b10      	cmp	r3, #16
 8001806:	d002      	beq.n	800180e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8001808:	2b01      	cmp	r3, #1
 800180a:	d048      	beq.n	800189e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800180c:	e08b      	b.n	8001926 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800180e:	4b4a      	ldr	r3, [pc, #296]	; (8001938 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001814:	4b48      	ldr	r3, [pc, #288]	; (8001938 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d07f      	beq.n	8001920 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	0c9b      	lsrs	r3, r3, #18
 8001824:	f003 030f 	and.w	r3, r3, #15
 8001828:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800182c:	4413      	add	r3, r2
 800182e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001832:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d018      	beq.n	8001870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800183e:	4b3e      	ldr	r3, [pc, #248]	; (8001938 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	0c5b      	lsrs	r3, r3, #17
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800184c:	4413      	add	r3, r2
 800184e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00d      	beq.n	800187a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800185e:	4a37      	ldr	r2, [pc, #220]	; (800193c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	fbb2 f2f3 	udiv	r2, r2, r3
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	fb02 f303 	mul.w	r3, r2, r3
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800186e:	e004      	b.n	800187a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	4a33      	ldr	r2, [pc, #204]	; (8001940 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001874:	fb02 f303 	mul.w	r3, r2, r3
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800187a:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001886:	d102      	bne.n	800188e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8001888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800188c:	e048      	b.n	8001920 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800188e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4a2c      	ldr	r2, [pc, #176]	; (8001944 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001894:	fba2 2303 	umull	r2, r3, r2, r3
 8001898:	085b      	lsrs	r3, r3, #1
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800189c:	e040      	b.n	8001920 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ae:	d108      	bne.n	80018c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80018ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
 80018c0:	e01f      	b.n	8001902 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018cc:	d109      	bne.n	80018e2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80018da:	f649 4340 	movw	r3, #40000	; 0x9c40
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
 80018e0:	e00f      	b.n	8001902 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018ec:	d11a      	bne.n	8001924 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d014      	beq.n	8001924 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80018fa:	f24f 4324 	movw	r3, #62500	; 0xf424
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001900:	e010      	b.n	8001924 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8001902:	e00f      	b.n	8001924 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001904:	f7ff fe7c 	bl	8001600 <HAL_RCC_GetPCLK2Freq>
 8001908:	4602      	mov	r2, r0
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	0b9b      	lsrs	r3, r3, #14
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	3301      	adds	r3, #1
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fbb2 f3f3 	udiv	r3, r2, r3
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800191e:	e002      	b.n	8001926 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001920:	bf00      	nop
 8001922:	e000      	b.n	8001926 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001924:	bf00      	nop
    }
  }
  return (frequency);
 8001926:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001928:	4618      	mov	r0, r3
 800192a:	3734      	adds	r7, #52	; 0x34
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	0800319c 	.word	0x0800319c
 8001934:	080031ac 	.word	0x080031ac
 8001938:	40021000 	.word	0x40021000
 800193c:	007a1200 	.word	0x007a1200
 8001940:	003d0900 	.word	0x003d0900
 8001944:	aaaaaaab 	.word	0xaaaaaaab

08001948 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e084      	b.n	8001a68 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7c5b      	ldrb	r3, [r3, #17]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d105      	bne.n	8001974 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7fe fe0a 	bl	8000588 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2202      	movs	r2, #2
 8001978:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 faf4 	bl	8001f68 <HAL_RTC_WaitForSynchro>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d004      	beq.n	8001990 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2204      	movs	r2, #4
 800198a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e06b      	b.n	8001a68 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 fbad 	bl	80020f0 <RTC_EnterInitMode>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2204      	movs	r2, #4
 80019a0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e060      	b.n	8001a68 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0207 	bic.w	r2, r2, #7
 80019b4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80019be:	4b2c      	ldr	r3, [pc, #176]	; (8001a70 <HAL_RTC_Init+0x128>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a2b      	ldr	r2, [pc, #172]	; (8001a70 <HAL_RTC_Init+0x128>)
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80019ca:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <HAL_RTC_Init+0x128>)
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	4926      	ldr	r1, [pc, #152]	; (8001a70 <HAL_RTC_Init+0x128>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d003      	beq.n	80019ee <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e00e      	b.n	8001a0c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7ff feee 	bl	80017d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80019f4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d104      	bne.n	8001a06 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2204      	movs	r2, #4
 8001a00:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e030      	b.n	8001a68 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f023 010f 	bic.w	r1, r3, #15
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	0c1a      	lsrs	r2, r3, #16
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	0c1b      	lsrs	r3, r3, #16
 8001a2a:	041b      	lsls	r3, r3, #16
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	b291      	uxth	r1, r2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	430b      	orrs	r3, r1
 8001a36:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 fb81 	bl	8002140 <RTC_ExitInitMode>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2204      	movs	r2, #4
 8001a48:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00c      	b.n	8001a68 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001a66:	2300      	movs	r3, #0
  }
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40006c00 	.word	0x40006c00

08001a74 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <HAL_RTC_SetTime+0x20>
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e080      	b.n	8001b9a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	7c1b      	ldrb	r3, [r3, #16]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RTC_SetTime+0x30>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e07a      	b.n	8001b9a <HAL_RTC_SetTime+0x126>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2202      	movs	r2, #2
 8001aae:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d113      	bne.n	8001ade <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001ac0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	785b      	ldrb	r3, [r3, #1]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	460b      	mov	r3, r1
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	1a5b      	subs	r3, r3, r1
 8001ad0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001ad2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001ad8:	4413      	add	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	e01e      	b.n	8001b1c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 fb71 	bl	80021ca <RTC_Bcd2ToByte>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461a      	mov	r2, r3
 8001aec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001af0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	785b      	ldrb	r3, [r3, #1]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 fb66 	bl	80021ca <RTC_Bcd2ToByte>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	4613      	mov	r3, r2
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	1a9b      	subs	r3, r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001b0a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	789b      	ldrb	r3, [r3, #2]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 fb5a 	bl	80021ca <RTC_Bcd2ToByte>
 8001b16:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001b18:	4423      	add	r3, r4
 8001b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001b1c:	6979      	ldr	r1, [r7, #20]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 fa7f 	bl	8002022 <RTC_WriteTimeCounter>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d007      	beq.n	8001b3a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e02f      	b.n	8001b9a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0205 	bic.w	r2, r2, #5
 8001b48:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 fa90 	bl	8002070 <RTC_ReadAlarmCounter>
 8001b50:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d018      	beq.n	8001b8c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d214      	bcs.n	8001b8c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001b68:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b6c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001b6e:	6939      	ldr	r1, [r7, #16]
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 fa96 	bl	80020a2 <RTC_WriteAlarmCounter>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d007      	beq.n	8001b8c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2204      	movs	r2, #4
 8001b80:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e006      	b.n	8001b9a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001b98:	2300      	movs	r3, #0
  }
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	371c      	adds	r7, #28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}
	...

08001ba4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61bb      	str	r3, [r7, #24]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_RTC_GetTime+0x28>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0b5      	b.n	8001d3c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e0ac      	b.n	8001d3c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 f9ed 	bl	8001fc2 <RTC_ReadTimeCounter>
 8001be8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	4a55      	ldr	r2, [pc, #340]	; (8001d44 <HAL_RTC_GetTime+0x1a0>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	0adb      	lsrs	r3, r3, #11
 8001bf4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4b52      	ldr	r3, [pc, #328]	; (8001d44 <HAL_RTC_GetTime+0x1a0>)
 8001bfa:	fba3 1302 	umull	r1, r3, r3, r2
 8001bfe:	0adb      	lsrs	r3, r3, #11
 8001c00:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001c04:	fb01 f303 	mul.w	r3, r1, r3
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	4a4f      	ldr	r2, [pc, #316]	; (8001d48 <HAL_RTC_GetTime+0x1a4>)
 8001c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c10:	095b      	lsrs	r3, r3, #5
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	4a4a      	ldr	r2, [pc, #296]	; (8001d44 <HAL_RTC_GetTime+0x1a0>)
 8001c1c:	fba2 1203 	umull	r1, r2, r2, r3
 8001c20:	0ad2      	lsrs	r2, r2, #11
 8001c22:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001c26:	fb01 f202 	mul.w	r2, r1, r2
 8001c2a:	1a9a      	subs	r2, r3, r2
 8001c2c:	4b46      	ldr	r3, [pc, #280]	; (8001d48 <HAL_RTC_GetTime+0x1a4>)
 8001c2e:	fba3 1302 	umull	r1, r3, r3, r2
 8001c32:	0959      	lsrs	r1, r3, #5
 8001c34:	460b      	mov	r3, r1
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	1a5b      	subs	r3, r3, r1
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	1ad1      	subs	r1, r2, r3
 8001c3e:	b2ca      	uxtb	r2, r1
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b17      	cmp	r3, #23
 8001c48:	d955      	bls.n	8001cf6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4a3f      	ldr	r2, [pc, #252]	; (8001d4c <HAL_RTC_GetTime+0x1a8>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8001c56:	6939      	ldr	r1, [r7, #16]
 8001c58:	4b3c      	ldr	r3, [pc, #240]	; (8001d4c <HAL_RTC_GetTime+0x1a8>)
 8001c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8001c5e:	091a      	lsrs	r2, r3, #4
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	1aca      	subs	r2, r1, r3
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f9fd 	bl	8002070 <RTC_ReadAlarmCounter>
 8001c76:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7e:	d008      	beq.n	8001c92 <HAL_RTC_GetTime+0xee>
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d904      	bls.n	8001c92 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	e002      	b.n	8001c98 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	4a2d      	ldr	r2, [pc, #180]	; (8001d50 <HAL_RTC_GetTime+0x1ac>)
 8001c9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001ca6:	69b9      	ldr	r1, [r7, #24]
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 f9ba 	bl	8002022 <RTC_WriteTimeCounter>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e041      	b.n	8001d3c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbe:	d00c      	beq.n	8001cda <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001cc8:	69f9      	ldr	r1, [r7, #28]
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 f9e9 	bl	80020a2 <RTC_WriteAlarmCounter>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00a      	beq.n	8001cec <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e030      	b.n	8001d3c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001cda:	69f9      	ldr	r1, [r7, #28]
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f9e0 	bl	80020a2 <RTC_WriteAlarmCounter>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e027      	b.n	8001d3c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8001cec:	6979      	ldr	r1, [r7, #20]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 fa88 	bl	8002204 <RTC_DateUpdate>
 8001cf4:	e003      	b.n	8001cfe <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01a      	beq.n	8001d3a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 fa41 	bl	8002190 <RTC_ByteToBcd2>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	461a      	mov	r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	785b      	ldrb	r3, [r3, #1]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fa38 	bl	8002190 <RTC_ByteToBcd2>
 8001d20:	4603      	mov	r3, r0
 8001d22:	461a      	mov	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	789b      	ldrb	r3, [r3, #2]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 fa2f 	bl	8002190 <RTC_ByteToBcd2>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3720      	adds	r7, #32
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	91a2b3c5 	.word	0x91a2b3c5
 8001d48:	88888889 	.word	0x88888889
 8001d4c:	aaaaaaab 	.word	0xaaaaaaab
 8001d50:	00015180 	.word	0x00015180

08001d54 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	2300      	movs	r3, #0
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d002      	beq.n	8001d78 <HAL_RTC_SetDate+0x24>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e097      	b.n	8001eac <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	7c1b      	ldrb	r3, [r3, #16]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_RTC_SetDate+0x34>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e091      	b.n	8001eac <HAL_RTC_SetDate+0x158>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2202      	movs	r2, #2
 8001d92:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10c      	bne.n	8001db4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	78da      	ldrb	r2, [r3, #3]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	785a      	ldrb	r2, [r3, #1]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	789a      	ldrb	r2, [r3, #2]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	739a      	strb	r2, [r3, #14]
 8001db2:	e01a      	b.n	8001dea <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	78db      	ldrb	r3, [r3, #3]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 fa06 	bl	80021ca <RTC_Bcd2ToByte>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	785b      	ldrb	r3, [r3, #1]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f9fd 	bl	80021ca <RTC_Bcd2ToByte>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	789b      	ldrb	r3, [r3, #2]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 f9f4 	bl	80021ca <RTC_Bcd2ToByte>
 8001de2:	4603      	mov	r3, r0
 8001de4:	461a      	mov	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	7bdb      	ldrb	r3, [r3, #15]
 8001dee:	4618      	mov	r0, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	7b59      	ldrb	r1, [r3, #13]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	7b9b      	ldrb	r3, [r3, #14]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f000 fadf 	bl	80023bc <RTC_WeekDayNum>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461a      	mov	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	7b1a      	ldrb	r2, [r3, #12]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 f8d7 	bl	8001fc2 <RTC_ReadTimeCounter>
 8001e14:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	4a26      	ldr	r2, [pc, #152]	; (8001eb4 <HAL_RTC_SetDate+0x160>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	0adb      	lsrs	r3, r3, #11
 8001e20:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2b18      	cmp	r3, #24
 8001e26:	d93a      	bls.n	8001e9e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	4a23      	ldr	r2, [pc, #140]	; (8001eb8 <HAL_RTC_SetDate+0x164>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	4a22      	ldr	r2, [pc, #136]	; (8001ebc <HAL_RTC_SetDate+0x168>)
 8001e34:	fb02 f303 	mul.w	r3, r2, r3
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001e3e:	69f9      	ldr	r1, [r7, #28]
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f8ee 	bl	8002022 <RTC_WriteTimeCounter>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d007      	beq.n	8001e5c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2204      	movs	r2, #4
 8001e50:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e027      	b.n	8001eac <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f907 	bl	8002070 <RTC_ReadAlarmCounter>
 8001e62:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6a:	d018      	beq.n	8001e9e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d214      	bcs.n	8001e9e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001e7a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e7e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001e80:	69b9      	ldr	r1, [r7, #24]
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f90d 	bl	80020a2 <RTC_WriteAlarmCounter>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2204      	movs	r2, #4
 8001e92:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e006      	b.n	8001eac <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3720      	adds	r7, #32
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	91a2b3c5 	.word	0x91a2b3c5
 8001eb8:	aaaaaaab 	.word	0xaaaaaaab
 8001ebc:	00015180 	.word	0x00015180

08001ec0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	460a      	mov	r2, r1
 8001ed4:	801a      	strh	r2, [r3, #0]
 8001ed6:	460a      	mov	r2, r1
 8001ed8:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <HAL_RTC_GetDate+0x26>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e03a      	b.n	8001f60 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	2200      	movs	r2, #0
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f7ff fe56 	bl	8001ba4 <HAL_RTC_GetTime>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e02e      	b.n	8001f60 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	7b1a      	ldrb	r2, [r3, #12]
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	7bda      	ldrb	r2, [r3, #15]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	7b5a      	ldrb	r2, [r3, #13]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	7b9a      	ldrb	r2, [r3, #14]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01a      	beq.n	8001f5e <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	78db      	ldrb	r3, [r3, #3]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f92f 	bl	8002190 <RTC_ByteToBcd2>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461a      	mov	r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	785b      	ldrb	r3, [r3, #1]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f926 	bl	8002190 <RTC_ByteToBcd2>
 8001f44:	4603      	mov	r3, r0
 8001f46:	461a      	mov	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	789b      	ldrb	r3, [r3, #2]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 f91d 	bl	8002190 <RTC_ByteToBcd2>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e01d      	b.n	8001fba <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0208 	bic.w	r2, r2, #8
 8001f8c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001f8e:	f7fe fc85 	bl	800089c <HAL_GetTick>
 8001f92:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001f94:	e009      	b.n	8001faa <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001f96:	f7fe fc81 	bl	800089c <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fa4:	d901      	bls.n	8001faa <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e007      	b.n	8001fba <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0ee      	beq.n	8001f96 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b087      	sub	sp, #28
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	827b      	strh	r3, [r7, #18]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	823b      	strh	r3, [r7, #16]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001ff2:	8a7a      	ldrh	r2, [r7, #18]
 8001ff4:	8a3b      	ldrh	r3, [r7, #16]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d008      	beq.n	800200c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001ffa:	8a3b      	ldrh	r3, [r7, #16]
 8001ffc:	041a      	lsls	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	b29b      	uxth	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	e004      	b.n	8002016 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800200c:	8a7b      	ldrh	r3, [r7, #18]
 800200e:	041a      	lsls	r2, r3, #16
 8002010:	89fb      	ldrh	r3, [r7, #14]
 8002012:	4313      	orrs	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002016:	697b      	ldr	r3, [r7, #20]
}
 8002018:	4618      	mov	r0, r3
 800201a:	371c      	adds	r7, #28
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f85d 	bl	80020f0 <RTC_EnterInitMode>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	e011      	b.n	8002066 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	0c12      	lsrs	r2, r2, #16
 800204a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	b292      	uxth	r2, r2
 8002054:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f872 	bl	8002140 <RTC_ExitInitMode>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002066:	7bfb      	ldrb	r3, [r7, #15]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	81fb      	strh	r3, [r7, #14]
 800207c:	2300      	movs	r3, #0
 800207e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002090:	89fb      	ldrh	r3, [r7, #14]
 8002092:	041a      	lsls	r2, r3, #16
 8002094:	89bb      	ldrh	r3, [r7, #12]
 8002096:	4313      	orrs	r3, r2
}
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f81d 	bl	80020f0 <RTC_EnterInitMode>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e011      	b.n	80020e6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	0c12      	lsrs	r2, r2, #16
 80020ca:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	b292      	uxth	r2, r2
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f832 	bl	8002140 <RTC_ExitInitMode>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80020fc:	f7fe fbce 	bl	800089c <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002102:	e009      	b.n	8002118 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002104:	f7fe fbca 	bl	800089c <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002112:	d901      	bls.n	8002118 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e00f      	b.n	8002138 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0ee      	beq.n	8002104 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0210 	orr.w	r2, r2, #16
 8002134:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0210 	bic.w	r2, r2, #16
 800215a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800215c:	f7fe fb9e 	bl	800089c <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002162:	e009      	b.n	8002178 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002164:	f7fe fb9a 	bl	800089c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002172:	d901      	bls.n	8002178 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e007      	b.n	8002188 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0ee      	beq.n	8002164 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800219e:	e005      	b.n	80021ac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3301      	adds	r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	3b0a      	subs	r3, #10
 80021aa:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	2b09      	cmp	r3, #9
 80021b0:	d8f6      	bhi.n	80021a0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	4313      	orrs	r3, r2
 80021be:	b2db      	uxtb	r3, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b085      	sub	sp, #20
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	b2db      	uxtb	r3, r3
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7bdb      	ldrb	r3, [r3, #15]
 8002222:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	7b5b      	ldrb	r3, [r3, #13]
 8002228:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	7b9b      	ldrb	r3, [r3, #14]
 800222e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002230:	2300      	movs	r3, #0
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	e06f      	b.n	8002316 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d011      	beq.n	8002260 <RTC_DateUpdate+0x5c>
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d00e      	beq.n	8002260 <RTC_DateUpdate+0x5c>
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b05      	cmp	r3, #5
 8002246:	d00b      	beq.n	8002260 <RTC_DateUpdate+0x5c>
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	2b07      	cmp	r3, #7
 800224c:	d008      	beq.n	8002260 <RTC_DateUpdate+0x5c>
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b08      	cmp	r3, #8
 8002252:	d005      	beq.n	8002260 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	2b0a      	cmp	r3, #10
 8002258:	d002      	beq.n	8002260 <RTC_DateUpdate+0x5c>
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b0c      	cmp	r3, #12
 800225e:	d117      	bne.n	8002290 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b1e      	cmp	r3, #30
 8002264:	d803      	bhi.n	800226e <RTC_DateUpdate+0x6a>
      {
        day++;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3301      	adds	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800226c:	e050      	b.n	8002310 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b0c      	cmp	r3, #12
 8002272:	d005      	beq.n	8002280 <RTC_DateUpdate+0x7c>
        {
          month++;
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	3301      	adds	r3, #1
 8002278:	613b      	str	r3, [r7, #16]
          day = 1U;
 800227a:	2301      	movs	r3, #1
 800227c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800227e:	e047      	b.n	8002310 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002280:	2301      	movs	r3, #1
 8002282:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002284:	2301      	movs	r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
          year++;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800228e:	e03f      	b.n	8002310 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b04      	cmp	r3, #4
 8002294:	d008      	beq.n	80022a8 <RTC_DateUpdate+0xa4>
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b06      	cmp	r3, #6
 800229a:	d005      	beq.n	80022a8 <RTC_DateUpdate+0xa4>
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b09      	cmp	r3, #9
 80022a0:	d002      	beq.n	80022a8 <RTC_DateUpdate+0xa4>
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b0b      	cmp	r3, #11
 80022a6:	d10c      	bne.n	80022c2 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b1d      	cmp	r3, #29
 80022ac:	d803      	bhi.n	80022b6 <RTC_DateUpdate+0xb2>
      {
        day++;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3301      	adds	r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80022b4:	e02c      	b.n	8002310 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	3301      	adds	r3, #1
 80022ba:	613b      	str	r3, [r7, #16]
        day = 1U;
 80022bc:	2301      	movs	r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80022c0:	e026      	b.n	8002310 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d123      	bne.n	8002310 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b1b      	cmp	r3, #27
 80022cc:	d803      	bhi.n	80022d6 <RTC_DateUpdate+0xd2>
      {
        day++;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	3301      	adds	r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	e01c      	b.n	8002310 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b1c      	cmp	r3, #28
 80022da:	d111      	bne.n	8002300 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 f839 	bl	8002358 <RTC_IsLeapYear>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <RTC_DateUpdate+0xf0>
        {
          day++;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	3301      	adds	r3, #1
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	e00d      	b.n	8002310 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	3301      	adds	r3, #1
 80022f8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80022fa:	2301      	movs	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	e007      	b.n	8002310 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b1d      	cmp	r3, #29
 8002304:	d104      	bne.n	8002310 <RTC_DateUpdate+0x10c>
      {
        month++;
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	3301      	adds	r3, #1
 800230a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800230c:	2301      	movs	r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	3301      	adds	r3, #1
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d38b      	bcc.n	8002236 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	4619      	mov	r1, r3
 8002340:	6978      	ldr	r0, [r7, #20]
 8002342:	f000 f83b 	bl	80023bc <RTC_WeekDayNum>
 8002346:	4603      	mov	r3, r0
 8002348:	461a      	mov	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	731a      	strb	r2, [r3, #12]
}
 800234e:	bf00      	nop
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	e01d      	b.n	80023ae <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	4a10      	ldr	r2, [pc, #64]	; (80023b8 <RTC_IsLeapYear+0x60>)
 8002376:	fba2 1203 	umull	r1, r2, r2, r3
 800237a:	0952      	lsrs	r2, r2, #5
 800237c:	2164      	movs	r1, #100	; 0x64
 800237e:	fb01 f202 	mul.w	r2, r1, r2
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800238a:	2301      	movs	r3, #1
 800238c:	e00f      	b.n	80023ae <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <RTC_IsLeapYear+0x60>)
 8002392:	fba2 1203 	umull	r1, r2, r2, r3
 8002396:	09d2      	lsrs	r2, r2, #7
 8002398:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800239c:	fb01 f202 	mul.w	r2, r1, r2
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80023ac:	2300      	movs	r3, #0
  }
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	51eb851f 	.word	0x51eb851f

080023bc <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	70fb      	strb	r3, [r7, #3]
 80023c8:	4613      	mov	r3, r2
 80023ca:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80023da:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d82d      	bhi.n	800243e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	1a9b      	subs	r3, r3, r2
 80023ee:	4a2c      	ldr	r2, [pc, #176]	; (80024a0 <RTC_WeekDayNum+0xe4>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	085a      	lsrs	r2, r3, #1
 80023f6:	78bb      	ldrb	r3, [r7, #2]
 80023f8:	441a      	add	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	441a      	add	r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	3b01      	subs	r3, #1
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	441a      	add	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3b01      	subs	r3, #1
 800240a:	4926      	ldr	r1, [pc, #152]	; (80024a4 <RTC_WeekDayNum+0xe8>)
 800240c:	fba1 1303 	umull	r1, r3, r1, r3
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	1ad2      	subs	r2, r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	3b01      	subs	r3, #1
 8002418:	4922      	ldr	r1, [pc, #136]	; (80024a4 <RTC_WeekDayNum+0xe8>)
 800241a:	fba1 1303 	umull	r1, r3, r1, r3
 800241e:	09db      	lsrs	r3, r3, #7
 8002420:	4413      	add	r3, r2
 8002422:	1d1a      	adds	r2, r3, #4
 8002424:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <RTC_WeekDayNum+0xec>)
 8002426:	fba3 1302 	umull	r1, r3, r3, r2
 800242a:	1ad1      	subs	r1, r2, r3
 800242c:	0849      	lsrs	r1, r1, #1
 800242e:	440b      	add	r3, r1
 8002430:	0899      	lsrs	r1, r3, #2
 8002432:	460b      	mov	r3, r1
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	1a5b      	subs	r3, r3, r1
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	e029      	b.n	8002492 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	4613      	mov	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <RTC_WeekDayNum+0xe4>)
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
 8002450:	085a      	lsrs	r2, r3, #1
 8002452:	78bb      	ldrb	r3, [r7, #2]
 8002454:	441a      	add	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	441a      	add	r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	441a      	add	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4910      	ldr	r1, [pc, #64]	; (80024a4 <RTC_WeekDayNum+0xe8>)
 8002464:	fba1 1303 	umull	r1, r3, r1, r3
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	1ad2      	subs	r2, r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	490d      	ldr	r1, [pc, #52]	; (80024a4 <RTC_WeekDayNum+0xe8>)
 8002470:	fba1 1303 	umull	r1, r3, r1, r3
 8002474:	09db      	lsrs	r3, r3, #7
 8002476:	4413      	add	r3, r2
 8002478:	1c9a      	adds	r2, r3, #2
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <RTC_WeekDayNum+0xec>)
 800247c:	fba3 1302 	umull	r1, r3, r3, r2
 8002480:	1ad1      	subs	r1, r2, r3
 8002482:	0849      	lsrs	r1, r1, #1
 8002484:	440b      	add	r3, r1
 8002486:	0899      	lsrs	r1, r3, #2
 8002488:	460b      	mov	r3, r1
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	1a5b      	subs	r3, r3, r1
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	b2db      	uxtb	r3, r3
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	38e38e39 	.word	0x38e38e39
 80024a4:	51eb851f 	.word	0x51eb851f
 80024a8:	24924925 	.word	0x24924925

080024ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e03f      	b.n	800253e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe f87c 	bl	80005d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2224      	movs	r2, #36	; 0x24
 80024dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f90b 	bl	800270c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002504:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002514:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002524:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b088      	sub	sp, #32
 800254a:	af02      	add	r7, sp, #8
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	4613      	mov	r3, r2
 8002554:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b20      	cmp	r3, #32
 8002564:	f040 8083 	bne.w	800266e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_UART_Transmit+0x2e>
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e07b      	b.n	8002670 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_UART_Transmit+0x40>
 8002582:	2302      	movs	r3, #2
 8002584:	e074      	b.n	8002670 <HAL_UART_Transmit+0x12a>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2221      	movs	r2, #33	; 0x21
 8002598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800259c:	f7fe f97e 	bl	800089c <HAL_GetTick>
 80025a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	88fa      	ldrh	r2, [r7, #6]
 80025a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	88fa      	ldrh	r2, [r7, #6]
 80025ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025ae:	e042      	b.n	8002636 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c6:	d122      	bne.n	800260e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2200      	movs	r2, #0
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f850 	bl	8002678 <UART_WaitOnFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e046      	b.n	8002670 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025f4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	3302      	adds	r3, #2
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	e017      	b.n	8002636 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	3301      	adds	r3, #1
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	e013      	b.n	8002636 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2200      	movs	r2, #0
 8002616:	2180      	movs	r1, #128	; 0x80
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f82d 	bl	8002678 <UART_WaitOnFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e023      	b.n	8002670 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	60ba      	str	r2, [r7, #8]
 800262e:	781a      	ldrb	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800263a:	b29b      	uxth	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1b7      	bne.n	80025b0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2200      	movs	r2, #0
 8002648:	2140      	movs	r1, #64	; 0x40
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f814 	bl	8002678 <UART_WaitOnFlagUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e00a      	b.n	8002670 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800266e:	2302      	movs	r3, #2
  }
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	4613      	mov	r3, r2
 8002686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002688:	e02c      	b.n	80026e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002690:	d028      	beq.n	80026e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002698:	f7fe f900 	bl	800089c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d21d      	bcs.n	80026e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e00f      	b.n	8002704 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4013      	ands	r3, r2
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d0c3      	beq.n	800268a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002746:	f023 030c 	bic.w	r3, r3, #12
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	68f9      	ldr	r1, [r7, #12]
 8002750:	430b      	orrs	r3, r1
 8002752:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699a      	ldr	r2, [r3, #24]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a52      	ldr	r2, [pc, #328]	; (80028b8 <UART_SetConfig+0x1ac>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d14e      	bne.n	8002812 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002774:	f7fe ff44 	bl	8001600 <HAL_RCC_GetPCLK2Freq>
 8002778:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	009a      	lsls	r2, r3, #2
 8002784:	441a      	add	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002790:	4a4a      	ldr	r2, [pc, #296]	; (80028bc <UART_SetConfig+0x1b0>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	0119      	lsls	r1, r3, #4
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	009a      	lsls	r2, r3, #2
 80027a4:	441a      	add	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80027b0:	4b42      	ldr	r3, [pc, #264]	; (80028bc <UART_SetConfig+0x1b0>)
 80027b2:	fba3 0302 	umull	r0, r3, r3, r2
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	2064      	movs	r0, #100	; 0x64
 80027ba:	fb00 f303 	mul.w	r3, r0, r3
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	3332      	adds	r3, #50	; 0x32
 80027c4:	4a3d      	ldr	r2, [pc, #244]	; (80028bc <UART_SetConfig+0x1b0>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d0:	4419      	add	r1, r3
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	009a      	lsls	r2, r3, #2
 80027dc:	441a      	add	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027e8:	4b34      	ldr	r3, [pc, #208]	; (80028bc <UART_SetConfig+0x1b0>)
 80027ea:	fba3 0302 	umull	r0, r3, r3, r2
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	2064      	movs	r0, #100	; 0x64
 80027f2:	fb00 f303 	mul.w	r3, r0, r3
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	3332      	adds	r3, #50	; 0x32
 80027fc:	4a2f      	ldr	r2, [pc, #188]	; (80028bc <UART_SetConfig+0x1b0>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	f003 020f 	and.w	r2, r3, #15
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	440a      	add	r2, r1
 800280e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002810:	e04d      	b.n	80028ae <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002812:	f7fe fee1 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8002816:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	009a      	lsls	r2, r3, #2
 8002822:	441a      	add	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	fbb2 f3f3 	udiv	r3, r2, r3
 800282e:	4a23      	ldr	r2, [pc, #140]	; (80028bc <UART_SetConfig+0x1b0>)
 8002830:	fba2 2303 	umull	r2, r3, r2, r3
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	0119      	lsls	r1, r3, #4
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	009a      	lsls	r2, r3, #2
 8002842:	441a      	add	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	fbb2 f2f3 	udiv	r2, r2, r3
 800284e:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <UART_SetConfig+0x1b0>)
 8002850:	fba3 0302 	umull	r0, r3, r3, r2
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	2064      	movs	r0, #100	; 0x64
 8002858:	fb00 f303 	mul.w	r3, r0, r3
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	3332      	adds	r3, #50	; 0x32
 8002862:	4a16      	ldr	r2, [pc, #88]	; (80028bc <UART_SetConfig+0x1b0>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800286e:	4419      	add	r1, r3
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	009a      	lsls	r2, r3, #2
 800287a:	441a      	add	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	fbb2 f2f3 	udiv	r2, r2, r3
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <UART_SetConfig+0x1b0>)
 8002888:	fba3 0302 	umull	r0, r3, r3, r2
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	2064      	movs	r0, #100	; 0x64
 8002890:	fb00 f303 	mul.w	r3, r0, r3
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	3332      	adds	r3, #50	; 0x32
 800289a:	4a08      	ldr	r2, [pc, #32]	; (80028bc <UART_SetConfig+0x1b0>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	f003 020f 	and.w	r2, r3, #15
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	440a      	add	r2, r1
 80028ac:	609a      	str	r2, [r3, #8]
}
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40013800 	.word	0x40013800
 80028bc:	51eb851f 	.word	0x51eb851f

080028c0 <__errno>:
 80028c0:	4b01      	ldr	r3, [pc, #4]	; (80028c8 <__errno+0x8>)
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	2000000c 	.word	0x2000000c

080028cc <__libc_init_array>:
 80028cc:	b570      	push	{r4, r5, r6, lr}
 80028ce:	2500      	movs	r5, #0
 80028d0:	4e0c      	ldr	r6, [pc, #48]	; (8002904 <__libc_init_array+0x38>)
 80028d2:	4c0d      	ldr	r4, [pc, #52]	; (8002908 <__libc_init_array+0x3c>)
 80028d4:	1ba4      	subs	r4, r4, r6
 80028d6:	10a4      	asrs	r4, r4, #2
 80028d8:	42a5      	cmp	r5, r4
 80028da:	d109      	bne.n	80028f0 <__libc_init_array+0x24>
 80028dc:	f000 fc34 	bl	8003148 <_init>
 80028e0:	2500      	movs	r5, #0
 80028e2:	4e0a      	ldr	r6, [pc, #40]	; (800290c <__libc_init_array+0x40>)
 80028e4:	4c0a      	ldr	r4, [pc, #40]	; (8002910 <__libc_init_array+0x44>)
 80028e6:	1ba4      	subs	r4, r4, r6
 80028e8:	10a4      	asrs	r4, r4, #2
 80028ea:	42a5      	cmp	r5, r4
 80028ec:	d105      	bne.n	80028fa <__libc_init_array+0x2e>
 80028ee:	bd70      	pop	{r4, r5, r6, pc}
 80028f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028f4:	4798      	blx	r3
 80028f6:	3501      	adds	r5, #1
 80028f8:	e7ee      	b.n	80028d8 <__libc_init_array+0xc>
 80028fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028fe:	4798      	blx	r3
 8002900:	3501      	adds	r5, #1
 8002902:	e7f2      	b.n	80028ea <__libc_init_array+0x1e>
 8002904:	080031fc 	.word	0x080031fc
 8002908:	080031fc 	.word	0x080031fc
 800290c:	080031fc 	.word	0x080031fc
 8002910:	08003200 	.word	0x08003200

08002914 <memset>:
 8002914:	4603      	mov	r3, r0
 8002916:	4402      	add	r2, r0
 8002918:	4293      	cmp	r3, r2
 800291a:	d100      	bne.n	800291e <memset+0xa>
 800291c:	4770      	bx	lr
 800291e:	f803 1b01 	strb.w	r1, [r3], #1
 8002922:	e7f9      	b.n	8002918 <memset+0x4>

08002924 <siprintf>:
 8002924:	b40e      	push	{r1, r2, r3}
 8002926:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800292a:	b500      	push	{lr}
 800292c:	b09c      	sub	sp, #112	; 0x70
 800292e:	ab1d      	add	r3, sp, #116	; 0x74
 8002930:	9002      	str	r0, [sp, #8]
 8002932:	9006      	str	r0, [sp, #24]
 8002934:	9107      	str	r1, [sp, #28]
 8002936:	9104      	str	r1, [sp, #16]
 8002938:	4808      	ldr	r0, [pc, #32]	; (800295c <siprintf+0x38>)
 800293a:	4909      	ldr	r1, [pc, #36]	; (8002960 <siprintf+0x3c>)
 800293c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002940:	9105      	str	r1, [sp, #20]
 8002942:	6800      	ldr	r0, [r0, #0]
 8002944:	a902      	add	r1, sp, #8
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	f000 f866 	bl	8002a18 <_svfiprintf_r>
 800294c:	2200      	movs	r2, #0
 800294e:	9b02      	ldr	r3, [sp, #8]
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	b01c      	add	sp, #112	; 0x70
 8002954:	f85d eb04 	ldr.w	lr, [sp], #4
 8002958:	b003      	add	sp, #12
 800295a:	4770      	bx	lr
 800295c:	2000000c 	.word	0x2000000c
 8002960:	ffff0208 	.word	0xffff0208

08002964 <__ssputs_r>:
 8002964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002968:	688e      	ldr	r6, [r1, #8]
 800296a:	4682      	mov	sl, r0
 800296c:	429e      	cmp	r6, r3
 800296e:	460c      	mov	r4, r1
 8002970:	4690      	mov	r8, r2
 8002972:	4699      	mov	r9, r3
 8002974:	d837      	bhi.n	80029e6 <__ssputs_r+0x82>
 8002976:	898a      	ldrh	r2, [r1, #12]
 8002978:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800297c:	d031      	beq.n	80029e2 <__ssputs_r+0x7e>
 800297e:	2302      	movs	r3, #2
 8002980:	6825      	ldr	r5, [r4, #0]
 8002982:	6909      	ldr	r1, [r1, #16]
 8002984:	1a6f      	subs	r7, r5, r1
 8002986:	6965      	ldr	r5, [r4, #20]
 8002988:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800298c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002990:	f109 0301 	add.w	r3, r9, #1
 8002994:	443b      	add	r3, r7
 8002996:	429d      	cmp	r5, r3
 8002998:	bf38      	it	cc
 800299a:	461d      	movcc	r5, r3
 800299c:	0553      	lsls	r3, r2, #21
 800299e:	d530      	bpl.n	8002a02 <__ssputs_r+0x9e>
 80029a0:	4629      	mov	r1, r5
 80029a2:	f000 fb37 	bl	8003014 <_malloc_r>
 80029a6:	4606      	mov	r6, r0
 80029a8:	b950      	cbnz	r0, 80029c0 <__ssputs_r+0x5c>
 80029aa:	230c      	movs	r3, #12
 80029ac:	f04f 30ff 	mov.w	r0, #4294967295
 80029b0:	f8ca 3000 	str.w	r3, [sl]
 80029b4:	89a3      	ldrh	r3, [r4, #12]
 80029b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ba:	81a3      	strh	r3, [r4, #12]
 80029bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029c0:	463a      	mov	r2, r7
 80029c2:	6921      	ldr	r1, [r4, #16]
 80029c4:	f000 fab6 	bl	8002f34 <memcpy>
 80029c8:	89a3      	ldrh	r3, [r4, #12]
 80029ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d2:	81a3      	strh	r3, [r4, #12]
 80029d4:	6126      	str	r6, [r4, #16]
 80029d6:	443e      	add	r6, r7
 80029d8:	6026      	str	r6, [r4, #0]
 80029da:	464e      	mov	r6, r9
 80029dc:	6165      	str	r5, [r4, #20]
 80029de:	1bed      	subs	r5, r5, r7
 80029e0:	60a5      	str	r5, [r4, #8]
 80029e2:	454e      	cmp	r6, r9
 80029e4:	d900      	bls.n	80029e8 <__ssputs_r+0x84>
 80029e6:	464e      	mov	r6, r9
 80029e8:	4632      	mov	r2, r6
 80029ea:	4641      	mov	r1, r8
 80029ec:	6820      	ldr	r0, [r4, #0]
 80029ee:	f000 faac 	bl	8002f4a <memmove>
 80029f2:	68a3      	ldr	r3, [r4, #8]
 80029f4:	2000      	movs	r0, #0
 80029f6:	1b9b      	subs	r3, r3, r6
 80029f8:	60a3      	str	r3, [r4, #8]
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	441e      	add	r6, r3
 80029fe:	6026      	str	r6, [r4, #0]
 8002a00:	e7dc      	b.n	80029bc <__ssputs_r+0x58>
 8002a02:	462a      	mov	r2, r5
 8002a04:	f000 fb60 	bl	80030c8 <_realloc_r>
 8002a08:	4606      	mov	r6, r0
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	d1e2      	bne.n	80029d4 <__ssputs_r+0x70>
 8002a0e:	6921      	ldr	r1, [r4, #16]
 8002a10:	4650      	mov	r0, sl
 8002a12:	f000 fab3 	bl	8002f7c <_free_r>
 8002a16:	e7c8      	b.n	80029aa <__ssputs_r+0x46>

08002a18 <_svfiprintf_r>:
 8002a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a1c:	461d      	mov	r5, r3
 8002a1e:	898b      	ldrh	r3, [r1, #12]
 8002a20:	b09d      	sub	sp, #116	; 0x74
 8002a22:	061f      	lsls	r7, r3, #24
 8002a24:	4680      	mov	r8, r0
 8002a26:	460c      	mov	r4, r1
 8002a28:	4616      	mov	r6, r2
 8002a2a:	d50f      	bpl.n	8002a4c <_svfiprintf_r+0x34>
 8002a2c:	690b      	ldr	r3, [r1, #16]
 8002a2e:	b96b      	cbnz	r3, 8002a4c <_svfiprintf_r+0x34>
 8002a30:	2140      	movs	r1, #64	; 0x40
 8002a32:	f000 faef 	bl	8003014 <_malloc_r>
 8002a36:	6020      	str	r0, [r4, #0]
 8002a38:	6120      	str	r0, [r4, #16]
 8002a3a:	b928      	cbnz	r0, 8002a48 <_svfiprintf_r+0x30>
 8002a3c:	230c      	movs	r3, #12
 8002a3e:	f8c8 3000 	str.w	r3, [r8]
 8002a42:	f04f 30ff 	mov.w	r0, #4294967295
 8002a46:	e0c8      	b.n	8002bda <_svfiprintf_r+0x1c2>
 8002a48:	2340      	movs	r3, #64	; 0x40
 8002a4a:	6163      	str	r3, [r4, #20]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a50:	2320      	movs	r3, #32
 8002a52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a56:	2330      	movs	r3, #48	; 0x30
 8002a58:	f04f 0b01 	mov.w	fp, #1
 8002a5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a60:	9503      	str	r5, [sp, #12]
 8002a62:	4637      	mov	r7, r6
 8002a64:	463d      	mov	r5, r7
 8002a66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002a6a:	b10b      	cbz	r3, 8002a70 <_svfiprintf_r+0x58>
 8002a6c:	2b25      	cmp	r3, #37	; 0x25
 8002a6e:	d13e      	bne.n	8002aee <_svfiprintf_r+0xd6>
 8002a70:	ebb7 0a06 	subs.w	sl, r7, r6
 8002a74:	d00b      	beq.n	8002a8e <_svfiprintf_r+0x76>
 8002a76:	4653      	mov	r3, sl
 8002a78:	4632      	mov	r2, r6
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	4640      	mov	r0, r8
 8002a7e:	f7ff ff71 	bl	8002964 <__ssputs_r>
 8002a82:	3001      	adds	r0, #1
 8002a84:	f000 80a4 	beq.w	8002bd0 <_svfiprintf_r+0x1b8>
 8002a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a8a:	4453      	add	r3, sl
 8002a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8002a8e:	783b      	ldrb	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 809d 	beq.w	8002bd0 <_svfiprintf_r+0x1b8>
 8002a96:	2300      	movs	r3, #0
 8002a98:	f04f 32ff 	mov.w	r2, #4294967295
 8002a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002aa0:	9304      	str	r3, [sp, #16]
 8002aa2:	9307      	str	r3, [sp, #28]
 8002aa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002aa8:	931a      	str	r3, [sp, #104]	; 0x68
 8002aaa:	462f      	mov	r7, r5
 8002aac:	2205      	movs	r2, #5
 8002aae:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002ab2:	4850      	ldr	r0, [pc, #320]	; (8002bf4 <_svfiprintf_r+0x1dc>)
 8002ab4:	f000 fa30 	bl	8002f18 <memchr>
 8002ab8:	9b04      	ldr	r3, [sp, #16]
 8002aba:	b9d0      	cbnz	r0, 8002af2 <_svfiprintf_r+0xda>
 8002abc:	06d9      	lsls	r1, r3, #27
 8002abe:	bf44      	itt	mi
 8002ac0:	2220      	movmi	r2, #32
 8002ac2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ac6:	071a      	lsls	r2, r3, #28
 8002ac8:	bf44      	itt	mi
 8002aca:	222b      	movmi	r2, #43	; 0x2b
 8002acc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ad0:	782a      	ldrb	r2, [r5, #0]
 8002ad2:	2a2a      	cmp	r2, #42	; 0x2a
 8002ad4:	d015      	beq.n	8002b02 <_svfiprintf_r+0xea>
 8002ad6:	462f      	mov	r7, r5
 8002ad8:	2000      	movs	r0, #0
 8002ada:	250a      	movs	r5, #10
 8002adc:	9a07      	ldr	r2, [sp, #28]
 8002ade:	4639      	mov	r1, r7
 8002ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ae4:	3b30      	subs	r3, #48	; 0x30
 8002ae6:	2b09      	cmp	r3, #9
 8002ae8:	d94d      	bls.n	8002b86 <_svfiprintf_r+0x16e>
 8002aea:	b1b8      	cbz	r0, 8002b1c <_svfiprintf_r+0x104>
 8002aec:	e00f      	b.n	8002b0e <_svfiprintf_r+0xf6>
 8002aee:	462f      	mov	r7, r5
 8002af0:	e7b8      	b.n	8002a64 <_svfiprintf_r+0x4c>
 8002af2:	4a40      	ldr	r2, [pc, #256]	; (8002bf4 <_svfiprintf_r+0x1dc>)
 8002af4:	463d      	mov	r5, r7
 8002af6:	1a80      	subs	r0, r0, r2
 8002af8:	fa0b f000 	lsl.w	r0, fp, r0
 8002afc:	4318      	orrs	r0, r3
 8002afe:	9004      	str	r0, [sp, #16]
 8002b00:	e7d3      	b.n	8002aaa <_svfiprintf_r+0x92>
 8002b02:	9a03      	ldr	r2, [sp, #12]
 8002b04:	1d11      	adds	r1, r2, #4
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	9103      	str	r1, [sp, #12]
 8002b0a:	2a00      	cmp	r2, #0
 8002b0c:	db01      	blt.n	8002b12 <_svfiprintf_r+0xfa>
 8002b0e:	9207      	str	r2, [sp, #28]
 8002b10:	e004      	b.n	8002b1c <_svfiprintf_r+0x104>
 8002b12:	4252      	negs	r2, r2
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	9207      	str	r2, [sp, #28]
 8002b1a:	9304      	str	r3, [sp, #16]
 8002b1c:	783b      	ldrb	r3, [r7, #0]
 8002b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8002b20:	d10c      	bne.n	8002b3c <_svfiprintf_r+0x124>
 8002b22:	787b      	ldrb	r3, [r7, #1]
 8002b24:	2b2a      	cmp	r3, #42	; 0x2a
 8002b26:	d133      	bne.n	8002b90 <_svfiprintf_r+0x178>
 8002b28:	9b03      	ldr	r3, [sp, #12]
 8002b2a:	3702      	adds	r7, #2
 8002b2c:	1d1a      	adds	r2, r3, #4
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	9203      	str	r2, [sp, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bfb8      	it	lt
 8002b36:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b3a:	9305      	str	r3, [sp, #20]
 8002b3c:	4d2e      	ldr	r5, [pc, #184]	; (8002bf8 <_svfiprintf_r+0x1e0>)
 8002b3e:	2203      	movs	r2, #3
 8002b40:	7839      	ldrb	r1, [r7, #0]
 8002b42:	4628      	mov	r0, r5
 8002b44:	f000 f9e8 	bl	8002f18 <memchr>
 8002b48:	b138      	cbz	r0, 8002b5a <_svfiprintf_r+0x142>
 8002b4a:	2340      	movs	r3, #64	; 0x40
 8002b4c:	1b40      	subs	r0, r0, r5
 8002b4e:	fa03 f000 	lsl.w	r0, r3, r0
 8002b52:	9b04      	ldr	r3, [sp, #16]
 8002b54:	3701      	adds	r7, #1
 8002b56:	4303      	orrs	r3, r0
 8002b58:	9304      	str	r3, [sp, #16]
 8002b5a:	7839      	ldrb	r1, [r7, #0]
 8002b5c:	2206      	movs	r2, #6
 8002b5e:	4827      	ldr	r0, [pc, #156]	; (8002bfc <_svfiprintf_r+0x1e4>)
 8002b60:	1c7e      	adds	r6, r7, #1
 8002b62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b66:	f000 f9d7 	bl	8002f18 <memchr>
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	d038      	beq.n	8002be0 <_svfiprintf_r+0x1c8>
 8002b6e:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <_svfiprintf_r+0x1e8>)
 8002b70:	bb13      	cbnz	r3, 8002bb8 <_svfiprintf_r+0x1a0>
 8002b72:	9b03      	ldr	r3, [sp, #12]
 8002b74:	3307      	adds	r3, #7
 8002b76:	f023 0307 	bic.w	r3, r3, #7
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	9303      	str	r3, [sp, #12]
 8002b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b80:	444b      	add	r3, r9
 8002b82:	9309      	str	r3, [sp, #36]	; 0x24
 8002b84:	e76d      	b.n	8002a62 <_svfiprintf_r+0x4a>
 8002b86:	fb05 3202 	mla	r2, r5, r2, r3
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	460f      	mov	r7, r1
 8002b8e:	e7a6      	b.n	8002ade <_svfiprintf_r+0xc6>
 8002b90:	2300      	movs	r3, #0
 8002b92:	250a      	movs	r5, #10
 8002b94:	4619      	mov	r1, r3
 8002b96:	3701      	adds	r7, #1
 8002b98:	9305      	str	r3, [sp, #20]
 8002b9a:	4638      	mov	r0, r7
 8002b9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ba0:	3a30      	subs	r2, #48	; 0x30
 8002ba2:	2a09      	cmp	r2, #9
 8002ba4:	d903      	bls.n	8002bae <_svfiprintf_r+0x196>
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0c8      	beq.n	8002b3c <_svfiprintf_r+0x124>
 8002baa:	9105      	str	r1, [sp, #20]
 8002bac:	e7c6      	b.n	8002b3c <_svfiprintf_r+0x124>
 8002bae:	fb05 2101 	mla	r1, r5, r1, r2
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	4607      	mov	r7, r0
 8002bb6:	e7f0      	b.n	8002b9a <_svfiprintf_r+0x182>
 8002bb8:	ab03      	add	r3, sp, #12
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	4622      	mov	r2, r4
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <_svfiprintf_r+0x1ec>)
 8002bc0:	a904      	add	r1, sp, #16
 8002bc2:	4640      	mov	r0, r8
 8002bc4:	f3af 8000 	nop.w
 8002bc8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002bcc:	4681      	mov	r9, r0
 8002bce:	d1d6      	bne.n	8002b7e <_svfiprintf_r+0x166>
 8002bd0:	89a3      	ldrh	r3, [r4, #12]
 8002bd2:	065b      	lsls	r3, r3, #25
 8002bd4:	f53f af35 	bmi.w	8002a42 <_svfiprintf_r+0x2a>
 8002bd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bda:	b01d      	add	sp, #116	; 0x74
 8002bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002be0:	ab03      	add	r3, sp, #12
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	4622      	mov	r2, r4
 8002be6:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <_svfiprintf_r+0x1ec>)
 8002be8:	a904      	add	r1, sp, #16
 8002bea:	4640      	mov	r0, r8
 8002bec:	f000 f882 	bl	8002cf4 <_printf_i>
 8002bf0:	e7ea      	b.n	8002bc8 <_svfiprintf_r+0x1b0>
 8002bf2:	bf00      	nop
 8002bf4:	080031c8 	.word	0x080031c8
 8002bf8:	080031ce 	.word	0x080031ce
 8002bfc:	080031d2 	.word	0x080031d2
 8002c00:	00000000 	.word	0x00000000
 8002c04:	08002965 	.word	0x08002965

08002c08 <_printf_common>:
 8002c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c0c:	4691      	mov	r9, r2
 8002c0e:	461f      	mov	r7, r3
 8002c10:	688a      	ldr	r2, [r1, #8]
 8002c12:	690b      	ldr	r3, [r1, #16]
 8002c14:	4606      	mov	r6, r0
 8002c16:	4293      	cmp	r3, r2
 8002c18:	bfb8      	it	lt
 8002c1a:	4613      	movlt	r3, r2
 8002c1c:	f8c9 3000 	str.w	r3, [r9]
 8002c20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c24:	460c      	mov	r4, r1
 8002c26:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c2a:	b112      	cbz	r2, 8002c32 <_printf_common+0x2a>
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	f8c9 3000 	str.w	r3, [r9]
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	0699      	lsls	r1, r3, #26
 8002c36:	bf42      	ittt	mi
 8002c38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002c3c:	3302      	addmi	r3, #2
 8002c3e:	f8c9 3000 	strmi.w	r3, [r9]
 8002c42:	6825      	ldr	r5, [r4, #0]
 8002c44:	f015 0506 	ands.w	r5, r5, #6
 8002c48:	d107      	bne.n	8002c5a <_printf_common+0x52>
 8002c4a:	f104 0a19 	add.w	sl, r4, #25
 8002c4e:	68e3      	ldr	r3, [r4, #12]
 8002c50:	f8d9 2000 	ldr.w	r2, [r9]
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	42ab      	cmp	r3, r5
 8002c58:	dc29      	bgt.n	8002cae <_printf_common+0xa6>
 8002c5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c5e:	6822      	ldr	r2, [r4, #0]
 8002c60:	3300      	adds	r3, #0
 8002c62:	bf18      	it	ne
 8002c64:	2301      	movne	r3, #1
 8002c66:	0692      	lsls	r2, r2, #26
 8002c68:	d42e      	bmi.n	8002cc8 <_printf_common+0xc0>
 8002c6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c6e:	4639      	mov	r1, r7
 8002c70:	4630      	mov	r0, r6
 8002c72:	47c0      	blx	r8
 8002c74:	3001      	adds	r0, #1
 8002c76:	d021      	beq.n	8002cbc <_printf_common+0xb4>
 8002c78:	6823      	ldr	r3, [r4, #0]
 8002c7a:	68e5      	ldr	r5, [r4, #12]
 8002c7c:	f003 0306 	and.w	r3, r3, #6
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	bf18      	it	ne
 8002c84:	2500      	movne	r5, #0
 8002c86:	f8d9 2000 	ldr.w	r2, [r9]
 8002c8a:	f04f 0900 	mov.w	r9, #0
 8002c8e:	bf08      	it	eq
 8002c90:	1aad      	subeq	r5, r5, r2
 8002c92:	68a3      	ldr	r3, [r4, #8]
 8002c94:	6922      	ldr	r2, [r4, #16]
 8002c96:	bf08      	it	eq
 8002c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	bfc4      	itt	gt
 8002ca0:	1a9b      	subgt	r3, r3, r2
 8002ca2:	18ed      	addgt	r5, r5, r3
 8002ca4:	341a      	adds	r4, #26
 8002ca6:	454d      	cmp	r5, r9
 8002ca8:	d11a      	bne.n	8002ce0 <_printf_common+0xd8>
 8002caa:	2000      	movs	r0, #0
 8002cac:	e008      	b.n	8002cc0 <_printf_common+0xb8>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	4652      	mov	r2, sl
 8002cb2:	4639      	mov	r1, r7
 8002cb4:	4630      	mov	r0, r6
 8002cb6:	47c0      	blx	r8
 8002cb8:	3001      	adds	r0, #1
 8002cba:	d103      	bne.n	8002cc4 <_printf_common+0xbc>
 8002cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc4:	3501      	adds	r5, #1
 8002cc6:	e7c2      	b.n	8002c4e <_printf_common+0x46>
 8002cc8:	2030      	movs	r0, #48	; 0x30
 8002cca:	18e1      	adds	r1, r4, r3
 8002ccc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cd6:	4422      	add	r2, r4
 8002cd8:	3302      	adds	r3, #2
 8002cda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cde:	e7c4      	b.n	8002c6a <_printf_common+0x62>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	4622      	mov	r2, r4
 8002ce4:	4639      	mov	r1, r7
 8002ce6:	4630      	mov	r0, r6
 8002ce8:	47c0      	blx	r8
 8002cea:	3001      	adds	r0, #1
 8002cec:	d0e6      	beq.n	8002cbc <_printf_common+0xb4>
 8002cee:	f109 0901 	add.w	r9, r9, #1
 8002cf2:	e7d8      	b.n	8002ca6 <_printf_common+0x9e>

08002cf4 <_printf_i>:
 8002cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cf8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	7e09      	ldrb	r1, [r1, #24]
 8002d00:	b085      	sub	sp, #20
 8002d02:	296e      	cmp	r1, #110	; 0x6e
 8002d04:	4617      	mov	r7, r2
 8002d06:	4606      	mov	r6, r0
 8002d08:	4698      	mov	r8, r3
 8002d0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d0c:	f000 80b3 	beq.w	8002e76 <_printf_i+0x182>
 8002d10:	d822      	bhi.n	8002d58 <_printf_i+0x64>
 8002d12:	2963      	cmp	r1, #99	; 0x63
 8002d14:	d036      	beq.n	8002d84 <_printf_i+0x90>
 8002d16:	d80a      	bhi.n	8002d2e <_printf_i+0x3a>
 8002d18:	2900      	cmp	r1, #0
 8002d1a:	f000 80b9 	beq.w	8002e90 <_printf_i+0x19c>
 8002d1e:	2958      	cmp	r1, #88	; 0x58
 8002d20:	f000 8083 	beq.w	8002e2a <_printf_i+0x136>
 8002d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002d2c:	e032      	b.n	8002d94 <_printf_i+0xa0>
 8002d2e:	2964      	cmp	r1, #100	; 0x64
 8002d30:	d001      	beq.n	8002d36 <_printf_i+0x42>
 8002d32:	2969      	cmp	r1, #105	; 0x69
 8002d34:	d1f6      	bne.n	8002d24 <_printf_i+0x30>
 8002d36:	6820      	ldr	r0, [r4, #0]
 8002d38:	6813      	ldr	r3, [r2, #0]
 8002d3a:	0605      	lsls	r5, r0, #24
 8002d3c:	f103 0104 	add.w	r1, r3, #4
 8002d40:	d52a      	bpl.n	8002d98 <_printf_i+0xa4>
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6011      	str	r1, [r2, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	da03      	bge.n	8002d52 <_printf_i+0x5e>
 8002d4a:	222d      	movs	r2, #45	; 0x2d
 8002d4c:	425b      	negs	r3, r3
 8002d4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002d52:	486f      	ldr	r0, [pc, #444]	; (8002f10 <_printf_i+0x21c>)
 8002d54:	220a      	movs	r2, #10
 8002d56:	e039      	b.n	8002dcc <_printf_i+0xd8>
 8002d58:	2973      	cmp	r1, #115	; 0x73
 8002d5a:	f000 809d 	beq.w	8002e98 <_printf_i+0x1a4>
 8002d5e:	d808      	bhi.n	8002d72 <_printf_i+0x7e>
 8002d60:	296f      	cmp	r1, #111	; 0x6f
 8002d62:	d020      	beq.n	8002da6 <_printf_i+0xb2>
 8002d64:	2970      	cmp	r1, #112	; 0x70
 8002d66:	d1dd      	bne.n	8002d24 <_printf_i+0x30>
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	f043 0320 	orr.w	r3, r3, #32
 8002d6e:	6023      	str	r3, [r4, #0]
 8002d70:	e003      	b.n	8002d7a <_printf_i+0x86>
 8002d72:	2975      	cmp	r1, #117	; 0x75
 8002d74:	d017      	beq.n	8002da6 <_printf_i+0xb2>
 8002d76:	2978      	cmp	r1, #120	; 0x78
 8002d78:	d1d4      	bne.n	8002d24 <_printf_i+0x30>
 8002d7a:	2378      	movs	r3, #120	; 0x78
 8002d7c:	4865      	ldr	r0, [pc, #404]	; (8002f14 <_printf_i+0x220>)
 8002d7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d82:	e055      	b.n	8002e30 <_printf_i+0x13c>
 8002d84:	6813      	ldr	r3, [r2, #0]
 8002d86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d8a:	1d19      	adds	r1, r3, #4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6011      	str	r1, [r2, #0]
 8002d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d94:	2301      	movs	r3, #1
 8002d96:	e08c      	b.n	8002eb2 <_printf_i+0x1be>
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d9e:	6011      	str	r1, [r2, #0]
 8002da0:	bf18      	it	ne
 8002da2:	b21b      	sxthne	r3, r3
 8002da4:	e7cf      	b.n	8002d46 <_printf_i+0x52>
 8002da6:	6813      	ldr	r3, [r2, #0]
 8002da8:	6825      	ldr	r5, [r4, #0]
 8002daa:	1d18      	adds	r0, r3, #4
 8002dac:	6010      	str	r0, [r2, #0]
 8002dae:	0628      	lsls	r0, r5, #24
 8002db0:	d501      	bpl.n	8002db6 <_printf_i+0xc2>
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	e002      	b.n	8002dbc <_printf_i+0xc8>
 8002db6:	0668      	lsls	r0, r5, #25
 8002db8:	d5fb      	bpl.n	8002db2 <_printf_i+0xbe>
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	296f      	cmp	r1, #111	; 0x6f
 8002dbe:	bf14      	ite	ne
 8002dc0:	220a      	movne	r2, #10
 8002dc2:	2208      	moveq	r2, #8
 8002dc4:	4852      	ldr	r0, [pc, #328]	; (8002f10 <_printf_i+0x21c>)
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002dcc:	6865      	ldr	r5, [r4, #4]
 8002dce:	2d00      	cmp	r5, #0
 8002dd0:	60a5      	str	r5, [r4, #8]
 8002dd2:	f2c0 8095 	blt.w	8002f00 <_printf_i+0x20c>
 8002dd6:	6821      	ldr	r1, [r4, #0]
 8002dd8:	f021 0104 	bic.w	r1, r1, #4
 8002ddc:	6021      	str	r1, [r4, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d13d      	bne.n	8002e5e <_printf_i+0x16a>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	f040 808e 	bne.w	8002f04 <_printf_i+0x210>
 8002de8:	4665      	mov	r5, ip
 8002dea:	2a08      	cmp	r2, #8
 8002dec:	d10b      	bne.n	8002e06 <_printf_i+0x112>
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	07db      	lsls	r3, r3, #31
 8002df2:	d508      	bpl.n	8002e06 <_printf_i+0x112>
 8002df4:	6923      	ldr	r3, [r4, #16]
 8002df6:	6862      	ldr	r2, [r4, #4]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	bfde      	ittt	le
 8002dfc:	2330      	movle	r3, #48	; 0x30
 8002dfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e06:	ebac 0305 	sub.w	r3, ip, r5
 8002e0a:	6123      	str	r3, [r4, #16]
 8002e0c:	f8cd 8000 	str.w	r8, [sp]
 8002e10:	463b      	mov	r3, r7
 8002e12:	aa03      	add	r2, sp, #12
 8002e14:	4621      	mov	r1, r4
 8002e16:	4630      	mov	r0, r6
 8002e18:	f7ff fef6 	bl	8002c08 <_printf_common>
 8002e1c:	3001      	adds	r0, #1
 8002e1e:	d14d      	bne.n	8002ebc <_printf_i+0x1c8>
 8002e20:	f04f 30ff 	mov.w	r0, #4294967295
 8002e24:	b005      	add	sp, #20
 8002e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e2a:	4839      	ldr	r0, [pc, #228]	; (8002f10 <_printf_i+0x21c>)
 8002e2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002e30:	6813      	ldr	r3, [r2, #0]
 8002e32:	6821      	ldr	r1, [r4, #0]
 8002e34:	1d1d      	adds	r5, r3, #4
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6015      	str	r5, [r2, #0]
 8002e3a:	060a      	lsls	r2, r1, #24
 8002e3c:	d50b      	bpl.n	8002e56 <_printf_i+0x162>
 8002e3e:	07ca      	lsls	r2, r1, #31
 8002e40:	bf44      	itt	mi
 8002e42:	f041 0120 	orrmi.w	r1, r1, #32
 8002e46:	6021      	strmi	r1, [r4, #0]
 8002e48:	b91b      	cbnz	r3, 8002e52 <_printf_i+0x15e>
 8002e4a:	6822      	ldr	r2, [r4, #0]
 8002e4c:	f022 0220 	bic.w	r2, r2, #32
 8002e50:	6022      	str	r2, [r4, #0]
 8002e52:	2210      	movs	r2, #16
 8002e54:	e7b7      	b.n	8002dc6 <_printf_i+0xd2>
 8002e56:	064d      	lsls	r5, r1, #25
 8002e58:	bf48      	it	mi
 8002e5a:	b29b      	uxthmi	r3, r3
 8002e5c:	e7ef      	b.n	8002e3e <_printf_i+0x14a>
 8002e5e:	4665      	mov	r5, ip
 8002e60:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e64:	fb02 3311 	mls	r3, r2, r1, r3
 8002e68:	5cc3      	ldrb	r3, [r0, r3]
 8002e6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002e6e:	460b      	mov	r3, r1
 8002e70:	2900      	cmp	r1, #0
 8002e72:	d1f5      	bne.n	8002e60 <_printf_i+0x16c>
 8002e74:	e7b9      	b.n	8002dea <_printf_i+0xf6>
 8002e76:	6813      	ldr	r3, [r2, #0]
 8002e78:	6825      	ldr	r5, [r4, #0]
 8002e7a:	1d18      	adds	r0, r3, #4
 8002e7c:	6961      	ldr	r1, [r4, #20]
 8002e7e:	6010      	str	r0, [r2, #0]
 8002e80:	0628      	lsls	r0, r5, #24
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	d501      	bpl.n	8002e8a <_printf_i+0x196>
 8002e86:	6019      	str	r1, [r3, #0]
 8002e88:	e002      	b.n	8002e90 <_printf_i+0x19c>
 8002e8a:	066a      	lsls	r2, r5, #25
 8002e8c:	d5fb      	bpl.n	8002e86 <_printf_i+0x192>
 8002e8e:	8019      	strh	r1, [r3, #0]
 8002e90:	2300      	movs	r3, #0
 8002e92:	4665      	mov	r5, ip
 8002e94:	6123      	str	r3, [r4, #16]
 8002e96:	e7b9      	b.n	8002e0c <_printf_i+0x118>
 8002e98:	6813      	ldr	r3, [r2, #0]
 8002e9a:	1d19      	adds	r1, r3, #4
 8002e9c:	6011      	str	r1, [r2, #0]
 8002e9e:	681d      	ldr	r5, [r3, #0]
 8002ea0:	6862      	ldr	r2, [r4, #4]
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	4628      	mov	r0, r5
 8002ea6:	f000 f837 	bl	8002f18 <memchr>
 8002eaa:	b108      	cbz	r0, 8002eb0 <_printf_i+0x1bc>
 8002eac:	1b40      	subs	r0, r0, r5
 8002eae:	6060      	str	r0, [r4, #4]
 8002eb0:	6863      	ldr	r3, [r4, #4]
 8002eb2:	6123      	str	r3, [r4, #16]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eba:	e7a7      	b.n	8002e0c <_printf_i+0x118>
 8002ebc:	6923      	ldr	r3, [r4, #16]
 8002ebe:	462a      	mov	r2, r5
 8002ec0:	4639      	mov	r1, r7
 8002ec2:	4630      	mov	r0, r6
 8002ec4:	47c0      	blx	r8
 8002ec6:	3001      	adds	r0, #1
 8002ec8:	d0aa      	beq.n	8002e20 <_printf_i+0x12c>
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	079b      	lsls	r3, r3, #30
 8002ece:	d413      	bmi.n	8002ef8 <_printf_i+0x204>
 8002ed0:	68e0      	ldr	r0, [r4, #12]
 8002ed2:	9b03      	ldr	r3, [sp, #12]
 8002ed4:	4298      	cmp	r0, r3
 8002ed6:	bfb8      	it	lt
 8002ed8:	4618      	movlt	r0, r3
 8002eda:	e7a3      	b.n	8002e24 <_printf_i+0x130>
 8002edc:	2301      	movs	r3, #1
 8002ede:	464a      	mov	r2, r9
 8002ee0:	4639      	mov	r1, r7
 8002ee2:	4630      	mov	r0, r6
 8002ee4:	47c0      	blx	r8
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	d09a      	beq.n	8002e20 <_printf_i+0x12c>
 8002eea:	3501      	adds	r5, #1
 8002eec:	68e3      	ldr	r3, [r4, #12]
 8002eee:	9a03      	ldr	r2, [sp, #12]
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	42ab      	cmp	r3, r5
 8002ef4:	dcf2      	bgt.n	8002edc <_printf_i+0x1e8>
 8002ef6:	e7eb      	b.n	8002ed0 <_printf_i+0x1dc>
 8002ef8:	2500      	movs	r5, #0
 8002efa:	f104 0919 	add.w	r9, r4, #25
 8002efe:	e7f5      	b.n	8002eec <_printf_i+0x1f8>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ac      	bne.n	8002e5e <_printf_i+0x16a>
 8002f04:	7803      	ldrb	r3, [r0, #0]
 8002f06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f0e:	e76c      	b.n	8002dea <_printf_i+0xf6>
 8002f10:	080031d9 	.word	0x080031d9
 8002f14:	080031ea 	.word	0x080031ea

08002f18 <memchr>:
 8002f18:	b510      	push	{r4, lr}
 8002f1a:	b2c9      	uxtb	r1, r1
 8002f1c:	4402      	add	r2, r0
 8002f1e:	4290      	cmp	r0, r2
 8002f20:	4603      	mov	r3, r0
 8002f22:	d101      	bne.n	8002f28 <memchr+0x10>
 8002f24:	2300      	movs	r3, #0
 8002f26:	e003      	b.n	8002f30 <memchr+0x18>
 8002f28:	781c      	ldrb	r4, [r3, #0]
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	428c      	cmp	r4, r1
 8002f2e:	d1f6      	bne.n	8002f1e <memchr+0x6>
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd10      	pop	{r4, pc}

08002f34 <memcpy>:
 8002f34:	b510      	push	{r4, lr}
 8002f36:	1e43      	subs	r3, r0, #1
 8002f38:	440a      	add	r2, r1
 8002f3a:	4291      	cmp	r1, r2
 8002f3c:	d100      	bne.n	8002f40 <memcpy+0xc>
 8002f3e:	bd10      	pop	{r4, pc}
 8002f40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f48:	e7f7      	b.n	8002f3a <memcpy+0x6>

08002f4a <memmove>:
 8002f4a:	4288      	cmp	r0, r1
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	eb01 0302 	add.w	r3, r1, r2
 8002f52:	d807      	bhi.n	8002f64 <memmove+0x1a>
 8002f54:	1e42      	subs	r2, r0, #1
 8002f56:	4299      	cmp	r1, r3
 8002f58:	d00a      	beq.n	8002f70 <memmove+0x26>
 8002f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f5e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002f62:	e7f8      	b.n	8002f56 <memmove+0xc>
 8002f64:	4283      	cmp	r3, r0
 8002f66:	d9f5      	bls.n	8002f54 <memmove+0xa>
 8002f68:	1881      	adds	r1, r0, r2
 8002f6a:	1ad2      	subs	r2, r2, r3
 8002f6c:	42d3      	cmn	r3, r2
 8002f6e:	d100      	bne.n	8002f72 <memmove+0x28>
 8002f70:	bd10      	pop	{r4, pc}
 8002f72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f76:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002f7a:	e7f7      	b.n	8002f6c <memmove+0x22>

08002f7c <_free_r>:
 8002f7c:	b538      	push	{r3, r4, r5, lr}
 8002f7e:	4605      	mov	r5, r0
 8002f80:	2900      	cmp	r1, #0
 8002f82:	d043      	beq.n	800300c <_free_r+0x90>
 8002f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f88:	1f0c      	subs	r4, r1, #4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	bfb8      	it	lt
 8002f8e:	18e4      	addlt	r4, r4, r3
 8002f90:	f000 f8d0 	bl	8003134 <__malloc_lock>
 8002f94:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <_free_r+0x94>)
 8002f96:	6813      	ldr	r3, [r2, #0]
 8002f98:	4610      	mov	r0, r2
 8002f9a:	b933      	cbnz	r3, 8002faa <_free_r+0x2e>
 8002f9c:	6063      	str	r3, [r4, #4]
 8002f9e:	6014      	str	r4, [r2, #0]
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fa6:	f000 b8c6 	b.w	8003136 <__malloc_unlock>
 8002faa:	42a3      	cmp	r3, r4
 8002fac:	d90b      	bls.n	8002fc6 <_free_r+0x4a>
 8002fae:	6821      	ldr	r1, [r4, #0]
 8002fb0:	1862      	adds	r2, r4, r1
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	bf01      	itttt	eq
 8002fb6:	681a      	ldreq	r2, [r3, #0]
 8002fb8:	685b      	ldreq	r3, [r3, #4]
 8002fba:	1852      	addeq	r2, r2, r1
 8002fbc:	6022      	streq	r2, [r4, #0]
 8002fbe:	6063      	str	r3, [r4, #4]
 8002fc0:	6004      	str	r4, [r0, #0]
 8002fc2:	e7ed      	b.n	8002fa0 <_free_r+0x24>
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	b10a      	cbz	r2, 8002fce <_free_r+0x52>
 8002fca:	42a2      	cmp	r2, r4
 8002fcc:	d9fa      	bls.n	8002fc4 <_free_r+0x48>
 8002fce:	6819      	ldr	r1, [r3, #0]
 8002fd0:	1858      	adds	r0, r3, r1
 8002fd2:	42a0      	cmp	r0, r4
 8002fd4:	d10b      	bne.n	8002fee <_free_r+0x72>
 8002fd6:	6820      	ldr	r0, [r4, #0]
 8002fd8:	4401      	add	r1, r0
 8002fda:	1858      	adds	r0, r3, r1
 8002fdc:	4282      	cmp	r2, r0
 8002fde:	6019      	str	r1, [r3, #0]
 8002fe0:	d1de      	bne.n	8002fa0 <_free_r+0x24>
 8002fe2:	6810      	ldr	r0, [r2, #0]
 8002fe4:	6852      	ldr	r2, [r2, #4]
 8002fe6:	4401      	add	r1, r0
 8002fe8:	6019      	str	r1, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]
 8002fec:	e7d8      	b.n	8002fa0 <_free_r+0x24>
 8002fee:	d902      	bls.n	8002ff6 <_free_r+0x7a>
 8002ff0:	230c      	movs	r3, #12
 8002ff2:	602b      	str	r3, [r5, #0]
 8002ff4:	e7d4      	b.n	8002fa0 <_free_r+0x24>
 8002ff6:	6820      	ldr	r0, [r4, #0]
 8002ff8:	1821      	adds	r1, r4, r0
 8002ffa:	428a      	cmp	r2, r1
 8002ffc:	bf01      	itttt	eq
 8002ffe:	6811      	ldreq	r1, [r2, #0]
 8003000:	6852      	ldreq	r2, [r2, #4]
 8003002:	1809      	addeq	r1, r1, r0
 8003004:	6021      	streq	r1, [r4, #0]
 8003006:	6062      	str	r2, [r4, #4]
 8003008:	605c      	str	r4, [r3, #4]
 800300a:	e7c9      	b.n	8002fa0 <_free_r+0x24>
 800300c:	bd38      	pop	{r3, r4, r5, pc}
 800300e:	bf00      	nop
 8003010:	20000090 	.word	0x20000090

08003014 <_malloc_r>:
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	1ccd      	adds	r5, r1, #3
 8003018:	f025 0503 	bic.w	r5, r5, #3
 800301c:	3508      	adds	r5, #8
 800301e:	2d0c      	cmp	r5, #12
 8003020:	bf38      	it	cc
 8003022:	250c      	movcc	r5, #12
 8003024:	2d00      	cmp	r5, #0
 8003026:	4606      	mov	r6, r0
 8003028:	db01      	blt.n	800302e <_malloc_r+0x1a>
 800302a:	42a9      	cmp	r1, r5
 800302c:	d903      	bls.n	8003036 <_malloc_r+0x22>
 800302e:	230c      	movs	r3, #12
 8003030:	6033      	str	r3, [r6, #0]
 8003032:	2000      	movs	r0, #0
 8003034:	bd70      	pop	{r4, r5, r6, pc}
 8003036:	f000 f87d 	bl	8003134 <__malloc_lock>
 800303a:	4a21      	ldr	r2, [pc, #132]	; (80030c0 <_malloc_r+0xac>)
 800303c:	6814      	ldr	r4, [r2, #0]
 800303e:	4621      	mov	r1, r4
 8003040:	b991      	cbnz	r1, 8003068 <_malloc_r+0x54>
 8003042:	4c20      	ldr	r4, [pc, #128]	; (80030c4 <_malloc_r+0xb0>)
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	b91b      	cbnz	r3, 8003050 <_malloc_r+0x3c>
 8003048:	4630      	mov	r0, r6
 800304a:	f000 f863 	bl	8003114 <_sbrk_r>
 800304e:	6020      	str	r0, [r4, #0]
 8003050:	4629      	mov	r1, r5
 8003052:	4630      	mov	r0, r6
 8003054:	f000 f85e 	bl	8003114 <_sbrk_r>
 8003058:	1c43      	adds	r3, r0, #1
 800305a:	d124      	bne.n	80030a6 <_malloc_r+0x92>
 800305c:	230c      	movs	r3, #12
 800305e:	4630      	mov	r0, r6
 8003060:	6033      	str	r3, [r6, #0]
 8003062:	f000 f868 	bl	8003136 <__malloc_unlock>
 8003066:	e7e4      	b.n	8003032 <_malloc_r+0x1e>
 8003068:	680b      	ldr	r3, [r1, #0]
 800306a:	1b5b      	subs	r3, r3, r5
 800306c:	d418      	bmi.n	80030a0 <_malloc_r+0x8c>
 800306e:	2b0b      	cmp	r3, #11
 8003070:	d90f      	bls.n	8003092 <_malloc_r+0x7e>
 8003072:	600b      	str	r3, [r1, #0]
 8003074:	18cc      	adds	r4, r1, r3
 8003076:	50cd      	str	r5, [r1, r3]
 8003078:	4630      	mov	r0, r6
 800307a:	f000 f85c 	bl	8003136 <__malloc_unlock>
 800307e:	f104 000b 	add.w	r0, r4, #11
 8003082:	1d23      	adds	r3, r4, #4
 8003084:	f020 0007 	bic.w	r0, r0, #7
 8003088:	1ac3      	subs	r3, r0, r3
 800308a:	d0d3      	beq.n	8003034 <_malloc_r+0x20>
 800308c:	425a      	negs	r2, r3
 800308e:	50e2      	str	r2, [r4, r3]
 8003090:	e7d0      	b.n	8003034 <_malloc_r+0x20>
 8003092:	684b      	ldr	r3, [r1, #4]
 8003094:	428c      	cmp	r4, r1
 8003096:	bf16      	itet	ne
 8003098:	6063      	strne	r3, [r4, #4]
 800309a:	6013      	streq	r3, [r2, #0]
 800309c:	460c      	movne	r4, r1
 800309e:	e7eb      	b.n	8003078 <_malloc_r+0x64>
 80030a0:	460c      	mov	r4, r1
 80030a2:	6849      	ldr	r1, [r1, #4]
 80030a4:	e7cc      	b.n	8003040 <_malloc_r+0x2c>
 80030a6:	1cc4      	adds	r4, r0, #3
 80030a8:	f024 0403 	bic.w	r4, r4, #3
 80030ac:	42a0      	cmp	r0, r4
 80030ae:	d005      	beq.n	80030bc <_malloc_r+0xa8>
 80030b0:	1a21      	subs	r1, r4, r0
 80030b2:	4630      	mov	r0, r6
 80030b4:	f000 f82e 	bl	8003114 <_sbrk_r>
 80030b8:	3001      	adds	r0, #1
 80030ba:	d0cf      	beq.n	800305c <_malloc_r+0x48>
 80030bc:	6025      	str	r5, [r4, #0]
 80030be:	e7db      	b.n	8003078 <_malloc_r+0x64>
 80030c0:	20000090 	.word	0x20000090
 80030c4:	20000094 	.word	0x20000094

080030c8 <_realloc_r>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	4607      	mov	r7, r0
 80030cc:	4614      	mov	r4, r2
 80030ce:	460e      	mov	r6, r1
 80030d0:	b921      	cbnz	r1, 80030dc <_realloc_r+0x14>
 80030d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80030d6:	4611      	mov	r1, r2
 80030d8:	f7ff bf9c 	b.w	8003014 <_malloc_r>
 80030dc:	b922      	cbnz	r2, 80030e8 <_realloc_r+0x20>
 80030de:	f7ff ff4d 	bl	8002f7c <_free_r>
 80030e2:	4625      	mov	r5, r4
 80030e4:	4628      	mov	r0, r5
 80030e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030e8:	f000 f826 	bl	8003138 <_malloc_usable_size_r>
 80030ec:	42a0      	cmp	r0, r4
 80030ee:	d20f      	bcs.n	8003110 <_realloc_r+0x48>
 80030f0:	4621      	mov	r1, r4
 80030f2:	4638      	mov	r0, r7
 80030f4:	f7ff ff8e 	bl	8003014 <_malloc_r>
 80030f8:	4605      	mov	r5, r0
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d0f2      	beq.n	80030e4 <_realloc_r+0x1c>
 80030fe:	4631      	mov	r1, r6
 8003100:	4622      	mov	r2, r4
 8003102:	f7ff ff17 	bl	8002f34 <memcpy>
 8003106:	4631      	mov	r1, r6
 8003108:	4638      	mov	r0, r7
 800310a:	f7ff ff37 	bl	8002f7c <_free_r>
 800310e:	e7e9      	b.n	80030e4 <_realloc_r+0x1c>
 8003110:	4635      	mov	r5, r6
 8003112:	e7e7      	b.n	80030e4 <_realloc_r+0x1c>

08003114 <_sbrk_r>:
 8003114:	b538      	push	{r3, r4, r5, lr}
 8003116:	2300      	movs	r3, #0
 8003118:	4c05      	ldr	r4, [pc, #20]	; (8003130 <_sbrk_r+0x1c>)
 800311a:	4605      	mov	r5, r0
 800311c:	4608      	mov	r0, r1
 800311e:	6023      	str	r3, [r4, #0]
 8003120:	f7fd fad4 	bl	80006cc <_sbrk>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	d102      	bne.n	800312e <_sbrk_r+0x1a>
 8003128:	6823      	ldr	r3, [r4, #0]
 800312a:	b103      	cbz	r3, 800312e <_sbrk_r+0x1a>
 800312c:	602b      	str	r3, [r5, #0]
 800312e:	bd38      	pop	{r3, r4, r5, pc}
 8003130:	200000f0 	.word	0x200000f0

08003134 <__malloc_lock>:
 8003134:	4770      	bx	lr

08003136 <__malloc_unlock>:
 8003136:	4770      	bx	lr

08003138 <_malloc_usable_size_r>:
 8003138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800313c:	1f18      	subs	r0, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	bfbc      	itt	lt
 8003142:	580b      	ldrlt	r3, [r1, r0]
 8003144:	18c0      	addlt	r0, r0, r3
 8003146:	4770      	bx	lr

08003148 <_init>:
 8003148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314a:	bf00      	nop
 800314c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314e:	bc08      	pop	{r3}
 8003150:	469e      	mov	lr, r3
 8003152:	4770      	bx	lr

08003154 <_fini>:
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003156:	bf00      	nop
 8003158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315a:	bc08      	pop	{r3}
 800315c:	469e      	mov	lr, r3
 800315e:	4770      	bx	lr
