
3.4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000151c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800162c  0800162c  0001162c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800165c  0800165c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800165c  0800165c  0001165c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001664  08001664  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001664  08001664  00011664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001668  08001668  00011668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800166c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001678  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001678  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007055  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000139b  00000000  00000000  0002708a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003e0  00000000  00000000  00028428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000358  00000000  00000000  00028808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000145c3  00000000  00000000  00028b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000049e4  00000000  00000000  0003d123  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006a9a8  00000000  00000000  00041b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ac4af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e08  00000000  00000000  000ac52c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08001614 	.word	0x08001614

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08001614 	.word	0x08001614

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b974 	b.w	8000450 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	468c      	mov	ip, r1
 8000186:	4604      	mov	r4, r0
 8000188:	9e08      	ldr	r6, [sp, #32]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d14b      	bne.n	8000226 <__udivmoddi4+0xa6>
 800018e:	428a      	cmp	r2, r1
 8000190:	4615      	mov	r5, r2
 8000192:	d967      	bls.n	8000264 <__udivmoddi4+0xe4>
 8000194:	fab2 f282 	clz	r2, r2
 8000198:	b14a      	cbz	r2, 80001ae <__udivmoddi4+0x2e>
 800019a:	f1c2 0720 	rsb	r7, r2, #32
 800019e:	fa01 f302 	lsl.w	r3, r1, r2
 80001a2:	fa20 f707 	lsr.w	r7, r0, r7
 80001a6:	4095      	lsls	r5, r2
 80001a8:	ea47 0c03 	orr.w	ip, r7, r3
 80001ac:	4094      	lsls	r4, r2
 80001ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001b2:	fbbc f7fe 	udiv	r7, ip, lr
 80001b6:	fa1f f885 	uxth.w	r8, r5
 80001ba:	fb0e c317 	mls	r3, lr, r7, ip
 80001be:	fb07 f908 	mul.w	r9, r7, r8
 80001c2:	0c21      	lsrs	r1, r4, #16
 80001c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001c8:	4599      	cmp	r9, r3
 80001ca:	d909      	bls.n	80001e0 <__udivmoddi4+0x60>
 80001cc:	18eb      	adds	r3, r5, r3
 80001ce:	f107 31ff 	add.w	r1, r7, #4294967295
 80001d2:	f080 811c 	bcs.w	800040e <__udivmoddi4+0x28e>
 80001d6:	4599      	cmp	r9, r3
 80001d8:	f240 8119 	bls.w	800040e <__udivmoddi4+0x28e>
 80001dc:	3f02      	subs	r7, #2
 80001de:	442b      	add	r3, r5
 80001e0:	eba3 0309 	sub.w	r3, r3, r9
 80001e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80001e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80001ec:	fb00 f108 	mul.w	r1, r0, r8
 80001f0:	b2a4      	uxth	r4, r4
 80001f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80001f6:	42a1      	cmp	r1, r4
 80001f8:	d909      	bls.n	800020e <__udivmoddi4+0x8e>
 80001fa:	192c      	adds	r4, r5, r4
 80001fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000200:	f080 8107 	bcs.w	8000412 <__udivmoddi4+0x292>
 8000204:	42a1      	cmp	r1, r4
 8000206:	f240 8104 	bls.w	8000412 <__udivmoddi4+0x292>
 800020a:	3802      	subs	r0, #2
 800020c:	442c      	add	r4, r5
 800020e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000212:	2700      	movs	r7, #0
 8000214:	1a64      	subs	r4, r4, r1
 8000216:	b11e      	cbz	r6, 8000220 <__udivmoddi4+0xa0>
 8000218:	2300      	movs	r3, #0
 800021a:	40d4      	lsrs	r4, r2
 800021c:	e9c6 4300 	strd	r4, r3, [r6]
 8000220:	4639      	mov	r1, r7
 8000222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000226:	428b      	cmp	r3, r1
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0xbe>
 800022a:	2e00      	cmp	r6, #0
 800022c:	f000 80ec 	beq.w	8000408 <__udivmoddi4+0x288>
 8000230:	2700      	movs	r7, #0
 8000232:	e9c6 0100 	strd	r0, r1, [r6]
 8000236:	4638      	mov	r0, r7
 8000238:	4639      	mov	r1, r7
 800023a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800023e:	fab3 f783 	clz	r7, r3
 8000242:	2f00      	cmp	r7, #0
 8000244:	d148      	bne.n	80002d8 <__udivmoddi4+0x158>
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__udivmoddi4+0xd0>
 800024a:	4282      	cmp	r2, r0
 800024c:	f200 80fb 	bhi.w	8000446 <__udivmoddi4+0x2c6>
 8000250:	1a84      	subs	r4, r0, r2
 8000252:	eb61 0303 	sbc.w	r3, r1, r3
 8000256:	2001      	movs	r0, #1
 8000258:	469c      	mov	ip, r3
 800025a:	2e00      	cmp	r6, #0
 800025c:	d0e0      	beq.n	8000220 <__udivmoddi4+0xa0>
 800025e:	e9c6 4c00 	strd	r4, ip, [r6]
 8000262:	e7dd      	b.n	8000220 <__udivmoddi4+0xa0>
 8000264:	b902      	cbnz	r2, 8000268 <__udivmoddi4+0xe8>
 8000266:	deff      	udf	#255	; 0xff
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	2a00      	cmp	r2, #0
 800026e:	f040 808f 	bne.w	8000390 <__udivmoddi4+0x210>
 8000272:	2701      	movs	r7, #1
 8000274:	1b49      	subs	r1, r1, r5
 8000276:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800027a:	fa1f f985 	uxth.w	r9, r5
 800027e:	fbb1 fef8 	udiv	lr, r1, r8
 8000282:	fb08 111e 	mls	r1, r8, lr, r1
 8000286:	fb09 f00e 	mul.w	r0, r9, lr
 800028a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800028e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000292:	4298      	cmp	r0, r3
 8000294:	d907      	bls.n	80002a6 <__udivmoddi4+0x126>
 8000296:	18eb      	adds	r3, r5, r3
 8000298:	f10e 31ff 	add.w	r1, lr, #4294967295
 800029c:	d202      	bcs.n	80002a4 <__udivmoddi4+0x124>
 800029e:	4298      	cmp	r0, r3
 80002a0:	f200 80cd 	bhi.w	800043e <__udivmoddi4+0x2be>
 80002a4:	468e      	mov	lr, r1
 80002a6:	1a1b      	subs	r3, r3, r0
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	fb09 f900 	mul.w	r9, r9, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ba:	45a1      	cmp	r9, r4
 80002bc:	d907      	bls.n	80002ce <__udivmoddi4+0x14e>
 80002be:	192c      	adds	r4, r5, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	d202      	bcs.n	80002cc <__udivmoddi4+0x14c>
 80002c6:	45a1      	cmp	r9, r4
 80002c8:	f200 80b6 	bhi.w	8000438 <__udivmoddi4+0x2b8>
 80002cc:	4618      	mov	r0, r3
 80002ce:	eba4 0409 	sub.w	r4, r4, r9
 80002d2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002d6:	e79e      	b.n	8000216 <__udivmoddi4+0x96>
 80002d8:	f1c7 0520 	rsb	r5, r7, #32
 80002dc:	40bb      	lsls	r3, r7
 80002de:	fa22 fc05 	lsr.w	ip, r2, r5
 80002e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80002e6:	fa21 f405 	lsr.w	r4, r1, r5
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fbb4 f9fe 	udiv	r9, r4, lr
 80002f2:	fa1f f88c 	uxth.w	r8, ip
 80002f6:	fb0e 4419 	mls	r4, lr, r9, r4
 80002fa:	fa20 f305 	lsr.w	r3, r0, r5
 80002fe:	40b9      	lsls	r1, r7
 8000300:	fb09 fa08 	mul.w	sl, r9, r8
 8000304:	4319      	orrs	r1, r3
 8000306:	0c0b      	lsrs	r3, r1, #16
 8000308:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800030c:	45a2      	cmp	sl, r4
 800030e:	fa02 f207 	lsl.w	r2, r2, r7
 8000312:	fa00 f307 	lsl.w	r3, r0, r7
 8000316:	d90b      	bls.n	8000330 <__udivmoddi4+0x1b0>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000320:	f080 8088 	bcs.w	8000434 <__udivmoddi4+0x2b4>
 8000324:	45a2      	cmp	sl, r4
 8000326:	f240 8085 	bls.w	8000434 <__udivmoddi4+0x2b4>
 800032a:	f1a9 0902 	sub.w	r9, r9, #2
 800032e:	4464      	add	r4, ip
 8000330:	eba4 040a 	sub.w	r4, r4, sl
 8000334:	fbb4 f0fe 	udiv	r0, r4, lr
 8000338:	fb0e 4410 	mls	r4, lr, r0, r4
 800033c:	fb00 fa08 	mul.w	sl, r0, r8
 8000340:	b289      	uxth	r1, r1
 8000342:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000346:	45a2      	cmp	sl, r4
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x1dc>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000352:	d26b      	bcs.n	800042c <__udivmoddi4+0x2ac>
 8000354:	45a2      	cmp	sl, r4
 8000356:	d969      	bls.n	800042c <__udivmoddi4+0x2ac>
 8000358:	3802      	subs	r0, #2
 800035a:	4464      	add	r4, ip
 800035c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000360:	fba0 8902 	umull	r8, r9, r0, r2
 8000364:	eba4 040a 	sub.w	r4, r4, sl
 8000368:	454c      	cmp	r4, r9
 800036a:	4641      	mov	r1, r8
 800036c:	46ce      	mov	lr, r9
 800036e:	d354      	bcc.n	800041a <__udivmoddi4+0x29a>
 8000370:	d051      	beq.n	8000416 <__udivmoddi4+0x296>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d069      	beq.n	800044a <__udivmoddi4+0x2ca>
 8000376:	1a5a      	subs	r2, r3, r1
 8000378:	eb64 040e 	sbc.w	r4, r4, lr
 800037c:	fa04 f505 	lsl.w	r5, r4, r5
 8000380:	fa22 f307 	lsr.w	r3, r2, r7
 8000384:	40fc      	lsrs	r4, r7
 8000386:	431d      	orrs	r5, r3
 8000388:	e9c6 5400 	strd	r5, r4, [r6]
 800038c:	2700      	movs	r7, #0
 800038e:	e747      	b.n	8000220 <__udivmoddi4+0xa0>
 8000390:	4095      	lsls	r5, r2
 8000392:	f1c2 0320 	rsb	r3, r2, #32
 8000396:	fa21 f003 	lsr.w	r0, r1, r3
 800039a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800039e:	fbb0 f7f8 	udiv	r7, r0, r8
 80003a2:	fa1f f985 	uxth.w	r9, r5
 80003a6:	fb08 0017 	mls	r0, r8, r7, r0
 80003aa:	fa24 f303 	lsr.w	r3, r4, r3
 80003ae:	4091      	lsls	r1, r2
 80003b0:	fb07 fc09 	mul.w	ip, r7, r9
 80003b4:	430b      	orrs	r3, r1
 80003b6:	0c19      	lsrs	r1, r3, #16
 80003b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003bc:	458c      	cmp	ip, r1
 80003be:	fa04 f402 	lsl.w	r4, r4, r2
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x254>
 80003c4:	1869      	adds	r1, r5, r1
 80003c6:	f107 30ff 	add.w	r0, r7, #4294967295
 80003ca:	d231      	bcs.n	8000430 <__udivmoddi4+0x2b0>
 80003cc:	458c      	cmp	ip, r1
 80003ce:	d92f      	bls.n	8000430 <__udivmoddi4+0x2b0>
 80003d0:	3f02      	subs	r7, #2
 80003d2:	4429      	add	r1, r5
 80003d4:	eba1 010c 	sub.w	r1, r1, ip
 80003d8:	fbb1 f0f8 	udiv	r0, r1, r8
 80003dc:	fb08 1c10 	mls	ip, r8, r0, r1
 80003e0:	fb00 fe09 	mul.w	lr, r0, r9
 80003e4:	b299      	uxth	r1, r3
 80003e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x27e>
 80003ee:	1869      	adds	r1, r5, r1
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f4:	d218      	bcs.n	8000428 <__udivmoddi4+0x2a8>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d916      	bls.n	8000428 <__udivmoddi4+0x2a8>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4429      	add	r1, r5
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000406:	e73a      	b.n	800027e <__udivmoddi4+0xfe>
 8000408:	4637      	mov	r7, r6
 800040a:	4630      	mov	r0, r6
 800040c:	e708      	b.n	8000220 <__udivmoddi4+0xa0>
 800040e:	460f      	mov	r7, r1
 8000410:	e6e6      	b.n	80001e0 <__udivmoddi4+0x60>
 8000412:	4618      	mov	r0, r3
 8000414:	e6fb      	b.n	800020e <__udivmoddi4+0x8e>
 8000416:	4543      	cmp	r3, r8
 8000418:	d2ab      	bcs.n	8000372 <__udivmoddi4+0x1f2>
 800041a:	ebb8 0102 	subs.w	r1, r8, r2
 800041e:	eb69 020c 	sbc.w	r2, r9, ip
 8000422:	3801      	subs	r0, #1
 8000424:	4696      	mov	lr, r2
 8000426:	e7a4      	b.n	8000372 <__udivmoddi4+0x1f2>
 8000428:	4618      	mov	r0, r3
 800042a:	e7e8      	b.n	80003fe <__udivmoddi4+0x27e>
 800042c:	4608      	mov	r0, r1
 800042e:	e795      	b.n	800035c <__udivmoddi4+0x1dc>
 8000430:	4607      	mov	r7, r0
 8000432:	e7cf      	b.n	80003d4 <__udivmoddi4+0x254>
 8000434:	4681      	mov	r9, r0
 8000436:	e77b      	b.n	8000330 <__udivmoddi4+0x1b0>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	e747      	b.n	80002ce <__udivmoddi4+0x14e>
 800043e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000442:	442b      	add	r3, r5
 8000444:	e72f      	b.n	80002a6 <__udivmoddi4+0x126>
 8000446:	4638      	mov	r0, r7
 8000448:	e707      	b.n	800025a <__udivmoddi4+0xda>
 800044a:	4637      	mov	r7, r6
 800044c:	e6e8      	b.n	8000220 <__udivmoddi4+0xa0>
 800044e:	bf00      	nop

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop

08000454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <HAL_Init+0x28>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a07      	ldr	r2, [pc, #28]	; (800047c <HAL_Init+0x28>)
 800045e:	f043 0310 	orr.w	r3, r3, #16
 8000462:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000464:	2003      	movs	r0, #3
 8000466:	f000 f929 	bl	80006bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800046a:	2000      	movs	r0, #0
 800046c:	f000 f808 	bl	8000480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000470:	f000 ffee 	bl	8001450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000474:	2300      	movs	r3, #0
}
 8000476:	4618      	mov	r0, r3
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40022000 	.word	0x40022000

08000480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <HAL_InitTick+0x54>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <HAL_InitTick+0x58>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	4619      	mov	r1, r3
 8000492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000496:	fbb3 f3f1 	udiv	r3, r3, r1
 800049a:	fbb2 f3f3 	udiv	r3, r2, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 f933 	bl	800070a <HAL_SYSTICK_Config>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004aa:	2301      	movs	r3, #1
 80004ac:	e00e      	b.n	80004cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	2b0f      	cmp	r3, #15
 80004b2:	d80a      	bhi.n	80004ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004b4:	2200      	movs	r2, #0
 80004b6:	6879      	ldr	r1, [r7, #4]
 80004b8:	f04f 30ff 	mov.w	r0, #4294967295
 80004bc:	f000 f909 	bl	80006d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004c0:	4a06      	ldr	r2, [pc, #24]	; (80004dc <HAL_InitTick+0x5c>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004c6:	2300      	movs	r3, #0
 80004c8:	e000      	b.n	80004cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004ca:	2301      	movs	r3, #1
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000008 	.word	0x20000008
 80004d8:	20000004 	.word	0x20000004
 80004dc:	20000000 	.word	0x20000000

080004e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <HAL_IncTick+0x1c>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	461a      	mov	r2, r3
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_IncTick+0x20>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4413      	add	r3, r2
 80004f0:	4a03      	ldr	r2, [pc, #12]	; (8000500 <HAL_IncTick+0x20>)
 80004f2:	6013      	str	r3, [r2, #0]
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	20000004 	.word	0x20000004
 8000500:	20000028 	.word	0x20000028

08000504 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  return uwTick;
 8000508:	4b02      	ldr	r3, [pc, #8]	; (8000514 <HAL_GetTick+0x10>)
 800050a:	681b      	ldr	r3, [r3, #0]
}
 800050c:	4618      	mov	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	20000028 	.word	0x20000028

08000518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000520:	f7ff fff0 	bl	8000504 <HAL_GetTick>
 8000524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000530:	d005      	beq.n	800053e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <HAL_Delay+0x40>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	461a      	mov	r2, r3
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	4413      	add	r3, r2
 800053c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800053e:	bf00      	nop
 8000540:	f7ff ffe0 	bl	8000504 <HAL_GetTick>
 8000544:	4602      	mov	r2, r0
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	429a      	cmp	r2, r3
 800054e:	d8f7      	bhi.n	8000540 <HAL_Delay+0x28>
  {
  }
}
 8000550:	bf00      	nop
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000004 	.word	0x20000004

0800055c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f003 0307 	and.w	r3, r3, #7
 800056a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <NVIC_SetPriorityGrouping+0x44>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000572:	68ba      	ldr	r2, [r7, #8]
 8000574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000578:	4013      	ands	r3, r2
 800057a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800058e:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <NVIC_SetPriorityGrouping+0x44>)
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	60d3      	str	r3, [r2, #12]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <NVIC_GetPriorityGrouping+0x18>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	0a1b      	lsrs	r3, r3, #8
 80005ae:	f003 0307 	and.w	r3, r3, #7
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80005cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	da0b      	bge.n	80005ec <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	490c      	ldr	r1, [pc, #48]	; (800060c <NVIC_SetPriority+0x4c>)
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 030f 	and.w	r3, r3, #15
 80005e0:	3b04      	subs	r3, #4
 80005e2:	0112      	lsls	r2, r2, #4
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	440b      	add	r3, r1
 80005e8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005ea:	e009      	b.n	8000600 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4907      	ldr	r1, [pc, #28]	; (8000610 <NVIC_SetPriority+0x50>)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	0112      	lsls	r2, r2, #4
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	440b      	add	r3, r1
 80005fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00
 8000610:	e000e100 	.word	0xe000e100

08000614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000614:	b480      	push	{r7}
 8000616:	b089      	sub	sp, #36	; 0x24
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	f1c3 0307 	rsb	r3, r3, #7
 800062e:	2b04      	cmp	r3, #4
 8000630:	bf28      	it	cs
 8000632:	2304      	movcs	r3, #4
 8000634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	3304      	adds	r3, #4
 800063a:	2b06      	cmp	r3, #6
 800063c:	d902      	bls.n	8000644 <NVIC_EncodePriority+0x30>
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	3b03      	subs	r3, #3
 8000642:	e000      	b.n	8000646 <NVIC_EncodePriority+0x32>
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000648:	f04f 32ff 	mov.w	r2, #4294967295
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	fa02 f303 	lsl.w	r3, r2, r3
 8000652:	43da      	mvns	r2, r3
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	401a      	ands	r2, r3
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800065c:	f04f 31ff 	mov.w	r1, #4294967295
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	fa01 f303 	lsl.w	r3, r1, r3
 8000666:	43d9      	mvns	r1, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	4313      	orrs	r3, r2
         );
}
 800066e:	4618      	mov	r0, r3
 8000670:	3724      	adds	r7, #36	; 0x24
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3b01      	subs	r3, #1
 8000684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000688:	d301      	bcc.n	800068e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800068a:	2301      	movs	r3, #1
 800068c:	e00f      	b.n	80006ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <SysTick_Config+0x40>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3b01      	subs	r3, #1
 8000694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000696:	210f      	movs	r1, #15
 8000698:	f04f 30ff 	mov.w	r0, #4294967295
 800069c:	f7ff ff90 	bl	80005c0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <SysTick_Config+0x40>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006a6:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <SysTick_Config+0x40>)
 80006a8:	2207      	movs	r2, #7
 80006aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	e000e010 	.word	0xe000e010

080006bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff ff49 	bl	800055c <NVIC_SetPriorityGrouping>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b086      	sub	sp, #24
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	4603      	mov	r3, r0
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	607a      	str	r2, [r7, #4]
 80006de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006e4:	f7ff ff5e 	bl	80005a4 <NVIC_GetPriorityGrouping>
 80006e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	68b9      	ldr	r1, [r7, #8]
 80006ee:	6978      	ldr	r0, [r7, #20]
 80006f0:	f7ff ff90 	bl	8000614 <NVIC_EncodePriority>
 80006f4:	4602      	mov	r2, r0
 80006f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff5f 	bl	80005c0 <NVIC_SetPriority>
}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff ffb0 	bl	8000678 <SysTick_Config>
 8000718:	4603      	mov	r3, r0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	2b00      	cmp	r3, #0
 800073a:	f000 8087 	beq.w	800084c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800073e:	4b92      	ldr	r3, [pc, #584]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	f003 030c 	and.w	r3, r3, #12
 8000746:	2b04      	cmp	r3, #4
 8000748:	d00c      	beq.n	8000764 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800074a:	4b8f      	ldr	r3, [pc, #572]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	f003 030c 	and.w	r3, r3, #12
 8000752:	2b08      	cmp	r3, #8
 8000754:	d112      	bne.n	800077c <HAL_RCC_OscConfig+0x58>
 8000756:	4b8c      	ldr	r3, [pc, #560]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800075e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000762:	d10b      	bne.n	800077c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000764:	4b88      	ldr	r3, [pc, #544]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800076c:	2b00      	cmp	r3, #0
 800076e:	d06c      	beq.n	800084a <HAL_RCC_OscConfig+0x126>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d168      	bne.n	800084a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000778:	2301      	movs	r3, #1
 800077a:	e22d      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000784:	d106      	bne.n	8000794 <HAL_RCC_OscConfig+0x70>
 8000786:	4b80      	ldr	r3, [pc, #512]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a7f      	ldr	r2, [pc, #508]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 800078c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	e02e      	b.n	80007f2 <HAL_RCC_OscConfig+0xce>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d10c      	bne.n	80007b6 <HAL_RCC_OscConfig+0x92>
 800079c:	4b7a      	ldr	r3, [pc, #488]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a79      	ldr	r2, [pc, #484]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 80007a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b77      	ldr	r3, [pc, #476]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a76      	ldr	r2, [pc, #472]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 80007ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	e01d      	b.n	80007f2 <HAL_RCC_OscConfig+0xce>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007be:	d10c      	bne.n	80007da <HAL_RCC_OscConfig+0xb6>
 80007c0:	4b71      	ldr	r3, [pc, #452]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a70      	ldr	r2, [pc, #448]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 80007c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b6e      	ldr	r3, [pc, #440]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a6d      	ldr	r2, [pc, #436]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 80007d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	e00b      	b.n	80007f2 <HAL_RCC_OscConfig+0xce>
 80007da:	4b6b      	ldr	r3, [pc, #428]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a6a      	ldr	r2, [pc, #424]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 80007e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007e4:	6013      	str	r3, [r2, #0]
 80007e6:	4b68      	ldr	r3, [pc, #416]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a67      	ldr	r2, [pc, #412]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 80007ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007f0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d013      	beq.n	8000822 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007fa:	f7ff fe83 	bl	8000504 <HAL_GetTick>
 80007fe:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000800:	e008      	b.n	8000814 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000802:	f7ff fe7f 	bl	8000504 <HAL_GetTick>
 8000806:	4602      	mov	r2, r0
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	2b64      	cmp	r3, #100	; 0x64
 800080e:	d901      	bls.n	8000814 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000810:	2303      	movs	r3, #3
 8000812:	e1e1      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000814:	4b5c      	ldr	r3, [pc, #368]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081c:	2b00      	cmp	r3, #0
 800081e:	d0f0      	beq.n	8000802 <HAL_RCC_OscConfig+0xde>
 8000820:	e014      	b.n	800084c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000822:	f7ff fe6f 	bl	8000504 <HAL_GetTick>
 8000826:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000828:	e008      	b.n	800083c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800082a:	f7ff fe6b 	bl	8000504 <HAL_GetTick>
 800082e:	4602      	mov	r2, r0
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	2b64      	cmp	r3, #100	; 0x64
 8000836:	d901      	bls.n	800083c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000838:	2303      	movs	r3, #3
 800083a:	e1cd      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800083c:	4b52      	ldr	r3, [pc, #328]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1f0      	bne.n	800082a <HAL_RCC_OscConfig+0x106>
 8000848:	e000      	b.n	800084c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800084a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f003 0302 	and.w	r3, r3, #2
 8000854:	2b00      	cmp	r3, #0
 8000856:	d063      	beq.n	8000920 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000858:	4b4b      	ldr	r3, [pc, #300]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	f003 030c 	and.w	r3, r3, #12
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00b      	beq.n	800087c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000864:	4b48      	ldr	r3, [pc, #288]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	f003 030c 	and.w	r3, r3, #12
 800086c:	2b08      	cmp	r3, #8
 800086e:	d11c      	bne.n	80008aa <HAL_RCC_OscConfig+0x186>
 8000870:	4b45      	ldr	r3, [pc, #276]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000878:	2b00      	cmp	r3, #0
 800087a:	d116      	bne.n	80008aa <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800087c:	4b42      	ldr	r3, [pc, #264]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f003 0302 	and.w	r3, r3, #2
 8000884:	2b00      	cmp	r3, #0
 8000886:	d005      	beq.n	8000894 <HAL_RCC_OscConfig+0x170>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	691b      	ldr	r3, [r3, #16]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d001      	beq.n	8000894 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000890:	2301      	movs	r3, #1
 8000892:	e1a1      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000894:	4b3c      	ldr	r3, [pc, #240]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	00db      	lsls	r3, r3, #3
 80008a2:	4939      	ldr	r1, [pc, #228]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 80008a4:	4313      	orrs	r3, r2
 80008a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008a8:	e03a      	b.n	8000920 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d020      	beq.n	80008f4 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008b2:	4b36      	ldr	r3, [pc, #216]	; (800098c <HAL_RCC_OscConfig+0x268>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008b8:	f7ff fe24 	bl	8000504 <HAL_GetTick>
 80008bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008be:	e008      	b.n	80008d2 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008c0:	f7ff fe20 	bl	8000504 <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d901      	bls.n	80008d2 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80008ce:	2303      	movs	r3, #3
 80008d0:	e182      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d0f0      	beq.n	80008c0 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008de:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	00db      	lsls	r3, r3, #3
 80008ec:	4926      	ldr	r1, [pc, #152]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 80008ee:	4313      	orrs	r3, r2
 80008f0:	600b      	str	r3, [r1, #0]
 80008f2:	e015      	b.n	8000920 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008f4:	4b25      	ldr	r3, [pc, #148]	; (800098c <HAL_RCC_OscConfig+0x268>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008fa:	f7ff fe03 	bl	8000504 <HAL_GetTick>
 80008fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000900:	e008      	b.n	8000914 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000902:	f7ff fdff 	bl	8000504 <HAL_GetTick>
 8000906:	4602      	mov	r2, r0
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	2b02      	cmp	r3, #2
 800090e:	d901      	bls.n	8000914 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000910:	2303      	movs	r3, #3
 8000912:	e161      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f003 0302 	and.w	r3, r3, #2
 800091c:	2b00      	cmp	r3, #0
 800091e:	d1f0      	bne.n	8000902 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f003 0308 	and.w	r3, r3, #8
 8000928:	2b00      	cmp	r3, #0
 800092a:	d039      	beq.n	80009a0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d019      	beq.n	8000968 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 8000936:	2201      	movs	r2, #1
 8000938:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800093a:	f7ff fde3 	bl	8000504 <HAL_GetTick>
 800093e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000940:	e008      	b.n	8000954 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000942:	f7ff fddf 	bl	8000504 <HAL_GetTick>
 8000946:	4602      	mov	r2, r0
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	2b02      	cmp	r3, #2
 800094e:	d901      	bls.n	8000954 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000950:	2303      	movs	r3, #3
 8000952:	e141      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_RCC_OscConfig+0x264>)
 8000956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000958:	f003 0302 	and.w	r3, r3, #2
 800095c:	2b00      	cmp	r3, #0
 800095e:	d0f0      	beq.n	8000942 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000960:	2001      	movs	r0, #1
 8000962:	f000 fab1 	bl	8000ec8 <RCC_Delay>
 8000966:	e01b      	b.n	80009a0 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800096e:	f7ff fdc9 	bl	8000504 <HAL_GetTick>
 8000972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000974:	e00e      	b.n	8000994 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000976:	f7ff fdc5 	bl	8000504 <HAL_GetTick>
 800097a:	4602      	mov	r2, r0
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	2b02      	cmp	r3, #2
 8000982:	d907      	bls.n	8000994 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000984:	2303      	movs	r3, #3
 8000986:	e127      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4b4>
 8000988:	40021000 	.word	0x40021000
 800098c:	42420000 	.word	0x42420000
 8000990:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000994:	4b92      	ldr	r3, [pc, #584]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000998:	f003 0302 	and.w	r3, r3, #2
 800099c:	2b00      	cmp	r3, #0
 800099e:	d1ea      	bne.n	8000976 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f000 80a6 	beq.w	8000afa <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009b2:	4b8b      	ldr	r3, [pc, #556]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d10d      	bne.n	80009da <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b88      	ldr	r3, [pc, #544]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4a87      	ldr	r2, [pc, #540]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	61d3      	str	r3, [r2, #28]
 80009ca:	4b85      	ldr	r3, [pc, #532]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80009d6:	2301      	movs	r3, #1
 80009d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009da:	4b82      	ldr	r3, [pc, #520]	; (8000be4 <HAL_RCC_OscConfig+0x4c0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d118      	bne.n	8000a18 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009e6:	4b7f      	ldr	r3, [pc, #508]	; (8000be4 <HAL_RCC_OscConfig+0x4c0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a7e      	ldr	r2, [pc, #504]	; (8000be4 <HAL_RCC_OscConfig+0x4c0>)
 80009ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009f2:	f7ff fd87 	bl	8000504 <HAL_GetTick>
 80009f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009f8:	e008      	b.n	8000a0c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009fa:	f7ff fd83 	bl	8000504 <HAL_GetTick>
 80009fe:	4602      	mov	r2, r0
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	2b64      	cmp	r3, #100	; 0x64
 8000a06:	d901      	bls.n	8000a0c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	e0e5      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a0c:	4b75      	ldr	r3, [pc, #468]	; (8000be4 <HAL_RCC_OscConfig+0x4c0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d0f0      	beq.n	80009fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d106      	bne.n	8000a2e <HAL_RCC_OscConfig+0x30a>
 8000a20:	4b6f      	ldr	r3, [pc, #444]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000a22:	6a1b      	ldr	r3, [r3, #32]
 8000a24:	4a6e      	ldr	r2, [pc, #440]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	6213      	str	r3, [r2, #32]
 8000a2c:	e02d      	b.n	8000a8a <HAL_RCC_OscConfig+0x366>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10c      	bne.n	8000a50 <HAL_RCC_OscConfig+0x32c>
 8000a36:	4b6a      	ldr	r3, [pc, #424]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000a38:	6a1b      	ldr	r3, [r3, #32]
 8000a3a:	4a69      	ldr	r2, [pc, #420]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000a3c:	f023 0301 	bic.w	r3, r3, #1
 8000a40:	6213      	str	r3, [r2, #32]
 8000a42:	4b67      	ldr	r3, [pc, #412]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000a44:	6a1b      	ldr	r3, [r3, #32]
 8000a46:	4a66      	ldr	r2, [pc, #408]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000a48:	f023 0304 	bic.w	r3, r3, #4
 8000a4c:	6213      	str	r3, [r2, #32]
 8000a4e:	e01c      	b.n	8000a8a <HAL_RCC_OscConfig+0x366>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	2b05      	cmp	r3, #5
 8000a56:	d10c      	bne.n	8000a72 <HAL_RCC_OscConfig+0x34e>
 8000a58:	4b61      	ldr	r3, [pc, #388]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	4a60      	ldr	r2, [pc, #384]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	6213      	str	r3, [r2, #32]
 8000a64:	4b5e      	ldr	r3, [pc, #376]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000a66:	6a1b      	ldr	r3, [r3, #32]
 8000a68:	4a5d      	ldr	r2, [pc, #372]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6213      	str	r3, [r2, #32]
 8000a70:	e00b      	b.n	8000a8a <HAL_RCC_OscConfig+0x366>
 8000a72:	4b5b      	ldr	r3, [pc, #364]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000a74:	6a1b      	ldr	r3, [r3, #32]
 8000a76:	4a5a      	ldr	r2, [pc, #360]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000a78:	f023 0301 	bic.w	r3, r3, #1
 8000a7c:	6213      	str	r3, [r2, #32]
 8000a7e:	4b58      	ldr	r3, [pc, #352]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000a80:	6a1b      	ldr	r3, [r3, #32]
 8000a82:	4a57      	ldr	r2, [pc, #348]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000a84:	f023 0304 	bic.w	r3, r3, #4
 8000a88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d015      	beq.n	8000abe <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a92:	f7ff fd37 	bl	8000504 <HAL_GetTick>
 8000a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a98:	e00a      	b.n	8000ab0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a9a:	f7ff fd33 	bl	8000504 <HAL_GetTick>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d901      	bls.n	8000ab0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000aac:	2303      	movs	r3, #3
 8000aae:	e093      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ab0:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000ab2:	6a1b      	ldr	r3, [r3, #32]
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d0ee      	beq.n	8000a9a <HAL_RCC_OscConfig+0x376>
 8000abc:	e014      	b.n	8000ae8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000abe:	f7ff fd21 	bl	8000504 <HAL_GetTick>
 8000ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ac4:	e00a      	b.n	8000adc <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac6:	f7ff fd1d 	bl	8000504 <HAL_GetTick>
 8000aca:	4602      	mov	r2, r0
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d901      	bls.n	8000adc <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	e07d      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000adc:	4b40      	ldr	r3, [pc, #256]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000ade:	6a1b      	ldr	r3, [r3, #32]
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1ee      	bne.n	8000ac6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ae8:	7dfb      	ldrb	r3, [r7, #23]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d105      	bne.n	8000afa <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000aee:	4b3c      	ldr	r3, [pc, #240]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	4a3b      	ldr	r2, [pc, #236]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000af8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d069      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b02:	4b37      	ldr	r3, [pc, #220]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 030c 	and.w	r3, r3, #12
 8000b0a:	2b08      	cmp	r3, #8
 8000b0c:	d061      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d146      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b16:	4b34      	ldr	r3, [pc, #208]	; (8000be8 <HAL_RCC_OscConfig+0x4c4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b1c:	f7ff fcf2 	bl	8000504 <HAL_GetTick>
 8000b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b22:	e008      	b.n	8000b36 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b24:	f7ff fcee 	bl	8000504 <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d901      	bls.n	8000b36 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000b32:	2303      	movs	r3, #3
 8000b34:	e050      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b36:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1f0      	bne.n	8000b24 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6a1b      	ldr	r3, [r3, #32]
 8000b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b4a:	d108      	bne.n	8000b5e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	4921      	ldr	r1, [pc, #132]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6a19      	ldr	r1, [r3, #32]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6e:	430b      	orrs	r3, r1
 8000b70:	491b      	ldr	r1, [pc, #108]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000b72:	4313      	orrs	r3, r2
 8000b74:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_RCC_OscConfig+0x4c4>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fcc2 	bl	8000504 <HAL_GetTick>
 8000b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b82:	e008      	b.n	8000b96 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b84:	f7ff fcbe 	bl	8000504 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d901      	bls.n	8000b96 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e020      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0f0      	beq.n	8000b84 <HAL_RCC_OscConfig+0x460>
 8000ba2:	e018      	b.n	8000bd6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_RCC_OscConfig+0x4c4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000baa:	f7ff fcab 	bl	8000504 <HAL_GetTick>
 8000bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bb0:	e008      	b.n	8000bc4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bb2:	f7ff fca7 	bl	8000504 <HAL_GetTick>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d901      	bls.n	8000bc4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	e009      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_RCC_OscConfig+0x4bc>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1f0      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x48e>
 8000bd0:	e001      	b.n	8000bd6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e000      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40007000 	.word	0x40007000
 8000be8:	42420060 	.word	0x42420060

08000bec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bfa:	4b7e      	ldr	r3, [pc, #504]	; (8000df4 <HAL_RCC_ClockConfig+0x208>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d910      	bls.n	8000c2a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c08:	4b7a      	ldr	r3, [pc, #488]	; (8000df4 <HAL_RCC_ClockConfig+0x208>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f023 0207 	bic.w	r2, r3, #7
 8000c10:	4978      	ldr	r1, [pc, #480]	; (8000df4 <HAL_RCC_ClockConfig+0x208>)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c18:	4b76      	ldr	r3, [pc, #472]	; (8000df4 <HAL_RCC_ClockConfig+0x208>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f003 0307 	and.w	r3, r3, #7
 8000c20:	683a      	ldr	r2, [r7, #0]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d001      	beq.n	8000c2a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e0e0      	b.n	8000dec <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d020      	beq.n	8000c78 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d005      	beq.n	8000c4e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c42:	4b6d      	ldr	r3, [pc, #436]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	4a6c      	ldr	r2, [pc, #432]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000c48:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c4c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d005      	beq.n	8000c66 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c5a:	4b67      	ldr	r3, [pc, #412]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	4a66      	ldr	r2, [pc, #408]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000c60:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000c64:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c66:	4b64      	ldr	r3, [pc, #400]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	4961      	ldr	r1, [pc, #388]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000c74:	4313      	orrs	r3, r2
 8000c76:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d06a      	beq.n	8000d5a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d107      	bne.n	8000c9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8c:	4b5a      	ldr	r3, [pc, #360]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d115      	bne.n	8000cc4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e0a7      	b.n	8000dec <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d107      	bne.n	8000cb4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ca4:	4b54      	ldr	r3, [pc, #336]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d109      	bne.n	8000cc4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e09b      	b.n	8000dec <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb4:	4b50      	ldr	r3, [pc, #320]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e093      	b.n	8000dec <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cc4:	4b4c      	ldr	r3, [pc, #304]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f023 0203 	bic.w	r2, r3, #3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4949      	ldr	r1, [pc, #292]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cd6:	f7ff fc15 	bl	8000504 <HAL_GetTick>
 8000cda:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d112      	bne.n	8000d0a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ce4:	e00a      	b.n	8000cfc <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ce6:	f7ff fc0d 	bl	8000504 <HAL_GetTick>
 8000cea:	4602      	mov	r2, r0
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d901      	bls.n	8000cfc <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e077      	b.n	8000dec <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cfc:	4b3e      	ldr	r3, [pc, #248]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 030c 	and.w	r3, r3, #12
 8000d04:	2b04      	cmp	r3, #4
 8000d06:	d1ee      	bne.n	8000ce6 <HAL_RCC_ClockConfig+0xfa>
 8000d08:	e027      	b.n	8000d5a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d11d      	bne.n	8000d4e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d12:	e00a      	b.n	8000d2a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d14:	f7ff fbf6 	bl	8000504 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e060      	b.n	8000dec <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d2a:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 030c 	and.w	r3, r3, #12
 8000d32:	2b08      	cmp	r3, #8
 8000d34:	d1ee      	bne.n	8000d14 <HAL_RCC_ClockConfig+0x128>
 8000d36:	e010      	b.n	8000d5a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d38:	f7ff fbe4 	bl	8000504 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e04e      	b.n	8000dec <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d4e:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 030c 	and.w	r3, r3, #12
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1ee      	bne.n	8000d38 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d5a:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <HAL_RCC_ClockConfig+0x208>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d210      	bcs.n	8000d8a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d68:	4b22      	ldr	r3, [pc, #136]	; (8000df4 <HAL_RCC_ClockConfig+0x208>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f023 0207 	bic.w	r2, r3, #7
 8000d70:	4920      	ldr	r1, [pc, #128]	; (8000df4 <HAL_RCC_ClockConfig+0x208>)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d78:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <HAL_RCC_ClockConfig+0x208>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d001      	beq.n	8000d8a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e030      	b.n	8000dec <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d008      	beq.n	8000da8 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	4915      	ldr	r1, [pc, #84]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000da4:	4313      	orrs	r3, r2
 8000da6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0308 	and.w	r3, r3, #8
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d009      	beq.n	8000dc8 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000db4:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	490d      	ldr	r1, [pc, #52]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000dc8:	f000 f81c 	bl	8000e04 <HAL_RCC_GetSysClockFreq>
 8000dcc:	4601      	mov	r1, r0
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_RCC_ClockConfig+0x20c>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	091b      	lsrs	r3, r3, #4
 8000dd4:	f003 030f 	and.w	r3, r3, #15
 8000dd8:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <HAL_RCC_ClockConfig+0x210>)
 8000dda:	5cd3      	ldrb	r3, [r2, r3]
 8000ddc:	fa21 f303 	lsr.w	r3, r1, r3
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_RCC_ClockConfig+0x214>)
 8000de2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f7ff fb4b 	bl	8000480 <HAL_InitTick>
  
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40022000 	.word	0x40022000
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	0800164c 	.word	0x0800164c
 8000e00:	20000008 	.word	0x20000008

08000e04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e04:	b490      	push	{r4, r7}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e0c:	1d3c      	adds	r4, r7, #4
 8000e0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e14:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e2e:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f003 030c 	and.w	r3, r3, #12
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	d002      	beq.n	8000e44 <HAL_RCC_GetSysClockFreq+0x40>
 8000e3e:	2b08      	cmp	r3, #8
 8000e40:	d003      	beq.n	8000e4a <HAL_RCC_GetSysClockFreq+0x46>
 8000e42:	e02d      	b.n	8000ea0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e46:	623b      	str	r3, [r7, #32]
      break;
 8000e48:	e02d      	b.n	8000ea6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	0c9b      	lsrs	r3, r3, #18
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e56:	4413      	add	r3, r2
 8000e58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e5c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d013      	beq.n	8000e90 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	0c5b      	lsrs	r3, r3, #17
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e76:	4413      	add	r3, r2
 8000e78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e7c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e82:	fb02 f203 	mul.w	r2, r2, r3
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e8e:	e004      	b.n	8000e9a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e94:	fb02 f303 	mul.w	r3, r2, r3
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	623b      	str	r3, [r7, #32]
      break;
 8000e9e:	e002      	b.n	8000ea6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ea2:	623b      	str	r3, [r7, #32]
      break;
 8000ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000ea6:	6a3b      	ldr	r3, [r7, #32]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc90      	pop	{r4, r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	0800162c 	.word	0x0800162c
 8000eb8:	0800163c 	.word	0x0800163c
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	007a1200 	.word	0x007a1200
 8000ec4:	003d0900 	.word	0x003d0900

08000ec8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <RCC_Delay+0x34>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <RCC_Delay+0x38>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	0a5b      	lsrs	r3, r3, #9
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	fb02 f303 	mul.w	r3, r2, r3
 8000ee2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000ee4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	1e5a      	subs	r2, r3, #1
 8000eea:	60fa      	str	r2, [r7, #12]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1f9      	bne.n	8000ee4 <RCC_Delay+0x1c>
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	10624dd3 	.word	0x10624dd3

08000f04 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000f04:	b490      	push	{r4, r7}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	0e1b      	lsrs	r3, r3, #24
 8000f18:	4413      	add	r3, r2
 8000f1a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000f1c:	6822      	ldr	r2, [r4, #0]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	fa93 f3a3 	rbit	r3, r3
 8000f28:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	fab3 f383 	clz	r3, r3
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	210f      	movs	r1, #15
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	fa93 f3a3 	rbit	r3, r3
 8000f46:	61bb      	str	r3, [r7, #24]
  return(result);
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fab3 f383 	clz	r3, r3
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	6023      	str	r3, [r4, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc90      	pop	{r4, r7}
 8000f62:	4770      	bx	lr

08000f64 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000f64:	b490      	push	{r4, r7}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	0e1b      	lsrs	r3, r3, #24
 8000f78:	4413      	add	r3, r2
 8000f7a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000f7c:	6822      	ldr	r2, [r4, #0]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	613b      	str	r3, [r7, #16]
  return(result);
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	fab3 f383 	clz	r3, r3
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	2103      	movs	r1, #3
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	fa93 f3a3 	rbit	r3, r3
 8000fa6:	61bb      	str	r3, [r7, #24]
  return(result);
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	fab3 f383 	clz	r3, r3
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8000fba:	bf00      	nop
 8000fbc:	3720      	adds	r7, #32
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc90      	pop	{r4, r7}
 8000fc2:	4770      	bx	lr

08000fc4 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8000fc4:	b490      	push	{r4, r7}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	0e1b      	lsrs	r3, r3, #24
 8000fd8:	4413      	add	r3, r2
 8000fda:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000fdc:	6822      	ldr	r2, [r4, #0]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	fa93 f3a3 	rbit	r3, r3
 8000fe8:	613b      	str	r3, [r7, #16]
  return(result);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	fab3 f383 	clz	r3, r3
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	fa93 f3a3 	rbit	r3, r3
 8001006:	61bb      	str	r3, [r7, #24]
  return(result);
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fab3 f383 	clz	r3, r3
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 800101a:	bf00      	nop
 800101c:	3720      	adds	r7, #32
 800101e:	46bd      	mov	sp, r7
 8001020:	bc90      	pop	{r4, r7}
 8001022:	4770      	bx	lr

08001024 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	43db      	mvns	r3, r3
 800103a:	401a      	ands	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	0a1b      	lsrs	r3, r3, #8
 8001040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	fa93 f3a3 	rbit	r3, r3
 8001048:	613b      	str	r3, [r7, #16]
  return(result);
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	fab3 f383 	clz	r3, r3
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	431a      	orrs	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	60da      	str	r2, [r3, #12]
}
 800105c:	bf00      	nop
 800105e:	371c      	adds	r7, #28
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b088      	sub	sp, #32
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	0c1b      	lsrs	r3, r3, #16
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	fa93 f3a3 	rbit	r3, r3
 8001084:	60fb      	str	r3, [r7, #12]
  return(result);
 8001086:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001088:	fab3 f383 	clz	r3, r3
 800108c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0U)
 800108e:	e040      	b.n	8001112 <LL_GPIO_Init+0xac>
  {
    /* skip if bit is not set */
    if ((pinmask & (1U << pinpos)) != 0U)
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	409a      	lsls	r2, r3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	4013      	ands	r3, r2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d036      	beq.n	800110c <LL_GPIO_Init+0xa6>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	d806      	bhi.n	80010b2 <LL_GPIO_Init+0x4c>
      {
        currentpin = (0x00000101U << pinpos);
 80010a4:	f240 1201 	movw	r2, #257	; 0x101
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	61bb      	str	r3, [r7, #24]
 80010b0:	e008      	b.n	80010c4 <LL_GPIO_Init+0x5e>
      }
      else
      {
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b08      	subs	r3, #8
 80010b6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010c2:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	461a      	mov	r2, r3
 80010ca:	69b9      	ldr	r1, [r7, #24]
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff19 	bl	8000f04 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	461a      	mov	r2, r3
 80010d8:	69b9      	ldr	r1, [r7, #24]
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffa2 	bl	8001024 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d003      	beq.n	80010f0 <LL_GPIO_Init+0x8a>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b09      	cmp	r3, #9
 80010ee:	d10d      	bne.n	800110c <LL_GPIO_Init+0xa6>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	461a      	mov	r2, r3
 80010f6:	69b9      	ldr	r1, [r7, #24]
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff33 	bl	8000f64 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	461a      	mov	r2, r3
 8001104:	69b9      	ldr	r1, [r7, #24]
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff5c 	bl	8000fc4 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	3301      	adds	r3, #1
 8001110:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0U)
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	fa22 f303 	lsr.w	r3, r2, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1b8      	bne.n	8001090 <LL_GPIO_Init+0x2a>
  }
  return (SUCCESS);
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <LL_GPIO_WriteOutputPort>:
  * @param  GPIOx GPIO Port
  * @param  PortValue Level value for each pin of the port
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_WriteOutputPort(GPIO_TypeDef *GPIOx, uint32_t PortValue)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, PortValue);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	60da      	str	r2, [r3, #12]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	0a1b      	lsrs	r3, r3, #8
 8001150:	b29a      	uxth	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	611a      	str	r2, [r3, #16]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <LL_APB2_GRP1_EnableClock+0x2c>)
 800116a:	699a      	ldr	r2, [r3, #24]
 800116c:	4907      	ldr	r1, [pc, #28]	; (800118c <LL_APB2_GRP1_EnableClock+0x2c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4313      	orrs	r3, r2
 8001172:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001176:	699a      	ldr	r2, [r3, #24]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4013      	ands	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i;
	uint64_t num=12345678;
 8001196:	a46c      	add	r4, pc, #432	; (adr r4, 8001348 <main+0x1b8>)
 8001198:	e9d4 3400 	ldrd	r3, r4, [r4]
 800119c:	e9c7 3402 	strd	r3, r4, [r7, #8]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a0:	f7ff f958 	bl	8000454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a4:	f000 f8d4 	bl	8001350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a8:	f000 f90e 	bl	80013c8 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  unit[7]=num/10000000;
 80011ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011b0:	4a5f      	ldr	r2, [pc, #380]	; (8001330 <main+0x1a0>)
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	f7fe ffcb 	bl	8000150 <__aeabi_uldivmod>
 80011ba:	4603      	mov	r3, r0
 80011bc:	460c      	mov	r4, r1
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	71fb      	strb	r3, [r7, #7]
	  unit[6]=num%10000000/1000000;
 80011c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011c6:	4a5a      	ldr	r2, [pc, #360]	; (8001330 <main+0x1a0>)
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	f7fe ffc0 	bl	8000150 <__aeabi_uldivmod>
 80011d0:	461c      	mov	r4, r3
 80011d2:	4613      	mov	r3, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	4621      	mov	r1, r4
 80011d8:	4a56      	ldr	r2, [pc, #344]	; (8001334 <main+0x1a4>)
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	f7fe ffb7 	bl	8000150 <__aeabi_uldivmod>
 80011e2:	4603      	mov	r3, r0
 80011e4:	460c      	mov	r4, r1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	71bb      	strb	r3, [r7, #6]
	  unit[5]=num%1000000/100000;
 80011ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ee:	4a51      	ldr	r2, [pc, #324]	; (8001334 <main+0x1a4>)
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	f7fe ffac 	bl	8000150 <__aeabi_uldivmod>
 80011f8:	461c      	mov	r4, r3
 80011fa:	4613      	mov	r3, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	4621      	mov	r1, r4
 8001200:	4a4d      	ldr	r2, [pc, #308]	; (8001338 <main+0x1a8>)
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	f7fe ffa3 	bl	8000150 <__aeabi_uldivmod>
 800120a:	4603      	mov	r3, r0
 800120c:	460c      	mov	r4, r1
 800120e:	b2db      	uxtb	r3, r3
 8001210:	717b      	strb	r3, [r7, #5]
	  unit[4]=num%100000/10000;
 8001212:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001216:	4a48      	ldr	r2, [pc, #288]	; (8001338 <main+0x1a8>)
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	f7fe ff98 	bl	8000150 <__aeabi_uldivmod>
 8001220:	461c      	mov	r4, r3
 8001222:	4613      	mov	r3, r2
 8001224:	4618      	mov	r0, r3
 8001226:	4621      	mov	r1, r4
 8001228:	f242 7210 	movw	r2, #10000	; 0x2710
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	f7fe ff8e 	bl	8000150 <__aeabi_uldivmod>
 8001234:	4603      	mov	r3, r0
 8001236:	460c      	mov	r4, r1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	713b      	strb	r3, [r7, #4]
	  unit[3]=num%10000/1000;
 800123c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001240:	f242 7210 	movw	r2, #10000	; 0x2710
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	f7fe ff82 	bl	8000150 <__aeabi_uldivmod>
 800124c:	461c      	mov	r4, r3
 800124e:	4613      	mov	r3, r2
 8001250:	4618      	mov	r0, r3
 8001252:	4621      	mov	r1, r4
 8001254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001258:	f04f 0300 	mov.w	r3, #0
 800125c:	f7fe ff78 	bl	8000150 <__aeabi_uldivmod>
 8001260:	4603      	mov	r3, r0
 8001262:	460c      	mov	r4, r1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	70fb      	strb	r3, [r7, #3]
	  unit[2]=num%1000/100;
 8001268:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800126c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	f7fe ff6c 	bl	8000150 <__aeabi_uldivmod>
 8001278:	461c      	mov	r4, r3
 800127a:	4613      	mov	r3, r2
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	f7fe ff62 	bl	8000150 <__aeabi_uldivmod>
 800128c:	4603      	mov	r3, r0
 800128e:	460c      	mov	r4, r1
 8001290:	b2db      	uxtb	r3, r3
 8001292:	70bb      	strb	r3, [r7, #2]
	  unit[1]=num%100/10;
 8001294:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001298:	f04f 0264 	mov.w	r2, #100	; 0x64
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	f7fe ff56 	bl	8000150 <__aeabi_uldivmod>
 80012a4:	461c      	mov	r4, r3
 80012a6:	4613      	mov	r3, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	4621      	mov	r1, r4
 80012ac:	f04f 020a 	mov.w	r2, #10
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	f7fe ff4c 	bl	8000150 <__aeabi_uldivmod>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	707b      	strb	r3, [r7, #1]
	  unit[0]=num%10;
 80012c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012c4:	f04f 020a 	mov.w	r2, #10
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	f7fe ff40 	bl	8000150 <__aeabi_uldivmod>
 80012d0:	461c      	mov	r4, r3
 80012d2:	4613      	mov	r3, r2
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	703b      	strb	r3, [r7, #0]
	  for(i=0;i<8;i++)
 80012d8:	2300      	movs	r3, #0
 80012da:	75fb      	strb	r3, [r7, #23]
 80012dc:	e024      	b.n	8001328 <main+0x198>
	  {
		  LL_GPIO_WriteOutputPort(GPIOB,0xff);
 80012de:	21ff      	movs	r1, #255	; 0xff
 80012e0:	4816      	ldr	r0, [pc, #88]	; (800133c <main+0x1ac>)
 80012e2:	f7ff ff21 	bl	8001128 <LL_GPIO_WriteOutputPort>
		  LL_GPIO_WriteOutputPort(GPIOC,SegmentCodes[unit[i]]);
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
 80012e8:	f107 0218 	add.w	r2, r7, #24
 80012ec:	4413      	add	r3, r2
 80012ee:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <main+0x1b0>)
 80012f6:	5c9b      	ldrb	r3, [r3, r2]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4812      	ldr	r0, [pc, #72]	; (8001344 <main+0x1b4>)
 80012fc:	f7ff ff14 	bl	8001128 <LL_GPIO_WriteOutputPort>
		  LL_GPIO_WriteOutputPort(GPIOB,(0x7f>>i)|(0x7f<<(8-i)));
 8001300:	7dfb      	ldrb	r3, [r7, #23]
 8001302:	227f      	movs	r2, #127	; 0x7f
 8001304:	411a      	asrs	r2, r3
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	f1c3 0308 	rsb	r3, r3, #8
 800130c:	217f      	movs	r1, #127	; 0x7f
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	4619      	mov	r1, r3
 8001316:	4809      	ldr	r0, [pc, #36]	; (800133c <main+0x1ac>)
 8001318:	f7ff ff06 	bl	8001128 <LL_GPIO_WriteOutputPort>
		  HAL_Delay(1);
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff f8fb 	bl	8000518 <HAL_Delay>
	  for(i=0;i<8;i++)
 8001322:	7dfb      	ldrb	r3, [r7, #23]
 8001324:	3301      	adds	r3, #1
 8001326:	75fb      	strb	r3, [r7, #23]
 8001328:	7dfb      	ldrb	r3, [r7, #23]
 800132a:	2b07      	cmp	r3, #7
 800132c:	d9d7      	bls.n	80012de <main+0x14e>
	  unit[7]=num/10000000;
 800132e:	e73d      	b.n	80011ac <main+0x1c>
 8001330:	00989680 	.word	0x00989680
 8001334:	000f4240 	.word	0x000f4240
 8001338:	000186a0 	.word	0x000186a0
 800133c:	40010c00 	.word	0x40010c00
 8001340:	08001640 	.word	0x08001640
 8001344:	40011000 	.word	0x40011000
 8001348:	00bc614e 	.word	0x00bc614e
 800134c:	00000000 	.word	0x00000000

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b090      	sub	sp, #64	; 0x40
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	2228      	movs	r2, #40	; 0x28
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f950 	bl	8001604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001372:	2302      	movs	r3, #2
 8001374:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001376:	2301      	movs	r3, #1
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800137a:	2310      	movs	r3, #16
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800137e:	2300      	movs	r3, #0
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001382:	f107 0318 	add.w	r3, r7, #24
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f9cc 	bl	8000724 <HAL_RCC_OscConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001392:	f000 f857 	bl	8001444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001396:	230f      	movs	r3, #15
 8001398:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fc1c 	bl	8000bec <HAL_RCC_ClockConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013ba:	f000 f843 	bl	8001444 <Error_Handler>
  }
}
 80013be:	bf00      	nop
 80013c0:	3740      	adds	r7, #64	; 0x40
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80013dc:	2010      	movs	r0, #16
 80013de:	f7ff febf 	bl	8001160 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80013e2:	2008      	movs	r0, #8
 80013e4:	f7ff febc 	bl	8001160 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3 
 80013e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <MX_GPIO_Init+0x74>)
 80013ee:	f7ff fea8 	bl	8001142 <LL_GPIO_SetOutputPin>
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7);

  /**/
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3 
 80013f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013f6:	4812      	ldr	r0, [pc, #72]	; (8001440 <MX_GPIO_Init+0x78>)
 80013f8:	f7ff fea3 	bl	8001142 <LL_GPIO_SetOutputPin>
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3 
 80013fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001400:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001402:	2301      	movs	r3, #1
 8001404:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001406:	2302      	movs	r3, #2
 8001408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	4619      	mov	r1, r3
 8001412:	480a      	ldr	r0, [pc, #40]	; (800143c <MX_GPIO_Init+0x74>)
 8001414:	f7ff fe27 	bl	8001066 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3 
 8001418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141c:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800141e:	2301      	movs	r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001422:	2302      	movs	r3, #2
 8001424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	4619      	mov	r1, r3
 800142e:	4804      	ldr	r0, [pc, #16]	; (8001440 <MX_GPIO_Init+0x78>)
 8001430:	f7ff fe19 	bl	8001066 <LL_GPIO_Init>

}
 8001434:	bf00      	nop
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40011000 	.word	0x40011000
 8001440:	40010c00 	.word	0x40010c00

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_MspInit+0x5c>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	4a14      	ldr	r2, [pc, #80]	; (80014ac <HAL_MspInit+0x5c>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6193      	str	r3, [r2, #24]
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_MspInit+0x5c>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_MspInit+0x5c>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <HAL_MspInit+0x5c>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	61d3      	str	r3, [r2, #28]
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <HAL_MspInit+0x5c>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_MspInit+0x60>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <HAL_MspInit+0x60>)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40010000 	.word	0x40010000

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <HardFault_Handler+0x4>

080014c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <MemManage_Handler+0x4>

080014cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <BusFault_Handler+0x4>

080014d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <UsageFault_Handler+0x4>

080014d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001500:	f7fe ffee 	bl	80004e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <SystemInit+0x5c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a14      	ldr	r2, [pc, #80]	; (8001564 <SystemInit+0x5c>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <SystemInit+0x5c>)
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4911      	ldr	r1, [pc, #68]	; (8001564 <SystemInit+0x5c>)
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <SystemInit+0x60>)
 8001520:	4013      	ands	r3, r2
 8001522:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <SystemInit+0x5c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <SystemInit+0x5c>)
 800152a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800152e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001532:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <SystemInit+0x5c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <SystemInit+0x5c>)
 800153a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <SystemInit+0x5c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <SystemInit+0x5c>)
 8001546:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800154a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SystemInit+0x5c>)
 800154e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001552:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <SystemInit+0x64>)
 8001556:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800155a:	609a      	str	r2, [r3, #8]
#endif 
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	40021000 	.word	0x40021000
 8001568:	f8ff0000 	.word	0xf8ff0000
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001570:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001572:	e003      	b.n	800157c <LoopCopyDataInit>

08001574 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001576:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001578:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800157a:	3104      	adds	r1, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800157c:	480a      	ldr	r0, [pc, #40]	; (80015a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001580:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001582:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001584:	d3f6      	bcc.n	8001574 <CopyDataInit>
  ldr r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001588:	e002      	b.n	8001590 <LoopFillZerobss>

0800158a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800158c:	f842 3b04 	str.w	r3, [r2], #4

08001590 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001592:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001594:	d3f9      	bcc.n	800158a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001596:	f7ff ffb7 	bl	8001508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159a:	f000 f80f 	bl	80015bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800159e:	f7ff fdf7 	bl	8001190 <main>
  bx lr
 80015a2:	4770      	bx	lr
  ldr r3, =_sidata
 80015a4:	0800166c 	.word	0x0800166c
  ldr r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80015b0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80015b4:	2000002c 	.word	0x2000002c

080015b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC1_2_IRQHandler>
	...

080015bc <__libc_init_array>:
 80015bc:	b570      	push	{r4, r5, r6, lr}
 80015be:	2500      	movs	r5, #0
 80015c0:	4e0c      	ldr	r6, [pc, #48]	; (80015f4 <__libc_init_array+0x38>)
 80015c2:	4c0d      	ldr	r4, [pc, #52]	; (80015f8 <__libc_init_array+0x3c>)
 80015c4:	1ba4      	subs	r4, r4, r6
 80015c6:	10a4      	asrs	r4, r4, #2
 80015c8:	42a5      	cmp	r5, r4
 80015ca:	d109      	bne.n	80015e0 <__libc_init_array+0x24>
 80015cc:	f000 f822 	bl	8001614 <_init>
 80015d0:	2500      	movs	r5, #0
 80015d2:	4e0a      	ldr	r6, [pc, #40]	; (80015fc <__libc_init_array+0x40>)
 80015d4:	4c0a      	ldr	r4, [pc, #40]	; (8001600 <__libc_init_array+0x44>)
 80015d6:	1ba4      	subs	r4, r4, r6
 80015d8:	10a4      	asrs	r4, r4, #2
 80015da:	42a5      	cmp	r5, r4
 80015dc:	d105      	bne.n	80015ea <__libc_init_array+0x2e>
 80015de:	bd70      	pop	{r4, r5, r6, pc}
 80015e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015e4:	4798      	blx	r3
 80015e6:	3501      	adds	r5, #1
 80015e8:	e7ee      	b.n	80015c8 <__libc_init_array+0xc>
 80015ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015ee:	4798      	blx	r3
 80015f0:	3501      	adds	r5, #1
 80015f2:	e7f2      	b.n	80015da <__libc_init_array+0x1e>
 80015f4:	08001664 	.word	0x08001664
 80015f8:	08001664 	.word	0x08001664
 80015fc:	08001664 	.word	0x08001664
 8001600:	08001668 	.word	0x08001668

08001604 <memset>:
 8001604:	4603      	mov	r3, r0
 8001606:	4402      	add	r2, r0
 8001608:	4293      	cmp	r3, r2
 800160a:	d100      	bne.n	800160e <memset+0xa>
 800160c:	4770      	bx	lr
 800160e:	f803 1b01 	strb.w	r1, [r3], #1
 8001612:	e7f9      	b.n	8001608 <memset+0x4>

08001614 <_init>:
 8001614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001616:	bf00      	nop
 8001618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161a:	bc08      	pop	{r3}
 800161c:	469e      	mov	lr, r3
 800161e:	4770      	bx	lr

08001620 <_fini>:
 8001620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001622:	bf00      	nop
 8001624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001626:	bc08      	pop	{r3}
 8001628:	469e      	mov	lr, r3
 800162a:	4770      	bx	lr
