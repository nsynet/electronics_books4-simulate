
4.1-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001630  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800173c  0800173c  0001173c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001760  08001760  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001760  08001760  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001760  08001760  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001760  08001760  00011760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001764  08001764  00011764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001774  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001774  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084f8  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001716  00000000  00000000  0002852d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004a8  00000000  00000000  00029c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000410  00000000  00000000  0002a0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001497a  00000000  00000000  0002a500  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000053f9  00000000  00000000  0003ee7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ad73  00000000  00000000  00044273  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aefe6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001108  00000000  00000000  000af064  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001724 	.word	0x08001724

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001724 	.word	0x08001724

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f929 	bl	80003b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 f966 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f933 	bl	8000402 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f909 	bl	80003ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da0b      	bge.n	80002e4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	490c      	ldr	r1, [pc, #48]	; (8000304 <NVIC_SetPriority+0x4c>)
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f003 030f 	and.w	r3, r3, #15
 80002d8:	3b04      	subs	r3, #4
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e2:	e009      	b.n	80002f8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <NVIC_SetPriority+0x50>)
 80002ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ee:	0112      	lsls	r2, r2, #4
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	440b      	add	r3, r1
 80002f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	e000e100 	.word	0xe000e100

0800030c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800030c:	b480      	push	{r7}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	f1c3 0307 	rsb	r3, r3, #7
 8000326:	2b04      	cmp	r3, #4
 8000328:	bf28      	it	cs
 800032a:	2304      	movcs	r3, #4
 800032c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3304      	adds	r3, #4
 8000332:	2b06      	cmp	r3, #6
 8000334:	d902      	bls.n	800033c <NVIC_EncodePriority+0x30>
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3b03      	subs	r3, #3
 800033a:	e000      	b.n	800033e <NVIC_EncodePriority+0x32>
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	f04f 32ff 	mov.w	r2, #4294967295
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
 800034a:	43da      	mvns	r2, r3
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	401a      	ands	r2, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000354:	f04f 31ff 	mov.w	r1, #4294967295
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	43d9      	mvns	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	4313      	orrs	r3, r2
         );
}
 8000366:	4618      	mov	r0, r3
 8000368:	3724      	adds	r7, #36	; 0x24
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3b01      	subs	r3, #1
 800037c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000380:	d301      	bcc.n	8000386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000382:	2301      	movs	r3, #1
 8000384:	e00f      	b.n	80003a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <SysTick_Config+0x40>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3b01      	subs	r3, #1
 800038c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800038e:	210f      	movs	r1, #15
 8000390:	f04f 30ff 	mov.w	r0, #4294967295
 8000394:	f7ff ff90 	bl	80002b8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <SysTick_Config+0x40>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <SysTick_Config+0x40>)
 80003a0:	2207      	movs	r2, #7
 80003a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	e000e010 	.word	0xe000e010

080003b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff49 	bl	8000254 <NVIC_SetPriorityGrouping>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b086      	sub	sp, #24
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	4603      	mov	r3, r0
 80003d2:	60b9      	str	r1, [r7, #8]
 80003d4:	607a      	str	r2, [r7, #4]
 80003d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003dc:	f7ff ff5e 	bl	800029c <NVIC_GetPriorityGrouping>
 80003e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	6978      	ldr	r0, [r7, #20]
 80003e8:	f7ff ff90 	bl	800030c <NVIC_EncodePriority>
 80003ec:	4602      	mov	r2, r0
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff5f 	bl	80002b8 <NVIC_SetPriority>
}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ffb0 	bl	8000370 <SysTick_Config>
 8000410:	4603      	mov	r3, r0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000424:	2300      	movs	r3, #0
 8000426:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f003 0301 	and.w	r3, r3, #1
 8000430:	2b00      	cmp	r3, #0
 8000432:	f000 8087 	beq.w	8000544 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000436:	4b92      	ldr	r3, [pc, #584]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	f003 030c 	and.w	r3, r3, #12
 800043e:	2b04      	cmp	r3, #4
 8000440:	d00c      	beq.n	800045c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000442:	4b8f      	ldr	r3, [pc, #572]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	f003 030c 	and.w	r3, r3, #12
 800044a:	2b08      	cmp	r3, #8
 800044c:	d112      	bne.n	8000474 <HAL_RCC_OscConfig+0x58>
 800044e:	4b8c      	ldr	r3, [pc, #560]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800045a:	d10b      	bne.n	8000474 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800045c:	4b88      	ldr	r3, [pc, #544]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000464:	2b00      	cmp	r3, #0
 8000466:	d06c      	beq.n	8000542 <HAL_RCC_OscConfig+0x126>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d168      	bne.n	8000542 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000470:	2301      	movs	r3, #1
 8000472:	e22d      	b.n	80008d0 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800047c:	d106      	bne.n	800048c <HAL_RCC_OscConfig+0x70>
 800047e:	4b80      	ldr	r3, [pc, #512]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a7f      	ldr	r2, [pc, #508]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 8000484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000488:	6013      	str	r3, [r2, #0]
 800048a:	e02e      	b.n	80004ea <HAL_RCC_OscConfig+0xce>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d10c      	bne.n	80004ae <HAL_RCC_OscConfig+0x92>
 8000494:	4b7a      	ldr	r3, [pc, #488]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a79      	ldr	r2, [pc, #484]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 800049a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800049e:	6013      	str	r3, [r2, #0]
 80004a0:	4b77      	ldr	r3, [pc, #476]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a76      	ldr	r2, [pc, #472]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 80004a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004aa:	6013      	str	r3, [r2, #0]
 80004ac:	e01d      	b.n	80004ea <HAL_RCC_OscConfig+0xce>
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80004b6:	d10c      	bne.n	80004d2 <HAL_RCC_OscConfig+0xb6>
 80004b8:	4b71      	ldr	r3, [pc, #452]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a70      	ldr	r2, [pc, #448]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 80004be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004c2:	6013      	str	r3, [r2, #0]
 80004c4:	4b6e      	ldr	r3, [pc, #440]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a6d      	ldr	r2, [pc, #436]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 80004ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004ce:	6013      	str	r3, [r2, #0]
 80004d0:	e00b      	b.n	80004ea <HAL_RCC_OscConfig+0xce>
 80004d2:	4b6b      	ldr	r3, [pc, #428]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a6a      	ldr	r2, [pc, #424]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 80004d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004dc:	6013      	str	r3, [r2, #0]
 80004de:	4b68      	ldr	r3, [pc, #416]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a67      	ldr	r2, [pc, #412]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 80004e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004e8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d013      	beq.n	800051a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80004f2:	f7ff fe83 	bl	80001fc <HAL_GetTick>
 80004f6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80004f8:	e008      	b.n	800050c <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80004fa:	f7ff fe7f 	bl	80001fc <HAL_GetTick>
 80004fe:	4602      	mov	r2, r0
 8000500:	693b      	ldr	r3, [r7, #16]
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	2b64      	cmp	r3, #100	; 0x64
 8000506:	d901      	bls.n	800050c <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000508:	2303      	movs	r3, #3
 800050a:	e1e1      	b.n	80008d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800050c:	4b5c      	ldr	r3, [pc, #368]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0f0      	beq.n	80004fa <HAL_RCC_OscConfig+0xde>
 8000518:	e014      	b.n	8000544 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800051a:	f7ff fe6f 	bl	80001fc <HAL_GetTick>
 800051e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000520:	e008      	b.n	8000534 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000522:	f7ff fe6b 	bl	80001fc <HAL_GetTick>
 8000526:	4602      	mov	r2, r0
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	2b64      	cmp	r3, #100	; 0x64
 800052e:	d901      	bls.n	8000534 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000530:	2303      	movs	r3, #3
 8000532:	e1cd      	b.n	80008d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000534:	4b52      	ldr	r3, [pc, #328]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800053c:	2b00      	cmp	r3, #0
 800053e:	d1f0      	bne.n	8000522 <HAL_RCC_OscConfig+0x106>
 8000540:	e000      	b.n	8000544 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000542:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f003 0302 	and.w	r3, r3, #2
 800054c:	2b00      	cmp	r3, #0
 800054e:	d063      	beq.n	8000618 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000550:	4b4b      	ldr	r3, [pc, #300]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f003 030c 	and.w	r3, r3, #12
 8000558:	2b00      	cmp	r3, #0
 800055a:	d00b      	beq.n	8000574 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800055c:	4b48      	ldr	r3, [pc, #288]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	f003 030c 	and.w	r3, r3, #12
 8000564:	2b08      	cmp	r3, #8
 8000566:	d11c      	bne.n	80005a2 <HAL_RCC_OscConfig+0x186>
 8000568:	4b45      	ldr	r3, [pc, #276]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000570:	2b00      	cmp	r3, #0
 8000572:	d116      	bne.n	80005a2 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000574:	4b42      	ldr	r3, [pc, #264]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f003 0302 	and.w	r3, r3, #2
 800057c:	2b00      	cmp	r3, #0
 800057e:	d005      	beq.n	800058c <HAL_RCC_OscConfig+0x170>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	691b      	ldr	r3, [r3, #16]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d001      	beq.n	800058c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000588:	2301      	movs	r3, #1
 800058a:	e1a1      	b.n	80008d0 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800058c:	4b3c      	ldr	r3, [pc, #240]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	00db      	lsls	r3, r3, #3
 800059a:	4939      	ldr	r1, [pc, #228]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 800059c:	4313      	orrs	r3, r2
 800059e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005a0:	e03a      	b.n	8000618 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	691b      	ldr	r3, [r3, #16]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d020      	beq.n	80005ec <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80005aa:	4b36      	ldr	r3, [pc, #216]	; (8000684 <HAL_RCC_OscConfig+0x268>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005b0:	f7ff fe24 	bl	80001fc <HAL_GetTick>
 80005b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005b6:	e008      	b.n	80005ca <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005b8:	f7ff fe20 	bl	80001fc <HAL_GetTick>
 80005bc:	4602      	mov	r2, r0
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d901      	bls.n	80005ca <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80005c6:	2303      	movs	r3, #3
 80005c8:	e182      	b.n	80008d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005ca:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f0      	beq.n	80005b8 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005d6:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	4926      	ldr	r1, [pc, #152]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 80005e6:	4313      	orrs	r3, r2
 80005e8:	600b      	str	r3, [r1, #0]
 80005ea:	e015      	b.n	8000618 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80005ec:	4b25      	ldr	r3, [pc, #148]	; (8000684 <HAL_RCC_OscConfig+0x268>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005f2:	f7ff fe03 	bl	80001fc <HAL_GetTick>
 80005f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005f8:	e008      	b.n	800060c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005fa:	f7ff fdff 	bl	80001fc <HAL_GetTick>
 80005fe:	4602      	mov	r2, r0
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	2b02      	cmp	r3, #2
 8000606:	d901      	bls.n	800060c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000608:	2303      	movs	r3, #3
 800060a:	e161      	b.n	80008d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800060c:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f003 0302 	and.w	r3, r3, #2
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1f0      	bne.n	80005fa <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f003 0308 	and.w	r3, r3, #8
 8000620:	2b00      	cmp	r3, #0
 8000622:	d039      	beq.n	8000698 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d019      	beq.n	8000660 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800062c:	4b16      	ldr	r3, [pc, #88]	; (8000688 <HAL_RCC_OscConfig+0x26c>)
 800062e:	2201      	movs	r2, #1
 8000630:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000632:	f7ff fde3 	bl	80001fc <HAL_GetTick>
 8000636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000638:	e008      	b.n	800064c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800063a:	f7ff fddf 	bl	80001fc <HAL_GetTick>
 800063e:	4602      	mov	r2, r0
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	2b02      	cmp	r3, #2
 8000646:	d901      	bls.n	800064c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000648:	2303      	movs	r3, #3
 800064a:	e141      	b.n	80008d0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <HAL_RCC_OscConfig+0x264>)
 800064e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000650:	f003 0302 	and.w	r3, r3, #2
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0f0      	beq.n	800063a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f000 fab1 	bl	8000bc0 <RCC_Delay>
 800065e:	e01b      	b.n	8000698 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <HAL_RCC_OscConfig+0x26c>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000666:	f7ff fdc9 	bl	80001fc <HAL_GetTick>
 800066a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800066c:	e00e      	b.n	800068c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800066e:	f7ff fdc5 	bl	80001fc <HAL_GetTick>
 8000672:	4602      	mov	r2, r0
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	2b02      	cmp	r3, #2
 800067a:	d907      	bls.n	800068c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 800067c:	2303      	movs	r3, #3
 800067e:	e127      	b.n	80008d0 <HAL_RCC_OscConfig+0x4b4>
 8000680:	40021000 	.word	0x40021000
 8000684:	42420000 	.word	0x42420000
 8000688:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800068c:	4b92      	ldr	r3, [pc, #584]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 800068e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000690:	f003 0302 	and.w	r3, r3, #2
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1ea      	bne.n	800066e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	f000 80a6 	beq.w	80007f2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80006a6:	2300      	movs	r3, #0
 80006a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006aa:	4b8b      	ldr	r3, [pc, #556]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d10d      	bne.n	80006d2 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	4b88      	ldr	r3, [pc, #544]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	4a87      	ldr	r2, [pc, #540]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 80006bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c0:	61d3      	str	r3, [r2, #28]
 80006c2:	4b85      	ldr	r3, [pc, #532]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80006ce:	2301      	movs	r3, #1
 80006d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006d2:	4b82      	ldr	r3, [pc, #520]	; (80008dc <HAL_RCC_OscConfig+0x4c0>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d118      	bne.n	8000710 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006de:	4b7f      	ldr	r3, [pc, #508]	; (80008dc <HAL_RCC_OscConfig+0x4c0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a7e      	ldr	r2, [pc, #504]	; (80008dc <HAL_RCC_OscConfig+0x4c0>)
 80006e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80006ea:	f7ff fd87 	bl	80001fc <HAL_GetTick>
 80006ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006f0:	e008      	b.n	8000704 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006f2:	f7ff fd83 	bl	80001fc <HAL_GetTick>
 80006f6:	4602      	mov	r2, r0
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	2b64      	cmp	r3, #100	; 0x64
 80006fe:	d901      	bls.n	8000704 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000700:	2303      	movs	r3, #3
 8000702:	e0e5      	b.n	80008d0 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000704:	4b75      	ldr	r3, [pc, #468]	; (80008dc <HAL_RCC_OscConfig+0x4c0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800070c:	2b00      	cmp	r3, #0
 800070e:	d0f0      	beq.n	80006f2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d106      	bne.n	8000726 <HAL_RCC_OscConfig+0x30a>
 8000718:	4b6f      	ldr	r3, [pc, #444]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 800071a:	6a1b      	ldr	r3, [r3, #32]
 800071c:	4a6e      	ldr	r2, [pc, #440]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	6213      	str	r3, [r2, #32]
 8000724:	e02d      	b.n	8000782 <HAL_RCC_OscConfig+0x366>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d10c      	bne.n	8000748 <HAL_RCC_OscConfig+0x32c>
 800072e:	4b6a      	ldr	r3, [pc, #424]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 8000730:	6a1b      	ldr	r3, [r3, #32]
 8000732:	4a69      	ldr	r2, [pc, #420]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 8000734:	f023 0301 	bic.w	r3, r3, #1
 8000738:	6213      	str	r3, [r2, #32]
 800073a:	4b67      	ldr	r3, [pc, #412]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 800073c:	6a1b      	ldr	r3, [r3, #32]
 800073e:	4a66      	ldr	r2, [pc, #408]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 8000740:	f023 0304 	bic.w	r3, r3, #4
 8000744:	6213      	str	r3, [r2, #32]
 8000746:	e01c      	b.n	8000782 <HAL_RCC_OscConfig+0x366>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	2b05      	cmp	r3, #5
 800074e:	d10c      	bne.n	800076a <HAL_RCC_OscConfig+0x34e>
 8000750:	4b61      	ldr	r3, [pc, #388]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 8000752:	6a1b      	ldr	r3, [r3, #32]
 8000754:	4a60      	ldr	r2, [pc, #384]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 8000756:	f043 0304 	orr.w	r3, r3, #4
 800075a:	6213      	str	r3, [r2, #32]
 800075c:	4b5e      	ldr	r3, [pc, #376]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 800075e:	6a1b      	ldr	r3, [r3, #32]
 8000760:	4a5d      	ldr	r2, [pc, #372]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 8000762:	f043 0301 	orr.w	r3, r3, #1
 8000766:	6213      	str	r3, [r2, #32]
 8000768:	e00b      	b.n	8000782 <HAL_RCC_OscConfig+0x366>
 800076a:	4b5b      	ldr	r3, [pc, #364]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 800076c:	6a1b      	ldr	r3, [r3, #32]
 800076e:	4a5a      	ldr	r2, [pc, #360]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 8000770:	f023 0301 	bic.w	r3, r3, #1
 8000774:	6213      	str	r3, [r2, #32]
 8000776:	4b58      	ldr	r3, [pc, #352]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 8000778:	6a1b      	ldr	r3, [r3, #32]
 800077a:	4a57      	ldr	r2, [pc, #348]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 800077c:	f023 0304 	bic.w	r3, r3, #4
 8000780:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d015      	beq.n	80007b6 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800078a:	f7ff fd37 	bl	80001fc <HAL_GetTick>
 800078e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000790:	e00a      	b.n	80007a8 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000792:	f7ff fd33 	bl	80001fc <HAL_GetTick>
 8000796:	4602      	mov	r2, r0
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	f241 3288 	movw	r2, #5000	; 0x1388
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d901      	bls.n	80007a8 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80007a4:	2303      	movs	r3, #3
 80007a6:	e093      	b.n	80008d0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007a8:	4b4b      	ldr	r3, [pc, #300]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 80007aa:	6a1b      	ldr	r3, [r3, #32]
 80007ac:	f003 0302 	and.w	r3, r3, #2
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d0ee      	beq.n	8000792 <HAL_RCC_OscConfig+0x376>
 80007b4:	e014      	b.n	80007e0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007b6:	f7ff fd21 	bl	80001fc <HAL_GetTick>
 80007ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007bc:	e00a      	b.n	80007d4 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007be:	f7ff fd1d 	bl	80001fc <HAL_GetTick>
 80007c2:	4602      	mov	r2, r0
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d901      	bls.n	80007d4 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80007d0:	2303      	movs	r3, #3
 80007d2:	e07d      	b.n	80008d0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007d4:	4b40      	ldr	r3, [pc, #256]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 80007d6:	6a1b      	ldr	r3, [r3, #32]
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1ee      	bne.n	80007be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80007e0:	7dfb      	ldrb	r3, [r7, #23]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d105      	bne.n	80007f2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80007e6:	4b3c      	ldr	r3, [pc, #240]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	4a3b      	ldr	r2, [pc, #236]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 80007ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d069      	beq.n	80008ce <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007fa:	4b37      	ldr	r3, [pc, #220]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	f003 030c 	and.w	r3, r3, #12
 8000802:	2b08      	cmp	r3, #8
 8000804:	d061      	beq.n	80008ca <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	2b02      	cmp	r3, #2
 800080c:	d146      	bne.n	800089c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800080e:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <HAL_RCC_OscConfig+0x4c4>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000814:	f7ff fcf2 	bl	80001fc <HAL_GetTick>
 8000818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800081a:	e008      	b.n	800082e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800081c:	f7ff fcee 	bl	80001fc <HAL_GetTick>
 8000820:	4602      	mov	r2, r0
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	2b02      	cmp	r3, #2
 8000828:	d901      	bls.n	800082e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800082a:	2303      	movs	r3, #3
 800082c:	e050      	b.n	80008d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800082e:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1f0      	bne.n	800081c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6a1b      	ldr	r3, [r3, #32]
 800083e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000842:	d108      	bne.n	8000856 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000844:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	4921      	ldr	r1, [pc, #132]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 8000852:	4313      	orrs	r3, r2
 8000854:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6a19      	ldr	r1, [r3, #32]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000866:	430b      	orrs	r3, r1
 8000868:	491b      	ldr	r1, [pc, #108]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 800086a:	4313      	orrs	r3, r2
 800086c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <HAL_RCC_OscConfig+0x4c4>)
 8000870:	2201      	movs	r2, #1
 8000872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000874:	f7ff fcc2 	bl	80001fc <HAL_GetTick>
 8000878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800087a:	e008      	b.n	800088e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800087c:	f7ff fcbe 	bl	80001fc <HAL_GetTick>
 8000880:	4602      	mov	r2, r0
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	2b02      	cmp	r3, #2
 8000888:	d901      	bls.n	800088e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800088a:	2303      	movs	r3, #3
 800088c:	e020      	b.n	80008d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0f0      	beq.n	800087c <HAL_RCC_OscConfig+0x460>
 800089a:	e018      	b.n	80008ce <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <HAL_RCC_OscConfig+0x4c4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008a2:	f7ff fcab 	bl	80001fc <HAL_GetTick>
 80008a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008a8:	e008      	b.n	80008bc <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008aa:	f7ff fca7 	bl	80001fc <HAL_GetTick>
 80008ae:	4602      	mov	r2, r0
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d901      	bls.n	80008bc <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80008b8:	2303      	movs	r3, #3
 80008ba:	e009      	b.n	80008d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_RCC_OscConfig+0x4bc>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1f0      	bne.n	80008aa <HAL_RCC_OscConfig+0x48e>
 80008c8:	e001      	b.n	80008ce <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e000      	b.n	80008d0 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80008ce:	2300      	movs	r3, #0
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40007000 	.word	0x40007000
 80008e0:	42420060 	.word	0x42420060

080008e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008f2:	4b7e      	ldr	r3, [pc, #504]	; (8000aec <HAL_RCC_ClockConfig+0x208>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	683a      	ldr	r2, [r7, #0]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d910      	bls.n	8000922 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000900:	4b7a      	ldr	r3, [pc, #488]	; (8000aec <HAL_RCC_ClockConfig+0x208>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f023 0207 	bic.w	r2, r3, #7
 8000908:	4978      	ldr	r1, [pc, #480]	; (8000aec <HAL_RCC_ClockConfig+0x208>)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	4313      	orrs	r3, r2
 800090e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000910:	4b76      	ldr	r3, [pc, #472]	; (8000aec <HAL_RCC_ClockConfig+0x208>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f003 0307 	and.w	r3, r3, #7
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	429a      	cmp	r2, r3
 800091c:	d001      	beq.n	8000922 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e0e0      	b.n	8000ae4 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	2b00      	cmp	r3, #0
 800092c:	d020      	beq.n	8000970 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	2b00      	cmp	r3, #0
 8000938:	d005      	beq.n	8000946 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800093a:	4b6d      	ldr	r3, [pc, #436]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	4a6c      	ldr	r2, [pc, #432]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 8000940:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000944:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	2b00      	cmp	r3, #0
 8000950:	d005      	beq.n	800095e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000952:	4b67      	ldr	r3, [pc, #412]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	4a66      	ldr	r2, [pc, #408]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 8000958:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800095c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800095e:	4b64      	ldr	r3, [pc, #400]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	4961      	ldr	r1, [pc, #388]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 800096c:	4313      	orrs	r3, r2
 800096e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	2b00      	cmp	r3, #0
 800097a:	d06a      	beq.n	8000a52 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d107      	bne.n	8000994 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000984:	4b5a      	ldr	r3, [pc, #360]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d115      	bne.n	80009bc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	e0a7      	b.n	8000ae4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d107      	bne.n	80009ac <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800099c:	4b54      	ldr	r3, [pc, #336]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d109      	bne.n	80009bc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	e09b      	b.n	8000ae4 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ac:	4b50      	ldr	r3, [pc, #320]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f003 0302 	and.w	r3, r3, #2
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d101      	bne.n	80009bc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	e093      	b.n	8000ae4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009bc:	4b4c      	ldr	r3, [pc, #304]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f023 0203 	bic.w	r2, r3, #3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	4949      	ldr	r1, [pc, #292]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 80009ca:	4313      	orrs	r3, r2
 80009cc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80009ce:	f7ff fc15 	bl	80001fc <HAL_GetTick>
 80009d2:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d112      	bne.n	8000a02 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009dc:	e00a      	b.n	80009f4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009de:	f7ff fc0d 	bl	80001fc <HAL_GetTick>
 80009e2:	4602      	mov	r2, r0
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d901      	bls.n	80009f4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80009f0:	2303      	movs	r3, #3
 80009f2:	e077      	b.n	8000ae4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009f4:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f003 030c 	and.w	r3, r3, #12
 80009fc:	2b04      	cmp	r3, #4
 80009fe:	d1ee      	bne.n	80009de <HAL_RCC_ClockConfig+0xfa>
 8000a00:	e027      	b.n	8000a52 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d11d      	bne.n	8000a46 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a0a:	e00a      	b.n	8000a22 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a0c:	f7ff fbf6 	bl	80001fc <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d901      	bls.n	8000a22 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	e060      	b.n	8000ae4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a22:	4b33      	ldr	r3, [pc, #204]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f003 030c 	and.w	r3, r3, #12
 8000a2a:	2b08      	cmp	r3, #8
 8000a2c:	d1ee      	bne.n	8000a0c <HAL_RCC_ClockConfig+0x128>
 8000a2e:	e010      	b.n	8000a52 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a30:	f7ff fbe4 	bl	80001fc <HAL_GetTick>
 8000a34:	4602      	mov	r2, r0
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d901      	bls.n	8000a46 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000a42:	2303      	movs	r3, #3
 8000a44:	e04e      	b.n	8000ae4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a46:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f003 030c 	and.w	r3, r3, #12
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1ee      	bne.n	8000a30 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a52:	4b26      	ldr	r3, [pc, #152]	; (8000aec <HAL_RCC_ClockConfig+0x208>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d210      	bcs.n	8000a82 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a60:	4b22      	ldr	r3, [pc, #136]	; (8000aec <HAL_RCC_ClockConfig+0x208>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f023 0207 	bic.w	r2, r3, #7
 8000a68:	4920      	ldr	r1, [pc, #128]	; (8000aec <HAL_RCC_ClockConfig+0x208>)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <HAL_RCC_ClockConfig+0x208>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f003 0307 	and.w	r3, r3, #7
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d001      	beq.n	8000a82 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e030      	b.n	8000ae4 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d008      	beq.n	8000aa0 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	4915      	ldr	r1, [pc, #84]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f003 0308 	and.w	r3, r3, #8
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d009      	beq.n	8000ac0 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	490d      	ldr	r1, [pc, #52]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 8000abc:	4313      	orrs	r3, r2
 8000abe:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ac0:	f000 f81c 	bl	8000afc <HAL_RCC_GetSysClockFreq>
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_RCC_ClockConfig+0x20c>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	091b      	lsrs	r3, r3, #4
 8000acc:	f003 030f 	and.w	r3, r3, #15
 8000ad0:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_RCC_ClockConfig+0x210>)
 8000ad2:	5cd3      	ldrb	r3, [r2, r3]
 8000ad4:	fa21 f303 	lsr.w	r3, r1, r3
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_RCC_ClockConfig+0x214>)
 8000ada:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f7ff fb4b 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40022000 	.word	0x40022000
 8000af0:	40021000 	.word	0x40021000
 8000af4:	08001750 	.word	0x08001750
 8000af8:	20000008 	.word	0x20000008

08000afc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000afc:	b490      	push	{r4, r7}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b02:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <HAL_RCC_GetSysClockFreq+0xb0>)
 8000b04:	1d3c      	adds	r4, r7, #4
 8000b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000b0c:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000b26:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f003 030c 	and.w	r3, r3, #12
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d002      	beq.n	8000b3c <HAL_RCC_GetSysClockFreq+0x40>
 8000b36:	2b08      	cmp	r3, #8
 8000b38:	d003      	beq.n	8000b42 <HAL_RCC_GetSysClockFreq+0x46>
 8000b3a:	e02d      	b.n	8000b98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000b3e:	623b      	str	r3, [r7, #32]
      break;
 8000b40:	e02d      	b.n	8000b9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	0c9b      	lsrs	r3, r3, #18
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b4e:	4413      	add	r3, r2
 8000b50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000b54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d013      	beq.n	8000b88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	0c5b      	lsrs	r3, r3, #17
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b6e:	4413      	add	r3, r2
 8000b70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000b74:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000b7a:	fb02 f203 	mul.w	r2, r2, r3
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
 8000b86:	e004      	b.n	8000b92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8000b8c:	fb02 f303 	mul.w	r3, r2, r3
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	623b      	str	r3, [r7, #32]
      break;
 8000b96:	e002      	b.n	8000b9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000b9a:	623b      	str	r3, [r7, #32]
      break;
 8000b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000b9e:	6a3b      	ldr	r3, [r7, #32]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc90      	pop	{r4, r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	0800173c 	.word	0x0800173c
 8000bb0:	0800174c 	.word	0x0800174c
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	007a1200 	.word	0x007a1200
 8000bbc:	003d0900 	.word	0x003d0900

08000bc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <RCC_Delay+0x34>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <RCC_Delay+0x38>)
 8000bce:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd2:	0a5b      	lsrs	r3, r3, #9
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	fb02 f303 	mul.w	r3, r2, r3
 8000bda:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000bdc:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	1e5a      	subs	r2, r3, #1
 8000be2:	60fa      	str	r2, [r7, #12]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1f9      	bne.n	8000bdc <RCC_Delay+0x1c>
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	10624dd3 	.word	0x10624dd3

08000bfc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <LL_EXTI_EnableIT_0_31+0x20>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4904      	ldr	r1, [pc, #16]	; (8000c1c <LL_EXTI_EnableIT_0_31+0x20>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	600b      	str	r3, [r1, #0]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40010400 	.word	0x40010400

08000c20 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <LL_EXTI_DisableIT_0_31+0x20>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	4903      	ldr	r1, [pc, #12]	; (8000c40 <LL_EXTI_DisableIT_0_31+0x20>)
 8000c32:	4013      	ands	r3, r2
 8000c34:	600b      	str	r3, [r1, #0]
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	40010400 	.word	0x40010400

08000c44 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	4904      	ldr	r1, [pc, #16]	; (8000c64 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	604b      	str	r3, [r1, #4]

}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40010400 	.word	0x40010400

08000c68 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <LL_EXTI_DisableEvent_0_31+0x20>)
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	4903      	ldr	r1, [pc, #12]	; (8000c88 <LL_EXTI_DisableEvent_0_31+0x20>)
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	604b      	str	r3, [r1, #4]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	40010400 	.word	0x40010400

08000c8c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	4904      	ldr	r1, [pc, #16]	; (8000cac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	608b      	str	r3, [r1, #8]

}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40010400 	.word	0x40010400

08000cb0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	4903      	ldr	r1, [pc, #12]	; (8000cd0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	608b      	str	r3, [r1, #8]

}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	40010400 	.word	0x40010400

08000cd4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	4904      	ldr	r1, [pc, #16]	; (8000cf4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	60cb      	str	r3, [r1, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40010400 	.word	0x40010400

08000cf8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	4903      	ldr	r1, [pc, #12]	; (8000d18 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	60cb      	str	r3, [r1, #12]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	40010400 	.word	0x40010400

08000d1c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	791b      	ldrb	r3, [r3, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d060      	beq.n	8000df2 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d067      	beq.n	8000e08 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	795b      	ldrb	r3, [r3, #5]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d00e      	beq.n	8000d5e <LL_EXTI_Init+0x42>
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d017      	beq.n	8000d74 <LL_EXTI_Init+0x58>
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d120      	bne.n	8000d8a <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff8b 	bl	8000c68 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff50 	bl	8000bfc <LL_EXTI_EnableIT_0_31>
          break;
 8000d5c:	e018      	b.n	8000d90 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff5c 	bl	8000c20 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff69 	bl	8000c44 <LL_EXTI_EnableEvent_0_31>
          break;
 8000d72:	e00d      	b.n	8000d90 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff3f 	bl	8000bfc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff5e 	bl	8000c44 <LL_EXTI_EnableEvent_0_31>
          break;
 8000d88:	e002      	b.n	8000d90 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73fb      	strb	r3, [r7, #15]
          break;
 8000d8e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	799b      	ldrb	r3, [r3, #6]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d037      	beq.n	8000e08 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	799b      	ldrb	r3, [r3, #6]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d00e      	beq.n	8000dbe <LL_EXTI_Init+0xa2>
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	d017      	beq.n	8000dd4 <LL_EXTI_Init+0xb8>
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d120      	bne.n	8000dea <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ffa3 	bl	8000cf8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff68 	bl	8000c8c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000dbc:	e025      	b.n	8000e0a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff74 	bl	8000cb0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff81 	bl	8000cd4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000dd2:	e01a      	b.n	8000e0a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff57 	bl	8000c8c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff76 	bl	8000cd4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000de8:	e00f      	b.n	8000e0a <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8000dea:	2300      	movs	r3, #0
 8000dec:	73fb      	strb	r3, [r7, #15]
            break;
 8000dee:	bf00      	nop
 8000df0:	e00b      	b.n	8000e0a <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff12 	bl	8000c20 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff31 	bl	8000c68 <LL_EXTI_DisableEvent_0_31>
 8000e06:	e000      	b.n	8000e0a <LL_EXTI_Init+0xee>
      }
 8000e08:	bf00      	nop
  }
  return status;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000e14:	b490      	push	{r4, r7}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	461a      	mov	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	0e1b      	lsrs	r3, r3, #24
 8000e28:	4413      	add	r3, r2
 8000e2a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000e2c:	6822      	ldr	r2, [r4, #0]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	fa93 f3a3 	rbit	r3, r3
 8000e38:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	fab3 f383 	clz	r3, r3
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	210f      	movs	r1, #15
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	fa93 f3a3 	rbit	r3, r3
 8000e56:	61bb      	str	r3, [r7, #24]
  return(result);
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fab3 f383 	clz	r3, r3
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	4313      	orrs	r3, r2
 8000e68:	6023      	str	r3, [r4, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc90      	pop	{r4, r7}
 8000e72:	4770      	bx	lr

08000e74 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000e74:	b490      	push	{r4, r7}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	461a      	mov	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	0e1b      	lsrs	r3, r3, #24
 8000e88:	4413      	add	r3, r2
 8000e8a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000e8c:	6822      	ldr	r2, [r4, #0]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	fa93 f3a3 	rbit	r3, r3
 8000e98:	613b      	str	r3, [r7, #16]
  return(result);
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	fab3 f383 	clz	r3, r3
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	401a      	ands	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	fa93 f3a3 	rbit	r3, r3
 8000eb6:	61bb      	str	r3, [r7, #24]
  return(result);
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fab3 f383 	clz	r3, r3
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8000eca:	bf00      	nop
 8000ecc:	3720      	adds	r7, #32
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc90      	pop	{r4, r7}
 8000ed2:	4770      	bx	lr

08000ed4 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8000ed4:	b490      	push	{r4, r7}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	0e1b      	lsrs	r3, r3, #24
 8000ee8:	4413      	add	r3, r2
 8000eea:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000eec:	6822      	ldr	r2, [r4, #0]
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	fa93 f3a3 	rbit	r3, r3
 8000ef8:	613b      	str	r3, [r7, #16]
  return(result);
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	fab3 f383 	clz	r3, r3
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	2104      	movs	r1, #4
 8000f04:	fa01 f303 	lsl.w	r3, r1, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	fa93 f3a3 	rbit	r3, r3
 8000f16:	61bb      	str	r3, [r7, #24]
  return(result);
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fab3 f383 	clz	r3, r3
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8000f2a:	bf00      	nop
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc90      	pop	{r4, r7}
 8000f32:	4770      	bx	lr

08000f34 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	68da      	ldr	r2, [r3, #12]
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	0a1b      	lsrs	r3, r3, #8
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	0a1b      	lsrs	r3, r3, #8
 8000f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	fa93 f3a3 	rbit	r3, r3
 8000f58:	613b      	str	r3, [r7, #16]
  return(result);
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	fab3 f383 	clz	r3, r3
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	431a      	orrs	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	60da      	str	r2, [r3, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	371c      	adds	r7, #28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr

08000f76 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b088      	sub	sp, #32
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	0c1b      	lsrs	r3, r3, #16
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	fa93 f3a3 	rbit	r3, r3
 8000f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8000f96:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8000f98:	fab3 f383 	clz	r3, r3
 8000f9c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0U)
 8000f9e:	e040      	b.n	8001022 <LL_GPIO_Init+0xac>
  {
    /* skip if bit is not set */
    if ((pinmask & (1U << pinpos)) != 0U)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	409a      	lsls	r2, r3
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d036      	beq.n	800101c <LL_GPIO_Init+0xa6>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	2b07      	cmp	r3, #7
 8000fb2:	d806      	bhi.n	8000fc2 <LL_GPIO_Init+0x4c>
      {
        currentpin = (0x00000101U << pinpos);
 8000fb4:	f240 1201 	movw	r2, #257	; 0x101
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	e008      	b.n	8000fd4 <LL_GPIO_Init+0x5e>
      }
      else
      {
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b08      	subs	r3, #8
 8000fc6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fd2:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	69b9      	ldr	r1, [r7, #24]
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff19 	bl	8000e14 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	69b9      	ldr	r1, [r7, #24]
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffa2 	bl	8000f34 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d003      	beq.n	8001000 <LL_GPIO_Init+0x8a>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b09      	cmp	r3, #9
 8000ffe:	d10d      	bne.n	800101c <LL_GPIO_Init+0xa6>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	461a      	mov	r2, r3
 8001006:	69b9      	ldr	r1, [r7, #24]
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff33 	bl	8000e74 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	461a      	mov	r2, r3
 8001014:	69b9      	ldr	r1, [r7, #24]
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ff5c 	bl	8000ed4 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	3301      	adds	r3, #1
 8001020:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0U)
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	fa22 f303 	lsr.w	r3, r2, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1b8      	bne.n	8000fa0 <LL_GPIO_Init+0x2a>
  }
  return (SUCCESS);
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <NVIC_GetPriorityGrouping>:
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EnableIRQ>:
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4906      	ldr	r1, [pc, #24]	; (8001080 <NVIC_EnableIRQ+0x2c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100

08001084 <NVIC_SetPriority>:
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	da0b      	bge.n	80010b0 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <NVIC_SetPriority+0x4c>)
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 030f 	and.w	r3, r3, #15
 80010a4:	3b04      	subs	r3, #4
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	761a      	strb	r2, [r3, #24]
}
 80010ae:	e009      	b.n	80010c4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4907      	ldr	r1, [pc, #28]	; (80010d4 <NVIC_SetPriority+0x50>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	0112      	lsls	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	440b      	add	r3, r1
 80010c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00
 80010d4:	e000e100 	.word	0xe000e100

080010d8 <NVIC_EncodePriority>:
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <LL_GPIO_SetPinMode>:
{
 800113c:	b490      	push	{r4, r7}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	461a      	mov	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	0e1b      	lsrs	r3, r3, #24
 8001150:	4413      	add	r3, r2
 8001152:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001154:	6822      	ldr	r2, [r4, #0]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	613b      	str	r3, [r7, #16]
  return(result);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	fab3 f383 	clz	r3, r3
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	210f      	movs	r1, #15
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	401a      	ands	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	fa93 f3a3 	rbit	r3, r3
 800117e:	61bb      	str	r3, [r7, #24]
  return(result);
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	6023      	str	r3, [r4, #0]
}
 8001192:	bf00      	nop
 8001194:	3720      	adds	r7, #32
 8001196:	46bd      	mov	sp, r7
 8001198:	bc90      	pop	{r4, r7}
 800119a:	4770      	bx	lr

0800119c <LL_GPIO_WriteOutputPort>:
  * @param  GPIOx GPIO Port
  * @param  PortValue Level value for each pin of the port
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_WriteOutputPort(GPIO_TypeDef *GPIOx, uint32_t PortValue)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, PortValue);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	60da      	str	r2, [r3, #12]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr

080011b6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	0a1b      	lsrs	r3, r3, #8
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	611a      	str	r2, [r3, #16]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80011de:	4a11      	ldr	r2, [pc, #68]	; (8001224 <LL_GPIO_AF_SetEXTISource+0x50>)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	3302      	adds	r3, #2
 80011e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	0c1b      	lsrs	r3, r3, #16
 80011ee:	43db      	mvns	r3, r3
 80011f0:	ea02 0103 	and.w	r1, r2, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	0c1b      	lsrs	r3, r3, #16
 80011f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	fa93 f3a3 	rbit	r3, r3
 8001200:	60bb      	str	r3, [r7, #8]
  return(result);
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	fab3 f383 	clz	r3, r3
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	409a      	lsls	r2, r3
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <LL_GPIO_AF_SetEXTISource+0x50>)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	430a      	orrs	r2, r1
 8001214:	3302      	adds	r3, #2
 8001216:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	40010000 	.word	0x40010000

08001228 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001232:	699a      	ldr	r2, [r3, #24]
 8001234:	4907      	ldr	r1, [pc, #28]	; (8001254 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4313      	orrs	r3, r2
 800123a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <LL_APB2_GRP1_EnableClock+0x2c>)
 800123e:	699a      	ldr	r2, [r3, #24]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4013      	ands	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001246:	68fb      	ldr	r3, [r7, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125e:	f7fe ff75 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001262:	f000 f827 	bl	80012b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001266:	f000 f861 	bl	800132c <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(i=0;i<8;i++)
 800126a:	2300      	movs	r3, #0
 800126c:	71fb      	strb	r3, [r7, #7]
 800126e:	e019      	b.n	80012a4 <main+0x4c>
	  {
		  LL_GPIO_WriteOutputPort(GPIOC,(0xfe<<i)|(0xfe>>(8-i)));
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	22fe      	movs	r2, #254	; 0xfe
 8001276:	409a      	lsls	r2, r3
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	f1c3 0308 	rsb	r3, r3, #8
 8001280:	21fe      	movs	r1, #254	; 0xfe
 8001282:	fa41 f303 	asr.w	r3, r1, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	4619      	mov	r1, r3
 800128a:	4809      	ldr	r0, [pc, #36]	; (80012b0 <main+0x58>)
 800128c:	f7ff ff86 	bl	800119c <LL_GPIO_WriteOutputPort>
		  HAL_Delay(500);
 8001290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001294:	f7fe ffbc 	bl	8000210 <HAL_Delay>
	  for(i=0;i<8;i++)
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b07      	cmp	r3, #7
 80012aa:	dde1      	ble.n	8001270 <main+0x18>
 80012ac:	e7dd      	b.n	800126a <main+0x12>
 80012ae:	bf00      	nop
 80012b0:	40011000 	.word	0x40011000

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b090      	sub	sp, #64	; 0x40
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 0318 	add.w	r3, r7, #24
 80012be:	2228      	movs	r2, #40	; 0x28
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fa26 	bl	8001714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012da:	2301      	movs	r3, #1
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012de:	2310      	movs	r3, #16
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e6:	f107 0318 	add.w	r3, r7, #24
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f896 	bl	800041c <HAL_RCC_OscConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012f6:	f000 f899 	bl	800142c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fa:	230f      	movs	r3, #15
 80012fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fae6 	bl	80008e4 <HAL_RCC_ClockConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800131e:	f000 f885 	bl	800142c <Error_Handler>
  }
}
 8001322:	bf00      	nop
 8001324:	3740      	adds	r7, #64	; 0x40
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001332:	f107 0318 	add.w	r3, r7, #24
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 800134a:	2010      	movs	r0, #16
 800134c:	f7ff ff6c 	bl	8001228 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001350:	2008      	movs	r0, #8
 8001352:	f7ff ff69 	bl	8001228 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3 
 8001356:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800135a:	4832      	ldr	r0, [pc, #200]	; (8001424 <MX_GPIO_Init+0xf8>)
 800135c:	f7ff ff2b 	bl	80011b6 <LL_GPIO_SetOutputPin>
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3 
 8001360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001364:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001366:	2301      	movs	r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800136a:	2302      	movs	r3, #2
 800136c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	4619      	mov	r1, r3
 8001376:	482b      	ldr	r0, [pc, #172]	; (8001424 <MX_GPIO_Init+0xf8>)
 8001378:	f7ff fdfd 	bl	8000f76 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE0);
 800137c:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001380:	2001      	movs	r0, #1
 8001382:	f7ff ff27 	bl	80011d4 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE1);
 8001386:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 800138a:	2001      	movs	r0, #1
 800138c:	f7ff ff22 	bl	80011d4 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001390:	2301      	movs	r3, #1
 8001392:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001394:	2301      	movs	r3, #1
 8001396:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001398:	2300      	movs	r3, #0
 800139a:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800139c:	2302      	movs	r3, #2
 800139e:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fcb9 	bl	8000d1c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013ae:	2301      	movs	r3, #1
 80013b0:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80013b2:	2300      	movs	r3, #0
 80013b4:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80013b6:	2302      	movs	r3, #2
 80013b8:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80013ba:	f107 0318 	add.w	r3, r7, #24
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fcac 	bl	8000d1c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_0, LL_GPIO_MODE_FLOATING);
 80013c4:	2204      	movs	r2, #4
 80013c6:	f240 1101 	movw	r1, #257	; 0x101
 80013ca:	4817      	ldr	r0, [pc, #92]	; (8001428 <MX_GPIO_Init+0xfc>)
 80013cc:	f7ff feb6 	bl	800113c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_1, LL_GPIO_MODE_FLOATING);
 80013d0:	2204      	movs	r2, #4
 80013d2:	f240 2102 	movw	r1, #514	; 0x202
 80013d6:	4814      	ldr	r0, [pc, #80]	; (8001428 <MX_GPIO_Init+0xfc>)
 80013d8:	f7ff feb0 	bl	800113c <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 80013dc:	f7ff fe2c 	bl	8001038 <NVIC_GetPriorityGrouping>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2202      	movs	r2, #2
 80013e4:	2102      	movs	r1, #2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fe76 	bl	80010d8 <NVIC_EncodePriority>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4619      	mov	r1, r3
 80013f0:	2006      	movs	r0, #6
 80013f2:	f7ff fe47 	bl	8001084 <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 80013f6:	2006      	movs	r0, #6
 80013f8:	f7ff fe2c 	bl	8001054 <NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 1));
 80013fc:	f7ff fe1c 	bl	8001038 <NVIC_GetPriorityGrouping>
 8001400:	4603      	mov	r3, r0
 8001402:	2201      	movs	r2, #1
 8001404:	2101      	movs	r1, #1
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fe66 	bl	80010d8 <NVIC_EncodePriority>
 800140c:	4603      	mov	r3, r0
 800140e:	4619      	mov	r1, r3
 8001410:	2007      	movs	r0, #7
 8001412:	f7ff fe37 	bl	8001084 <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8001416:	2007      	movs	r0, #7
 8001418:	f7ff fe1c 	bl	8001054 <NVIC_EnableIRQ>

}
 800141c:	bf00      	nop
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40011000 	.word	0x40011000
 8001428:	40010c00 	.word	0x40010c00

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <HAL_MspInit+0x60>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	4a15      	ldr	r2, [pc, #84]	; (8001498 <HAL_MspInit+0x60>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6193      	str	r3, [r2, #24]
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <HAL_MspInit+0x60>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_MspInit+0x60>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <HAL_MspInit+0x60>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	61d3      	str	r3, [r2, #28]
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_MspInit+0x60>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800146e:	2005      	movs	r0, #5
 8001470:	f7fe ffa0 	bl	80003b4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_MspInit+0x64>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4a04      	ldr	r2, [pc, #16]	; (800149c <HAL_MspInit+0x64>)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000
 800149c:	40010000 	.word	0x40010000

080014a0 <LL_GPIO_WriteOutputPort>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, PortValue);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	60da      	str	r2, [r3, #12]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
	...

080014bc <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4013      	ands	r3, r2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	bf0c      	ite	eq
 80014d2:	2301      	moveq	r3, #1
 80014d4:	2300      	movne	r3, #0
 80014d6:	b2db      	uxtb	r3, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40010400 	.word	0x40010400

080014e8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80014f0:	4a03      	ldr	r2, [pc, #12]	; (8001500 <LL_EXTI_ClearFlag_0_31+0x18>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6153      	str	r3, [r2, #20]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	40010400 	.word	0x40010400

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <HardFault_Handler+0x4>

08001516 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <MemManage_Handler+0x4>

0800151c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <BusFault_Handler+0x4>

08001522 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <UsageFault_Handler+0x4>

08001528 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001550:	f7fe fe42 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800155e:	2001      	movs	r0, #1
 8001560:	f7ff ffac 	bl	80014bc <LL_EXTI_IsActiveFlag_0_31>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d01f      	beq.n	80015aa <EXTI0_IRQHandler+0x52>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 800156a:	2001      	movs	r0, #1
 800156c:	f7ff ffbc 	bl	80014e8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_0 */
    int8_t i;
    for(i=0;i<3;i++)
 8001570:	2300      	movs	r3, #0
 8001572:	71fb      	strb	r3, [r7, #7]
 8001574:	e015      	b.n	80015a2 <EXTI0_IRQHandler+0x4a>
    {
    	LL_GPIO_WriteOutputPort(GPIOC,0xff);HAL_Delay(500);
 8001576:	21ff      	movs	r1, #255	; 0xff
 8001578:	480e      	ldr	r0, [pc, #56]	; (80015b4 <EXTI0_IRQHandler+0x5c>)
 800157a:	f7ff ff91 	bl	80014a0 <LL_GPIO_WriteOutputPort>
 800157e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001582:	f7fe fe45 	bl	8000210 <HAL_Delay>
    	LL_GPIO_WriteOutputPort(GPIOC,0   );HAL_Delay(500);
 8001586:	2100      	movs	r1, #0
 8001588:	480a      	ldr	r0, [pc, #40]	; (80015b4 <EXTI0_IRQHandler+0x5c>)
 800158a:	f7ff ff89 	bl	80014a0 <LL_GPIO_WriteOutputPort>
 800158e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001592:	f7fe fe3d 	bl	8000210 <HAL_Delay>
    for(i=0;i<3;i++)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	3301      	adds	r3, #1
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	dde5      	ble.n	8001576 <EXTI0_IRQHandler+0x1e>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40011000 	.word	0x40011000

080015b8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80015be:	2002      	movs	r0, #2
 80015c0:	f7ff ff7c 	bl	80014bc <LL_EXTI_IsActiveFlag_0_31>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d01f      	beq.n	800160a <EXTI1_IRQHandler+0x52>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80015ca:	2002      	movs	r0, #2
 80015cc:	f7ff ff8c 	bl	80014e8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_1 */
    int8_t i;
    for(i=0;i<3;i++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	71fb      	strb	r3, [r7, #7]
 80015d4:	e015      	b.n	8001602 <EXTI1_IRQHandler+0x4a>
    {
    	LL_GPIO_WriteOutputPort(GPIOC,0x55);HAL_Delay(500);
 80015d6:	2155      	movs	r1, #85	; 0x55
 80015d8:	480e      	ldr	r0, [pc, #56]	; (8001614 <EXTI1_IRQHandler+0x5c>)
 80015da:	f7ff ff61 	bl	80014a0 <LL_GPIO_WriteOutputPort>
 80015de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e2:	f7fe fe15 	bl	8000210 <HAL_Delay>
    	LL_GPIO_WriteOutputPort(GPIOC,0xaa);HAL_Delay(500);
 80015e6:	21aa      	movs	r1, #170	; 0xaa
 80015e8:	480a      	ldr	r0, [pc, #40]	; (8001614 <EXTI1_IRQHandler+0x5c>)
 80015ea:	f7ff ff59 	bl	80014a0 <LL_GPIO_WriteOutputPort>
 80015ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015f2:	f7fe fe0d 	bl	8000210 <HAL_Delay>
    for(i=0;i<3;i++)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	3301      	adds	r3, #1
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	71fb      	strb	r3, [r7, #7]
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	2b02      	cmp	r3, #2
 8001608:	dde5      	ble.n	80015d6 <EXTI1_IRQHandler+0x1e>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40011000 	.word	0x40011000

08001618 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <SystemInit+0x5c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a14      	ldr	r2, [pc, #80]	; (8001674 <SystemInit+0x5c>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <SystemInit+0x5c>)
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	4911      	ldr	r1, [pc, #68]	; (8001674 <SystemInit+0x5c>)
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <SystemInit+0x60>)
 8001630:	4013      	ands	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <SystemInit+0x5c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <SystemInit+0x5c>)
 800163a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800163e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001642:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <SystemInit+0x5c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SystemInit+0x5c>)
 800164a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <SystemInit+0x5c>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	4a07      	ldr	r2, [pc, #28]	; (8001674 <SystemInit+0x5c>)
 8001656:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800165a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SystemInit+0x5c>)
 800165e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001662:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <SystemInit+0x64>)
 8001666:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800166a:	609a      	str	r2, [r3, #8]
#endif 
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	40021000 	.word	0x40021000
 8001678:	f8ff0000 	.word	0xf8ff0000
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001680:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001682:	e003      	b.n	800168c <LoopCopyDataInit>

08001684 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001686:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001688:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800168a:	3104      	adds	r1, #4

0800168c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800168c:	480a      	ldr	r0, [pc, #40]	; (80016b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001690:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001692:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001694:	d3f6      	bcc.n	8001684 <CopyDataInit>
  ldr r2, =_sbss
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001698:	e002      	b.n	80016a0 <LoopFillZerobss>

0800169a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800169c:	f842 3b04 	str.w	r3, [r2], #4

080016a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80016a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016a4:	d3f9      	bcc.n	800169a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016a6:	f7ff ffb7 	bl	8001618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016aa:	f000 f80f 	bl	80016cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ae:	f7ff fdd3 	bl	8001258 <main>
  bx lr
 80016b2:	4770      	bx	lr
  ldr r3, =_sidata
 80016b4:	08001768 	.word	0x08001768
  ldr r0, =_sdata
 80016b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80016c0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80016c4:	2000002c 	.word	0x2000002c

080016c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC1_2_IRQHandler>
	...

080016cc <__libc_init_array>:
 80016cc:	b570      	push	{r4, r5, r6, lr}
 80016ce:	2500      	movs	r5, #0
 80016d0:	4e0c      	ldr	r6, [pc, #48]	; (8001704 <__libc_init_array+0x38>)
 80016d2:	4c0d      	ldr	r4, [pc, #52]	; (8001708 <__libc_init_array+0x3c>)
 80016d4:	1ba4      	subs	r4, r4, r6
 80016d6:	10a4      	asrs	r4, r4, #2
 80016d8:	42a5      	cmp	r5, r4
 80016da:	d109      	bne.n	80016f0 <__libc_init_array+0x24>
 80016dc:	f000 f822 	bl	8001724 <_init>
 80016e0:	2500      	movs	r5, #0
 80016e2:	4e0a      	ldr	r6, [pc, #40]	; (800170c <__libc_init_array+0x40>)
 80016e4:	4c0a      	ldr	r4, [pc, #40]	; (8001710 <__libc_init_array+0x44>)
 80016e6:	1ba4      	subs	r4, r4, r6
 80016e8:	10a4      	asrs	r4, r4, #2
 80016ea:	42a5      	cmp	r5, r4
 80016ec:	d105      	bne.n	80016fa <__libc_init_array+0x2e>
 80016ee:	bd70      	pop	{r4, r5, r6, pc}
 80016f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016f4:	4798      	blx	r3
 80016f6:	3501      	adds	r5, #1
 80016f8:	e7ee      	b.n	80016d8 <__libc_init_array+0xc>
 80016fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016fe:	4798      	blx	r3
 8001700:	3501      	adds	r5, #1
 8001702:	e7f2      	b.n	80016ea <__libc_init_array+0x1e>
 8001704:	08001760 	.word	0x08001760
 8001708:	08001760 	.word	0x08001760
 800170c:	08001760 	.word	0x08001760
 8001710:	08001764 	.word	0x08001764

08001714 <memset>:
 8001714:	4603      	mov	r3, r0
 8001716:	4402      	add	r2, r0
 8001718:	4293      	cmp	r3, r2
 800171a:	d100      	bne.n	800171e <memset+0xa>
 800171c:	4770      	bx	lr
 800171e:	f803 1b01 	strb.w	r1, [r3], #1
 8001722:	e7f9      	b.n	8001718 <memset+0x4>

08001724 <_init>:
 8001724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001726:	bf00      	nop
 8001728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800172a:	bc08      	pop	{r3}
 800172c:	469e      	mov	lr, r3
 800172e:	4770      	bx	lr

08001730 <_fini>:
 8001730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001732:	bf00      	nop
 8001734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001736:	bc08      	pop	{r3}
 8001738:	469e      	mov	lr, r3
 800173a:	4770      	bx	lr
