
4.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000190c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001a18  08001a18  00011a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a3c  08001a3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a3c  08001a3c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a3c  08001a3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a3c  08001a3c  00011a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a40  08001a40  00011a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  08001a50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08001a50  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1c4  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000194c  00000000  00000000  0002c1f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a8  00000000  00000000  0002db48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000800  00000000  00000000  0002e3f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001548f  00000000  00000000  0002ebf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007043  00000000  00000000  0004407f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000718a6  00000000  00000000  0004b0c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bc968  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002350  00000000  00000000  000bc9e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a00 	.word	0x08001a00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001a00 	.word	0x08001a00

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f91f 	bl	80003a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fb38 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f937 	bl	800040a <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f8ff 	bl	80003b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000002c 	.word	0x2000002c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000002c 	.word	0x2000002c

08000210 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	f003 021f 	and.w	r2, r3, #31
 8000284:	4906      	ldr	r1, [pc, #24]	; (80002a0 <NVIC_EnableIRQ+0x2c>)
 8000286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028a:	095b      	lsrs	r3, r3, #5
 800028c:	2001      	movs	r0, #1
 800028e:	fa00 f202 	lsl.w	r2, r0, r2
 8000292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	6039      	str	r1, [r7, #0]
 80002ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da0b      	bge.n	80002d0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	490c      	ldr	r1, [pc, #48]	; (80002f0 <NVIC_SetPriority+0x4c>)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f003 030f 	and.w	r3, r3, #15
 80002c4:	3b04      	subs	r3, #4
 80002c6:	0112      	lsls	r2, r2, #4
 80002c8:	b2d2      	uxtb	r2, r2
 80002ca:	440b      	add	r3, r1
 80002cc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002ce:	e009      	b.n	80002e4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	4907      	ldr	r1, [pc, #28]	; (80002f4 <NVIC_SetPriority+0x50>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00
 80002f4:	e000e100 	.word	0xe000e100

080002f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b089      	sub	sp, #36	; 0x24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f003 0307 	and.w	r3, r3, #7
 800030a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800030c:	69fb      	ldr	r3, [r7, #28]
 800030e:	f1c3 0307 	rsb	r3, r3, #7
 8000312:	2b04      	cmp	r3, #4
 8000314:	bf28      	it	cs
 8000316:	2304      	movcs	r3, #4
 8000318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800031a:	69fb      	ldr	r3, [r7, #28]
 800031c:	3304      	adds	r3, #4
 800031e:	2b06      	cmp	r3, #6
 8000320:	d902      	bls.n	8000328 <NVIC_EncodePriority+0x30>
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3b03      	subs	r3, #3
 8000326:	e000      	b.n	800032a <NVIC_EncodePriority+0x32>
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800032c:	f04f 32ff 	mov.w	r2, #4294967295
 8000330:	69bb      	ldr	r3, [r7, #24]
 8000332:	fa02 f303 	lsl.w	r3, r2, r3
 8000336:	43da      	mvns	r2, r3
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	401a      	ands	r2, r3
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000340:	f04f 31ff 	mov.w	r1, #4294967295
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	43d9      	mvns	r1, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	4313      	orrs	r3, r2
         );
}
 8000352:	4618      	mov	r0, r3
 8000354:	3724      	adds	r7, #36	; 0x24
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3b01      	subs	r3, #1
 8000368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800036c:	d301      	bcc.n	8000372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800036e:	2301      	movs	r3, #1
 8000370:	e00f      	b.n	8000392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <SysTick_Config+0x40>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3b01      	subs	r3, #1
 8000378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800037a:	210f      	movs	r1, #15
 800037c:	f04f 30ff 	mov.w	r0, #4294967295
 8000380:	f7ff ff90 	bl	80002a4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <SysTick_Config+0x40>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <SysTick_Config+0x40>)
 800038c:	2207      	movs	r2, #7
 800038e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000390:	2300      	movs	r3, #0
}
 8000392:	4618      	mov	r0, r3
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	e000e010 	.word	0xe000e010

080003a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f7ff ff31 	bl	8000210 <NVIC_SetPriorityGrouping>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b086      	sub	sp, #24
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	4603      	mov	r3, r0
 80003be:	60b9      	str	r1, [r7, #8]
 80003c0:	607a      	str	r2, [r7, #4]
 80003c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003c8:	f7ff ff46 	bl	8000258 <NVIC_GetPriorityGrouping>
 80003cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	68b9      	ldr	r1, [r7, #8]
 80003d2:	6978      	ldr	r0, [r7, #20]
 80003d4:	f7ff ff90 	bl	80002f8 <NVIC_EncodePriority>
 80003d8:	4602      	mov	r2, r0
 80003da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003de:	4611      	mov	r1, r2
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ff5f 	bl	80002a4 <NVIC_SetPriority>
}
 80003e6:	bf00      	nop
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	4603      	mov	r3, r0
 80003f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80003f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ff39 	bl	8000274 <NVIC_EnableIRQ>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f7ff ffa2 	bl	800035c <SysTick_Config>
 8000418:	4603      	mov	r3, r0
}
 800041a:	4618      	mov	r0, r3
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800042c:	2300      	movs	r3, #0
 800042e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f003 0301 	and.w	r3, r3, #1
 8000438:	2b00      	cmp	r3, #0
 800043a:	f000 8087 	beq.w	800054c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800043e:	4b92      	ldr	r3, [pc, #584]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	f003 030c 	and.w	r3, r3, #12
 8000446:	2b04      	cmp	r3, #4
 8000448:	d00c      	beq.n	8000464 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800044a:	4b8f      	ldr	r3, [pc, #572]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	f003 030c 	and.w	r3, r3, #12
 8000452:	2b08      	cmp	r3, #8
 8000454:	d112      	bne.n	800047c <HAL_RCC_OscConfig+0x58>
 8000456:	4b8c      	ldr	r3, [pc, #560]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800045e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000462:	d10b      	bne.n	800047c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000464:	4b88      	ldr	r3, [pc, #544]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800046c:	2b00      	cmp	r3, #0
 800046e:	d06c      	beq.n	800054a <HAL_RCC_OscConfig+0x126>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d168      	bne.n	800054a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000478:	2301      	movs	r3, #1
 800047a:	e22d      	b.n	80008d8 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000484:	d106      	bne.n	8000494 <HAL_RCC_OscConfig+0x70>
 8000486:	4b80      	ldr	r3, [pc, #512]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a7f      	ldr	r2, [pc, #508]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 800048c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000490:	6013      	str	r3, [r2, #0]
 8000492:	e02e      	b.n	80004f2 <HAL_RCC_OscConfig+0xce>
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d10c      	bne.n	80004b6 <HAL_RCC_OscConfig+0x92>
 800049c:	4b7a      	ldr	r3, [pc, #488]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a79      	ldr	r2, [pc, #484]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 80004a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004a6:	6013      	str	r3, [r2, #0]
 80004a8:	4b77      	ldr	r3, [pc, #476]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a76      	ldr	r2, [pc, #472]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 80004ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004b2:	6013      	str	r3, [r2, #0]
 80004b4:	e01d      	b.n	80004f2 <HAL_RCC_OscConfig+0xce>
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80004be:	d10c      	bne.n	80004da <HAL_RCC_OscConfig+0xb6>
 80004c0:	4b71      	ldr	r3, [pc, #452]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a70      	ldr	r2, [pc, #448]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 80004c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004ca:	6013      	str	r3, [r2, #0]
 80004cc:	4b6e      	ldr	r3, [pc, #440]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a6d      	ldr	r2, [pc, #436]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 80004d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004d6:	6013      	str	r3, [r2, #0]
 80004d8:	e00b      	b.n	80004f2 <HAL_RCC_OscConfig+0xce>
 80004da:	4b6b      	ldr	r3, [pc, #428]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a6a      	ldr	r2, [pc, #424]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 80004e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004e4:	6013      	str	r3, [r2, #0]
 80004e6:	4b68      	ldr	r3, [pc, #416]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a67      	ldr	r2, [pc, #412]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 80004ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004f0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d013      	beq.n	8000522 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80004fa:	f7ff fe7f 	bl	80001fc <HAL_GetTick>
 80004fe:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000500:	e008      	b.n	8000514 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000502:	f7ff fe7b 	bl	80001fc <HAL_GetTick>
 8000506:	4602      	mov	r2, r0
 8000508:	693b      	ldr	r3, [r7, #16]
 800050a:	1ad3      	subs	r3, r2, r3
 800050c:	2b64      	cmp	r3, #100	; 0x64
 800050e:	d901      	bls.n	8000514 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000510:	2303      	movs	r3, #3
 8000512:	e1e1      	b.n	80008d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000514:	4b5c      	ldr	r3, [pc, #368]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051c:	2b00      	cmp	r3, #0
 800051e:	d0f0      	beq.n	8000502 <HAL_RCC_OscConfig+0xde>
 8000520:	e014      	b.n	800054c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000522:	f7ff fe6b 	bl	80001fc <HAL_GetTick>
 8000526:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000528:	e008      	b.n	800053c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800052a:	f7ff fe67 	bl	80001fc <HAL_GetTick>
 800052e:	4602      	mov	r2, r0
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	2b64      	cmp	r3, #100	; 0x64
 8000536:	d901      	bls.n	800053c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000538:	2303      	movs	r3, #3
 800053a:	e1cd      	b.n	80008d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800053c:	4b52      	ldr	r3, [pc, #328]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000544:	2b00      	cmp	r3, #0
 8000546:	d1f0      	bne.n	800052a <HAL_RCC_OscConfig+0x106>
 8000548:	e000      	b.n	800054c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800054a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f003 0302 	and.w	r3, r3, #2
 8000554:	2b00      	cmp	r3, #0
 8000556:	d063      	beq.n	8000620 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000558:	4b4b      	ldr	r3, [pc, #300]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	f003 030c 	and.w	r3, r3, #12
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00b      	beq.n	800057c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000564:	4b48      	ldr	r3, [pc, #288]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	f003 030c 	and.w	r3, r3, #12
 800056c:	2b08      	cmp	r3, #8
 800056e:	d11c      	bne.n	80005aa <HAL_RCC_OscConfig+0x186>
 8000570:	4b45      	ldr	r3, [pc, #276]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000578:	2b00      	cmp	r3, #0
 800057a:	d116      	bne.n	80005aa <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800057c:	4b42      	ldr	r3, [pc, #264]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f003 0302 	and.w	r3, r3, #2
 8000584:	2b00      	cmp	r3, #0
 8000586:	d005      	beq.n	8000594 <HAL_RCC_OscConfig+0x170>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	691b      	ldr	r3, [r3, #16]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d001      	beq.n	8000594 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000590:	2301      	movs	r3, #1
 8000592:	e1a1      	b.n	80008d8 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000594:	4b3c      	ldr	r3, [pc, #240]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	695b      	ldr	r3, [r3, #20]
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	4939      	ldr	r1, [pc, #228]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 80005a4:	4313      	orrs	r3, r2
 80005a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005a8:	e03a      	b.n	8000620 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	691b      	ldr	r3, [r3, #16]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d020      	beq.n	80005f4 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80005b2:	4b36      	ldr	r3, [pc, #216]	; (800068c <HAL_RCC_OscConfig+0x268>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005b8:	f7ff fe20 	bl	80001fc <HAL_GetTick>
 80005bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005be:	e008      	b.n	80005d2 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005c0:	f7ff fe1c 	bl	80001fc <HAL_GetTick>
 80005c4:	4602      	mov	r2, r0
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	2b02      	cmp	r3, #2
 80005cc:	d901      	bls.n	80005d2 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80005ce:	2303      	movs	r3, #3
 80005d0:	e182      	b.n	80008d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005d2:	4b2d      	ldr	r3, [pc, #180]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0f0      	beq.n	80005c0 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005de:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	4926      	ldr	r1, [pc, #152]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 80005ee:	4313      	orrs	r3, r2
 80005f0:	600b      	str	r3, [r1, #0]
 80005f2:	e015      	b.n	8000620 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <HAL_RCC_OscConfig+0x268>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005fa:	f7ff fdff 	bl	80001fc <HAL_GetTick>
 80005fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000600:	e008      	b.n	8000614 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000602:	f7ff fdfb 	bl	80001fc <HAL_GetTick>
 8000606:	4602      	mov	r2, r0
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	2b02      	cmp	r3, #2
 800060e:	d901      	bls.n	8000614 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000610:	2303      	movs	r3, #3
 8000612:	e161      	b.n	80008d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000614:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f003 0302 	and.w	r3, r3, #2
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1f0      	bne.n	8000602 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f003 0308 	and.w	r3, r3, #8
 8000628:	2b00      	cmp	r3, #0
 800062a:	d039      	beq.n	80006a0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d019      	beq.n	8000668 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <HAL_RCC_OscConfig+0x26c>)
 8000636:	2201      	movs	r2, #1
 8000638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800063a:	f7ff fddf 	bl	80001fc <HAL_GetTick>
 800063e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000640:	e008      	b.n	8000654 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000642:	f7ff fddb 	bl	80001fc <HAL_GetTick>
 8000646:	4602      	mov	r2, r0
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	2b02      	cmp	r3, #2
 800064e:	d901      	bls.n	8000654 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000650:	2303      	movs	r3, #3
 8000652:	e141      	b.n	80008d8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <HAL_RCC_OscConfig+0x264>)
 8000656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000658:	f003 0302 	and.w	r3, r3, #2
 800065c:	2b00      	cmp	r3, #0
 800065e:	d0f0      	beq.n	8000642 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000660:	2001      	movs	r0, #1
 8000662:	f000 fab1 	bl	8000bc8 <RCC_Delay>
 8000666:	e01b      	b.n	80006a0 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_RCC_OscConfig+0x26c>)
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800066e:	f7ff fdc5 	bl	80001fc <HAL_GetTick>
 8000672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000674:	e00e      	b.n	8000694 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000676:	f7ff fdc1 	bl	80001fc <HAL_GetTick>
 800067a:	4602      	mov	r2, r0
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	1ad3      	subs	r3, r2, r3
 8000680:	2b02      	cmp	r3, #2
 8000682:	d907      	bls.n	8000694 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000684:	2303      	movs	r3, #3
 8000686:	e127      	b.n	80008d8 <HAL_RCC_OscConfig+0x4b4>
 8000688:	40021000 	.word	0x40021000
 800068c:	42420000 	.word	0x42420000
 8000690:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000694:	4b92      	ldr	r3, [pc, #584]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 8000696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000698:	f003 0302 	and.w	r3, r3, #2
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1ea      	bne.n	8000676 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	f000 80a6 	beq.w	80007fa <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80006ae:	2300      	movs	r3, #0
 80006b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006b2:	4b8b      	ldr	r3, [pc, #556]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d10d      	bne.n	80006da <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b88      	ldr	r3, [pc, #544]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	4a87      	ldr	r2, [pc, #540]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	61d3      	str	r3, [r2, #28]
 80006ca:	4b85      	ldr	r3, [pc, #532]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80006d6:	2301      	movs	r3, #1
 80006d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006da:	4b82      	ldr	r3, [pc, #520]	; (80008e4 <HAL_RCC_OscConfig+0x4c0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d118      	bne.n	8000718 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006e6:	4b7f      	ldr	r3, [pc, #508]	; (80008e4 <HAL_RCC_OscConfig+0x4c0>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a7e      	ldr	r2, [pc, #504]	; (80008e4 <HAL_RCC_OscConfig+0x4c0>)
 80006ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80006f2:	f7ff fd83 	bl	80001fc <HAL_GetTick>
 80006f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006f8:	e008      	b.n	800070c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006fa:	f7ff fd7f 	bl	80001fc <HAL_GetTick>
 80006fe:	4602      	mov	r2, r0
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	2b64      	cmp	r3, #100	; 0x64
 8000706:	d901      	bls.n	800070c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000708:	2303      	movs	r3, #3
 800070a:	e0e5      	b.n	80008d8 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800070c:	4b75      	ldr	r3, [pc, #468]	; (80008e4 <HAL_RCC_OscConfig+0x4c0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0f0      	beq.n	80006fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d106      	bne.n	800072e <HAL_RCC_OscConfig+0x30a>
 8000720:	4b6f      	ldr	r3, [pc, #444]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 8000722:	6a1b      	ldr	r3, [r3, #32]
 8000724:	4a6e      	ldr	r2, [pc, #440]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 8000726:	f043 0301 	orr.w	r3, r3, #1
 800072a:	6213      	str	r3, [r2, #32]
 800072c:	e02d      	b.n	800078a <HAL_RCC_OscConfig+0x366>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d10c      	bne.n	8000750 <HAL_RCC_OscConfig+0x32c>
 8000736:	4b6a      	ldr	r3, [pc, #424]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 8000738:	6a1b      	ldr	r3, [r3, #32]
 800073a:	4a69      	ldr	r2, [pc, #420]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 800073c:	f023 0301 	bic.w	r3, r3, #1
 8000740:	6213      	str	r3, [r2, #32]
 8000742:	4b67      	ldr	r3, [pc, #412]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 8000744:	6a1b      	ldr	r3, [r3, #32]
 8000746:	4a66      	ldr	r2, [pc, #408]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 8000748:	f023 0304 	bic.w	r3, r3, #4
 800074c:	6213      	str	r3, [r2, #32]
 800074e:	e01c      	b.n	800078a <HAL_RCC_OscConfig+0x366>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	2b05      	cmp	r3, #5
 8000756:	d10c      	bne.n	8000772 <HAL_RCC_OscConfig+0x34e>
 8000758:	4b61      	ldr	r3, [pc, #388]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 800075a:	6a1b      	ldr	r3, [r3, #32]
 800075c:	4a60      	ldr	r2, [pc, #384]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 800075e:	f043 0304 	orr.w	r3, r3, #4
 8000762:	6213      	str	r3, [r2, #32]
 8000764:	4b5e      	ldr	r3, [pc, #376]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 8000766:	6a1b      	ldr	r3, [r3, #32]
 8000768:	4a5d      	ldr	r2, [pc, #372]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	6213      	str	r3, [r2, #32]
 8000770:	e00b      	b.n	800078a <HAL_RCC_OscConfig+0x366>
 8000772:	4b5b      	ldr	r3, [pc, #364]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 8000774:	6a1b      	ldr	r3, [r3, #32]
 8000776:	4a5a      	ldr	r2, [pc, #360]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 8000778:	f023 0301 	bic.w	r3, r3, #1
 800077c:	6213      	str	r3, [r2, #32]
 800077e:	4b58      	ldr	r3, [pc, #352]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 8000780:	6a1b      	ldr	r3, [r3, #32]
 8000782:	4a57      	ldr	r2, [pc, #348]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 8000784:	f023 0304 	bic.w	r3, r3, #4
 8000788:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d015      	beq.n	80007be <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000792:	f7ff fd33 	bl	80001fc <HAL_GetTick>
 8000796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000798:	e00a      	b.n	80007b0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800079a:	f7ff fd2f 	bl	80001fc <HAL_GetTick>
 800079e:	4602      	mov	r2, r0
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d901      	bls.n	80007b0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80007ac:	2303      	movs	r3, #3
 80007ae:	e093      	b.n	80008d8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007b0:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 80007b2:	6a1b      	ldr	r3, [r3, #32]
 80007b4:	f003 0302 	and.w	r3, r3, #2
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0ee      	beq.n	800079a <HAL_RCC_OscConfig+0x376>
 80007bc:	e014      	b.n	80007e8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007be:	f7ff fd1d 	bl	80001fc <HAL_GetTick>
 80007c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007c4:	e00a      	b.n	80007dc <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007c6:	f7ff fd19 	bl	80001fc <HAL_GetTick>
 80007ca:	4602      	mov	r2, r0
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d901      	bls.n	80007dc <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80007d8:	2303      	movs	r3, #3
 80007da:	e07d      	b.n	80008d8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007dc:	4b40      	ldr	r3, [pc, #256]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 80007de:	6a1b      	ldr	r3, [r3, #32]
 80007e0:	f003 0302 	and.w	r3, r3, #2
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1ee      	bne.n	80007c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80007e8:	7dfb      	ldrb	r3, [r7, #23]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d105      	bne.n	80007fa <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80007ee:	4b3c      	ldr	r3, [pc, #240]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	4a3b      	ldr	r2, [pc, #236]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 80007f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d069      	beq.n	80008d6 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000802:	4b37      	ldr	r3, [pc, #220]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	f003 030c 	and.w	r3, r3, #12
 800080a:	2b08      	cmp	r3, #8
 800080c:	d061      	beq.n	80008d2 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	2b02      	cmp	r3, #2
 8000814:	d146      	bne.n	80008a4 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <HAL_RCC_OscConfig+0x4c4>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800081c:	f7ff fcee 	bl	80001fc <HAL_GetTick>
 8000820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000822:	e008      	b.n	8000836 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000824:	f7ff fcea 	bl	80001fc <HAL_GetTick>
 8000828:	4602      	mov	r2, r0
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	2b02      	cmp	r3, #2
 8000830:	d901      	bls.n	8000836 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000832:	2303      	movs	r3, #3
 8000834:	e050      	b.n	80008d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000836:	4b2a      	ldr	r3, [pc, #168]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1f0      	bne.n	8000824 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6a1b      	ldr	r3, [r3, #32]
 8000846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800084a:	d108      	bne.n	800085e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800084c:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	4921      	ldr	r1, [pc, #132]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 800085a:	4313      	orrs	r3, r2
 800085c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6a19      	ldr	r1, [r3, #32]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800086e:	430b      	orrs	r3, r1
 8000870:	491b      	ldr	r1, [pc, #108]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 8000872:	4313      	orrs	r3, r2
 8000874:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <HAL_RCC_OscConfig+0x4c4>)
 8000878:	2201      	movs	r2, #1
 800087a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800087c:	f7ff fcbe 	bl	80001fc <HAL_GetTick>
 8000880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000882:	e008      	b.n	8000896 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000884:	f7ff fcba 	bl	80001fc <HAL_GetTick>
 8000888:	4602      	mov	r2, r0
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	2b02      	cmp	r3, #2
 8000890:	d901      	bls.n	8000896 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000892:	2303      	movs	r3, #3
 8000894:	e020      	b.n	80008d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d0f0      	beq.n	8000884 <HAL_RCC_OscConfig+0x460>
 80008a2:	e018      	b.n	80008d6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <HAL_RCC_OscConfig+0x4c4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008aa:	f7ff fca7 	bl	80001fc <HAL_GetTick>
 80008ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008b0:	e008      	b.n	80008c4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008b2:	f7ff fca3 	bl	80001fc <HAL_GetTick>
 80008b6:	4602      	mov	r2, r0
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d901      	bls.n	80008c4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80008c0:	2303      	movs	r3, #3
 80008c2:	e009      	b.n	80008d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_RCC_OscConfig+0x4bc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1f0      	bne.n	80008b2 <HAL_RCC_OscConfig+0x48e>
 80008d0:	e001      	b.n	80008d6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e000      	b.n	80008d8 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40007000 	.word	0x40007000
 80008e8:	42420060 	.word	0x42420060

080008ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008fa:	4b7e      	ldr	r3, [pc, #504]	; (8000af4 <HAL_RCC_ClockConfig+0x208>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	429a      	cmp	r2, r3
 8000906:	d910      	bls.n	800092a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000908:	4b7a      	ldr	r3, [pc, #488]	; (8000af4 <HAL_RCC_ClockConfig+0x208>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f023 0207 	bic.w	r2, r3, #7
 8000910:	4978      	ldr	r1, [pc, #480]	; (8000af4 <HAL_RCC_ClockConfig+0x208>)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	4313      	orrs	r3, r2
 8000916:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000918:	4b76      	ldr	r3, [pc, #472]	; (8000af4 <HAL_RCC_ClockConfig+0x208>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f003 0307 	and.w	r3, r3, #7
 8000920:	683a      	ldr	r2, [r7, #0]
 8000922:	429a      	cmp	r2, r3
 8000924:	d001      	beq.n	800092a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e0e0      	b.n	8000aec <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	2b00      	cmp	r3, #0
 8000934:	d020      	beq.n	8000978 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	2b00      	cmp	r3, #0
 8000940:	d005      	beq.n	800094e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000942:	4b6d      	ldr	r3, [pc, #436]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	4a6c      	ldr	r2, [pc, #432]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 8000948:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800094c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	2b00      	cmp	r3, #0
 8000958:	d005      	beq.n	8000966 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800095a:	4b67      	ldr	r3, [pc, #412]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	4a66      	ldr	r2, [pc, #408]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 8000960:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000964:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000966:	4b64      	ldr	r3, [pc, #400]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	4961      	ldr	r1, [pc, #388]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 8000974:	4313      	orrs	r3, r2
 8000976:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	2b00      	cmp	r3, #0
 8000982:	d06a      	beq.n	8000a5a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d107      	bne.n	800099c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800098c:	4b5a      	ldr	r3, [pc, #360]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d115      	bne.n	80009c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	e0a7      	b.n	8000aec <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d107      	bne.n	80009b4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009a4:	4b54      	ldr	r3, [pc, #336]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d109      	bne.n	80009c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80009b0:	2301      	movs	r3, #1
 80009b2:	e09b      	b.n	8000aec <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009b4:	4b50      	ldr	r3, [pc, #320]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f003 0302 	and.w	r3, r3, #2
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	e093      	b.n	8000aec <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009c4:	4b4c      	ldr	r3, [pc, #304]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f023 0203 	bic.w	r2, r3, #3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	4949      	ldr	r1, [pc, #292]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 80009d2:	4313      	orrs	r3, r2
 80009d4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80009d6:	f7ff fc11 	bl	80001fc <HAL_GetTick>
 80009da:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d112      	bne.n	8000a0a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009e4:	e00a      	b.n	80009fc <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009e6:	f7ff fc09 	bl	80001fc <HAL_GetTick>
 80009ea:	4602      	mov	r2, r0
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d901      	bls.n	80009fc <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80009f8:	2303      	movs	r3, #3
 80009fa:	e077      	b.n	8000aec <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009fc:	4b3e      	ldr	r3, [pc, #248]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 030c 	and.w	r3, r3, #12
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	d1ee      	bne.n	80009e6 <HAL_RCC_ClockConfig+0xfa>
 8000a08:	e027      	b.n	8000a5a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d11d      	bne.n	8000a4e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a12:	e00a      	b.n	8000a2a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a14:	f7ff fbf2 	bl	80001fc <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d901      	bls.n	8000a2a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000a26:	2303      	movs	r3, #3
 8000a28:	e060      	b.n	8000aec <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a2a:	4b33      	ldr	r3, [pc, #204]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f003 030c 	and.w	r3, r3, #12
 8000a32:	2b08      	cmp	r3, #8
 8000a34:	d1ee      	bne.n	8000a14 <HAL_RCC_ClockConfig+0x128>
 8000a36:	e010      	b.n	8000a5a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a38:	f7ff fbe0 	bl	80001fc <HAL_GetTick>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d901      	bls.n	8000a4e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	e04e      	b.n	8000aec <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a4e:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 030c 	and.w	r3, r3, #12
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1ee      	bne.n	8000a38 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a5a:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <HAL_RCC_ClockConfig+0x208>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	683a      	ldr	r2, [r7, #0]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d210      	bcs.n	8000a8a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <HAL_RCC_ClockConfig+0x208>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f023 0207 	bic.w	r2, r3, #7
 8000a70:	4920      	ldr	r1, [pc, #128]	; (8000af4 <HAL_RCC_ClockConfig+0x208>)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <HAL_RCC_ClockConfig+0x208>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f003 0307 	and.w	r3, r3, #7
 8000a80:	683a      	ldr	r2, [r7, #0]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d001      	beq.n	8000a8a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e030      	b.n	8000aec <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d008      	beq.n	8000aa8 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	4915      	ldr	r1, [pc, #84]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d009      	beq.n	8000ac8 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	691b      	ldr	r3, [r3, #16]
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	490d      	ldr	r1, [pc, #52]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ac8:	f000 f81c 	bl	8000b04 <HAL_RCC_GetSysClockFreq>
 8000acc:	4601      	mov	r1, r0
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_RCC_ClockConfig+0x20c>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	091b      	lsrs	r3, r3, #4
 8000ad4:	f003 030f 	and.w	r3, r3, #15
 8000ad8:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_RCC_ClockConfig+0x210>)
 8000ada:	5cd3      	ldrb	r3, [r2, r3]
 8000adc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ae0:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <HAL_RCC_ClockConfig+0x214>)
 8000ae2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f7ff fb47 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40022000 	.word	0x40022000
 8000af8:	40021000 	.word	0x40021000
 8000afc:	08001a2c 	.word	0x08001a2c
 8000b00:	20000008 	.word	0x20000008

08000b04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000b04:	b490      	push	{r4, r7}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b0a:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000b0c:	1d3c      	adds	r4, r7, #4
 8000b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000b2e:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f003 030c 	and.w	r3, r3, #12
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	d002      	beq.n	8000b44 <HAL_RCC_GetSysClockFreq+0x40>
 8000b3e:	2b08      	cmp	r3, #8
 8000b40:	d003      	beq.n	8000b4a <HAL_RCC_GetSysClockFreq+0x46>
 8000b42:	e02d      	b.n	8000ba0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000b44:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000b46:	623b      	str	r3, [r7, #32]
      break;
 8000b48:	e02d      	b.n	8000ba6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	0c9b      	lsrs	r3, r3, #18
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b56:	4413      	add	r3, r2
 8000b58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000b5c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d013      	beq.n	8000b90 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	0c5b      	lsrs	r3, r3, #17
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b76:	4413      	add	r3, r2
 8000b78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000b7c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000b82:	fb02 f203 	mul.w	r2, r2, r3
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b8e:	e004      	b.n	8000b9a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000b94:	fb02 f303 	mul.w	r3, r2, r3
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	623b      	str	r3, [r7, #32]
      break;
 8000b9e:	e002      	b.n	8000ba6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ba2:	623b      	str	r3, [r7, #32]
      break;
 8000ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000ba6:	6a3b      	ldr	r3, [r7, #32]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc90      	pop	{r4, r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	08001a18 	.word	0x08001a18
 8000bb8:	08001a28 	.word	0x08001a28
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	007a1200 	.word	0x007a1200
 8000bc4:	003d0900 	.word	0x003d0900

08000bc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <RCC_Delay+0x34>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <RCC_Delay+0x38>)
 8000bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bda:	0a5b      	lsrs	r3, r3, #9
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	fb02 f303 	mul.w	r3, r2, r3
 8000be2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000be4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	1e5a      	subs	r2, r3, #1
 8000bea:	60fa      	str	r2, [r7, #12]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1f9      	bne.n	8000be4 <RCC_Delay+0x1c>
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	10624dd3 	.word	0x10624dd3

08000c04 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e01d      	b.n	8000c52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d106      	bne.n	8000c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 fe08 	bl	8001840 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2202      	movs	r2, #2
 8000c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3304      	adds	r3, #4
 8000c40:	4619      	mov	r1, r3
 8000c42:	4610      	mov	r0, r2
 8000c44:	f000 fa2a 	bl	800109c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f042 0201 	orr.w	r2, r2, #1
 8000c70:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f042 0201 	orr.w	r2, r2, #1
 8000c80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr

08000c8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	691b      	ldr	r3, [r3, #16]
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d122      	bne.n	8000cea <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d11b      	bne.n	8000cea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f06f 0202 	mvn.w	r2, #2
 8000cba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 f9c8 	bl	8001066 <HAL_TIM_IC_CaptureCallback>
 8000cd6:	e005      	b.n	8000ce4 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f000 f9bb 	bl	8001054 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f000 f9ca 	bl	8001078 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	f003 0304 	and.w	r3, r3, #4
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	d122      	bne.n	8000d3e <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	d11b      	bne.n	8000d3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f06f 0204 	mvn.w	r2, #4
 8000d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2202      	movs	r2, #2
 8000d14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d003      	beq.n	8000d2c <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f000 f99e 	bl	8001066 <HAL_TIM_IC_CaptureCallback>
 8000d2a:	e005      	b.n	8000d38 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f000 f991 	bl	8001054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f000 f9a0 	bl	8001078 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	f003 0308 	and.w	r3, r3, #8
 8000d48:	2b08      	cmp	r3, #8
 8000d4a:	d122      	bne.n	8000d92 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	2b08      	cmp	r3, #8
 8000d58:	d11b      	bne.n	8000d92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f06f 0208 	mvn.w	r2, #8
 8000d62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2204      	movs	r2, #4
 8000d68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f000 f974 	bl	8001066 <HAL_TIM_IC_CaptureCallback>
 8000d7e:	e005      	b.n	8000d8c <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 f967 	bl	8001054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f976 	bl	8001078 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	f003 0310 	and.w	r3, r3, #16
 8000d9c:	2b10      	cmp	r3, #16
 8000d9e:	d122      	bne.n	8000de6 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	2b10      	cmp	r3, #16
 8000dac:	d11b      	bne.n	8000de6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f06f 0210 	mvn.w	r2, #16
 8000db6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2208      	movs	r2, #8
 8000dbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 f94a 	bl	8001066 <HAL_TIM_IC_CaptureCallback>
 8000dd2:	e005      	b.n	8000de0 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f000 f93d 	bl	8001054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f000 f94c 	bl	8001078 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d10e      	bne.n	8000e12 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d107      	bne.n	8000e12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f06f 0201 	mvn.w	r2, #1
 8000e0a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 fcad 	bl	800176c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1c:	2b80      	cmp	r3, #128	; 0x80
 8000e1e:	d10e      	bne.n	8000e3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2a:	2b80      	cmp	r3, #128	; 0x80
 8000e2c:	d107      	bne.n	8000e3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000e36:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f000 fa7d 	bl	8001338 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e48:	2b40      	cmp	r3, #64	; 0x40
 8000e4a:	d10e      	bne.n	8000e6a <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e56:	2b40      	cmp	r3, #64	; 0x40
 8000e58:	d107      	bne.n	8000e6a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000e62:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f910 	bl	800108a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	f003 0320 	and.w	r3, r3, #32
 8000e74:	2b20      	cmp	r3, #32
 8000e76:	d10e      	bne.n	8000e96 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	f003 0320 	and.w	r3, r3, #32
 8000e82:	2b20      	cmp	r3, #32
 8000e84:	d107      	bne.n	8000e96 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f06f 0220 	mvn.w	r2, #32
 8000e8e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 fa48 	bl	8001326 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d101      	bne.n	8000eba <HAL_TIM_ConfigClockSource+0x1c>
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e0c8      	b.n	800104c <HAL_TIM_ConfigClockSource+0x1ae>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8000ed8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000ee0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b40      	cmp	r3, #64	; 0x40
 8000ef0:	d077      	beq.n	8000fe2 <HAL_TIM_ConfigClockSource+0x144>
 8000ef2:	2b40      	cmp	r3, #64	; 0x40
 8000ef4:	d80e      	bhi.n	8000f14 <HAL_TIM_ConfigClockSource+0x76>
 8000ef6:	2b10      	cmp	r3, #16
 8000ef8:	f000 808a 	beq.w	8001010 <HAL_TIM_ConfigClockSource+0x172>
 8000efc:	2b10      	cmp	r3, #16
 8000efe:	d802      	bhi.n	8000f06 <HAL_TIM_ConfigClockSource+0x68>
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d07e      	beq.n	8001002 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8000f04:	e099      	b.n	800103a <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8000f06:	2b20      	cmp	r3, #32
 8000f08:	f000 8089 	beq.w	800101e <HAL_TIM_ConfigClockSource+0x180>
 8000f0c:	2b30      	cmp	r3, #48	; 0x30
 8000f0e:	f000 808d 	beq.w	800102c <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8000f12:	e092      	b.n	800103a <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8000f14:	2b70      	cmp	r3, #112	; 0x70
 8000f16:	d016      	beq.n	8000f46 <HAL_TIM_ConfigClockSource+0xa8>
 8000f18:	2b70      	cmp	r3, #112	; 0x70
 8000f1a:	d804      	bhi.n	8000f26 <HAL_TIM_ConfigClockSource+0x88>
 8000f1c:	2b50      	cmp	r3, #80	; 0x50
 8000f1e:	d040      	beq.n	8000fa2 <HAL_TIM_ConfigClockSource+0x104>
 8000f20:	2b60      	cmp	r3, #96	; 0x60
 8000f22:	d04e      	beq.n	8000fc2 <HAL_TIM_ConfigClockSource+0x124>
    break;
 8000f24:	e089      	b.n	800103a <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8000f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f2a:	d003      	beq.n	8000f34 <HAL_TIM_ConfigClockSource+0x96>
 8000f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f30:	d024      	beq.n	8000f7c <HAL_TIM_ConfigClockSource+0xde>
    break;
 8000f32:	e082      	b.n	800103a <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0207 	bic.w	r2, r2, #7
 8000f42:	609a      	str	r2, [r3, #8]
    break;
 8000f44:	e079      	b.n	800103a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	6899      	ldr	r1, [r3, #8]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	f000 f981 	bl	800125c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8000f68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8000f70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	609a      	str	r2, [r3, #8]
    break;
 8000f7a:	e05e      	b.n	800103a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6818      	ldr	r0, [r3, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	6899      	ldr	r1, [r3, #8]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	f000 f966 	bl	800125c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f9e:	609a      	str	r2, [r3, #8]
    break;
 8000fa0:	e04b      	b.n	800103a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6818      	ldr	r0, [r3, #0]
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	6859      	ldr	r1, [r3, #4]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	f000 f8d0 	bl	8001154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2150      	movs	r1, #80	; 0x50
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f92f 	bl	800121e <TIM_ITRx_SetConfig>
    break;
 8000fc0:	e03b      	b.n	800103a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6818      	ldr	r0, [r3, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	6859      	ldr	r1, [r3, #4]
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	f000 f8f2 	bl	80011b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2160      	movs	r1, #96	; 0x60
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f91f 	bl	800121e <TIM_ITRx_SetConfig>
    break;
 8000fe0:	e02b      	b.n	800103a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	6859      	ldr	r1, [r3, #4]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	f000 f8b0 	bl	8001154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2140      	movs	r1, #64	; 0x40
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f90f 	bl	800121e <TIM_ITRx_SetConfig>
    break;
 8001000:	e01b      	b.n	800103a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f908 	bl	800121e <TIM_ITRx_SetConfig>
    break;
 800100e:	e014      	b.n	800103a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2110      	movs	r1, #16
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f901 	bl	800121e <TIM_ITRx_SetConfig>
    break;
 800101c:	e00d      	b.n	800103a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2120      	movs	r1, #32
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f8fa 	bl	800121e <TIM_ITRx_SetConfig>
    break;
 800102a:	e006      	b.n	800103a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2130      	movs	r1, #48	; 0x30
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f8f3 	bl	800121e <TIM_ITRx_SetConfig>
    break;
 8001038:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2201      	movs	r2, #1
 800103e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a26      	ldr	r2, [pc, #152]	; (800114c <TIM_Base_SetConfig+0xb0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d007      	beq.n	80010c8 <TIM_Base_SetConfig+0x2c>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010be:	d003      	beq.n	80010c8 <TIM_Base_SetConfig+0x2c>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a23      	ldr	r2, [pc, #140]	; (8001150 <TIM_Base_SetConfig+0xb4>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d108      	bne.n	80010da <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <TIM_Base_SetConfig+0xb0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d007      	beq.n	80010f2 <TIM_Base_SetConfig+0x56>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e8:	d003      	beq.n	80010f2 <TIM_Base_SetConfig+0x56>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a18      	ldr	r2, [pc, #96]	; (8001150 <TIM_Base_SetConfig+0xb4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d108      	bne.n	8001104 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800110a:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a07      	ldr	r2, [pc, #28]	; (800114c <TIM_Base_SetConfig+0xb0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d103      	bne.n	800113c <TIM_Base_SetConfig+0xa0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	615a      	str	r2, [r3, #20]
}
 8001142:	bf00      	nop
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	40012c00 	.word	0x40012c00
 8001150:	40000400 	.word	0x40000400

08001154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001154:	b480      	push	{r7}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	f023 0201 	bic.w	r2, r3, #1
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001186:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	4313      	orrs	r3, r2
 8001190:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	f023 030a 	bic.w	r3, r3, #10
 8001198:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	621a      	str	r2, [r3, #32]
}
 80011ae:	bf00      	nop
 80011b0:	371c      	adds	r7, #28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	f023 0210 	bic.w	r2, r3, #16
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80011ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	031b      	lsls	r3, r3, #12
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80011fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	621a      	str	r2, [r3, #32]
}
 8001214:	bf00      	nop
 8001216:	371c      	adds	r7, #28
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800121e:	b480      	push	{r7}
 8001220:	b085      	sub	sp, #20
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	460b      	mov	r3, r1
 8001228:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800123a:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800123c:	887b      	ldrh	r3, [r7, #2]
 800123e:	f043 0307 	orr.w	r3, r3, #7
 8001242:	b29b      	uxth	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	609a      	str	r2, [r3, #8]
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800127a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	021a      	lsls	r2, r3, #8
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	431a      	orrs	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4313      	orrs	r3, r2
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	4313      	orrs	r3, r2
 800128c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	609a      	str	r2, [r3, #8]
}
 8001294:	bf00      	nop
 8001296:	371c      	adds	r7, #28
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d101      	bne.n	80012b6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e032      	b.n	800131c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2202      	movs	r2, #2
 80012c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012d4:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6859      	ldr	r1, [r3, #4]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012f6:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6899      	ldr	r1, [r3, #8]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	430a      	orrs	r2, r1
 8001308:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800134a:	b490      	push	{r4, r7}
 800134c:	b088      	sub	sp, #32
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	461a      	mov	r2, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	0e1b      	lsrs	r3, r3, #24
 800135e:	4413      	add	r3, r2
 8001360:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001362:	6822      	ldr	r2, [r4, #0]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa93 f3a3 	rbit	r3, r3
 800136e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	fab3 f383 	clz	r3, r3
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	210f      	movs	r1, #15
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	401a      	ands	r2, r3
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	61bb      	str	r3, [r7, #24]
  return(result);
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	fab3 f383 	clz	r3, r3
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	6023      	str	r3, [r4, #0]
}
 80013a0:	bf00      	nop
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc90      	pop	{r4, r7}
 80013a8:	4770      	bx	lr

080013aa <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80013aa:	b490      	push	{r4, r7}
 80013ac:	b088      	sub	sp, #32
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	461a      	mov	r2, r3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	0e1b      	lsrs	r3, r3, #24
 80013be:	4413      	add	r3, r2
 80013c0:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80013c2:	6822      	ldr	r2, [r4, #0]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa93 f3a3 	rbit	r3, r3
 80013ce:	613b      	str	r3, [r7, #16]
  return(result);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	fab3 f383 	clz	r3, r3
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	2103      	movs	r1, #3
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	401a      	ands	r2, r3
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa93 f3a3 	rbit	r3, r3
 80013ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	fab3 f383 	clz	r3, r3
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8001400:	bf00      	nop
 8001402:	3720      	adds	r7, #32
 8001404:	46bd      	mov	sp, r7
 8001406:	bc90      	pop	{r4, r7}
 8001408:	4770      	bx	lr

0800140a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 800140a:	b490      	push	{r4, r7}
 800140c:	b088      	sub	sp, #32
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	461a      	mov	r2, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	0e1b      	lsrs	r3, r3, #24
 800141e:	4413      	add	r3, r2
 8001420:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001422:	6822      	ldr	r2, [r4, #0]
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa93 f3a3 	rbit	r3, r3
 800142e:	613b      	str	r3, [r7, #16]
  return(result);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	fab3 f383 	clz	r3, r3
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	2104      	movs	r1, #4
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	401a      	ands	r2, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	fa93 f3a3 	rbit	r3, r3
 800144c:	61bb      	str	r3, [r7, #24]
  return(result);
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	fab3 f383 	clz	r3, r3
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8001460:	bf00      	nop
 8001462:	3720      	adds	r7, #32
 8001464:	46bd      	mov	sp, r7
 8001466:	bc90      	pop	{r4, r7}
 8001468:	4770      	bx	lr

0800146a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800146a:	b480      	push	{r7}
 800146c:	b087      	sub	sp, #28
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	43db      	mvns	r3, r3
 8001480:	401a      	ands	r2, r3
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa93 f3a3 	rbit	r3, r3
 800148e:	613b      	str	r3, [r7, #16]
  return(result);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	fab3 f383 	clz	r3, r3
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	431a      	orrs	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	60da      	str	r2, [r3, #12]
}
 80014a2:	bf00      	nop
 80014a4:	371c      	adds	r7, #28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	0c1b      	lsrs	r3, r3, #16
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	fa93 f3a3 	rbit	r3, r3
 80014ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80014cc:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80014ce:	fab3 f383 	clz	r3, r3
 80014d2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0U)
 80014d4:	e040      	b.n	8001558 <LL_GPIO_Init+0xac>
  {
    /* skip if bit is not set */
    if ((pinmask & (1U << pinpos)) != 0U)
 80014d6:	2201      	movs	r2, #1
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	409a      	lsls	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d036      	beq.n	8001552 <LL_GPIO_Init+0xa6>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	2b07      	cmp	r3, #7
 80014e8:	d806      	bhi.n	80014f8 <LL_GPIO_Init+0x4c>
      {
        currentpin = (0x00000101U << pinpos);
 80014ea:	f240 1201 	movw	r2, #257	; 0x101
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	e008      	b.n	800150a <LL_GPIO_Init+0x5e>
      }
      else
      {
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	3b08      	subs	r3, #8
 80014fc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001508:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	461a      	mov	r2, r3
 8001510:	69b9      	ldr	r1, [r7, #24]
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ff19 	bl	800134a <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	461a      	mov	r2, r3
 800151e:	69b9      	ldr	r1, [r7, #24]
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ffa2 	bl	800146a <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d003      	beq.n	8001536 <LL_GPIO_Init+0x8a>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b09      	cmp	r3, #9
 8001534:	d10d      	bne.n	8001552 <LL_GPIO_Init+0xa6>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	461a      	mov	r2, r3
 800153c:	69b9      	ldr	r1, [r7, #24]
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ff33 	bl	80013aa <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	461a      	mov	r2, r3
 800154a:	69b9      	ldr	r1, [r7, #24]
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ff5c 	bl	800140a <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0U)
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1b8      	bne.n	80014d6 <LL_GPIO_Init+0x2a>
  }
  return (SUCCESS);
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <LL_GPIO_WriteOutputPort>:
  * @param  GPIOx GPIO Port
  * @param  PortValue Level value for each pin of the port
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_WriteOutputPort(GPIO_TypeDef *GPIOx, uint32_t PortValue)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, PortValue);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	60da      	str	r2, [r3, #12]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	b29a      	uxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	615a      	str	r2, [r3, #20]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
	...

080015a8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80015b2:	699a      	ldr	r2, [r3, #24]
 80015b4:	4907      	ldr	r1, [pc, #28]	; (80015d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80015be:	699a      	ldr	r2, [r3, #24]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4013      	ands	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000

080015d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015dc:	f7fe fdb6 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e0:	f000 f810 	bl	8001604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e4:	f000 f89c 	bl	8001720 <MX_GPIO_Init>
  MX_TIM3_Init();
 80015e8:	f000 f84c 	bl	8001684 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LL_GPIO_WriteOutputPort(GPIOC,0xfe);
 80015ec:	21fe      	movs	r1, #254	; 0xfe
 80015ee:	4803      	ldr	r0, [pc, #12]	; (80015fc <main+0x24>)
 80015f0:	f7ff ffbd 	bl	800156e <LL_GPIO_WriteOutputPort>
  HAL_TIM_Base_Start_IT(&htim3);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <main+0x28>)
 80015f6:	f7ff fb30 	bl	8000c5a <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <main+0x22>
 80015fc:	40011000 	.word	0x40011000
 8001600:	20000030 	.word	0x20000030

08001604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b090      	sub	sp, #64	; 0x40
 8001608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160a:	f107 0318 	add.w	r3, r7, #24
 800160e:	2228      	movs	r2, #40	; 0x28
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f9ec 	bl	80019f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001626:	2302      	movs	r3, #2
 8001628:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800162a:	2301      	movs	r3, #1
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800162e:	2310      	movs	r3, #16
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001632:	2302      	movs	r3, #2
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001636:	2300      	movs	r3, #0
 8001638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800163a:	2300      	movs	r3, #0
 800163c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163e:	f107 0318 	add.w	r3, r7, #24
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe feee 	bl	8000424 <HAL_RCC_OscConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800164e:	f000 f8bf 	bl	80017d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001652:	230f      	movs	r3, #15
 8001654:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001656:	2302      	movs	r3, #2
 8001658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800165e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff f93d 	bl	80008ec <HAL_RCC_ClockConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001678:	f000 f8aa 	bl	80017d0 <Error_Handler>
  }
}
 800167c:	bf00      	nop
 800167e:	3740      	adds	r7, #64	; 0x40
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001698:	463b      	mov	r3, r7
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016a0:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <MX_TIM3_Init+0x94>)
 80016a2:	4a1e      	ldr	r2, [pc, #120]	; (800171c <MX_TIM3_Init+0x98>)
 80016a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3999;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <MX_TIM3_Init+0x94>)
 80016a8:	f640 729f 	movw	r2, #3999	; 0xf9f
 80016ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <MX_TIM3_Init+0x94>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <MX_TIM3_Init+0x94>)
 80016b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <MX_TIM3_Init+0x94>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <MX_TIM3_Init+0x94>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016c8:	4813      	ldr	r0, [pc, #76]	; (8001718 <MX_TIM3_Init+0x94>)
 80016ca:	f7ff fa9b 	bl	8000c04 <HAL_TIM_Base_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016d4:	f000 f87c 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	4619      	mov	r1, r3
 80016e4:	480c      	ldr	r0, [pc, #48]	; (8001718 <MX_TIM3_Init+0x94>)
 80016e6:	f7ff fbda 	bl	8000e9e <HAL_TIM_ConfigClockSource>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016f0:	f000 f86e 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016fc:	463b      	mov	r3, r7
 80016fe:	4619      	mov	r1, r3
 8001700:	4805      	ldr	r0, [pc, #20]	; (8001718 <MX_TIM3_Init+0x94>)
 8001702:	f7ff fdcc 	bl	800129e <HAL_TIMEx_MasterConfigSynchronization>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800170c:	f000 f860 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001710:	bf00      	nop
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000030 	.word	0x20000030
 800171c:	40000400 	.word	0x40000400

08001720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8001734:	2010      	movs	r0, #16
 8001736:	f7ff ff37 	bl	80015a8 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3 
 800173a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800173e:	480a      	ldr	r0, [pc, #40]	; (8001768 <MX_GPIO_Init+0x48>)
 8001740:	f7ff ff22 	bl	8001588 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3 
 8001744:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001748:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800174a:	2301      	movs	r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800174e:	2302      	movs	r3, #2
 8001750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4803      	ldr	r0, [pc, #12]	; (8001768 <MX_GPIO_Init+0x48>)
 800175c:	f7ff fea6 	bl	80014ac <LL_GPIO_Init>

}
 8001760:	bf00      	nop
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40011000 	.word	0x40011000

0800176c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	static uint8_t counter=0;
	if(htim==&htim3)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d11e      	bne.n	80017ba <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		counter++;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	b2da      	uxtb	r2, r3
 8001784:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001786:	701a      	strb	r2, [r3, #0]
		if(counter>=8)counter=0;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b07      	cmp	r3, #7
 800178e:	d902      	bls.n	8001796 <HAL_TIM_PeriodElapsedCallback+0x2a>
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
		LL_GPIO_WriteOutputPort(GPIOC,(0xfe<<counter)|(0xfe>>(8-counter)));
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	23fe      	movs	r3, #254	; 0xfe
 800179e:	fa03 f202 	lsl.w	r2, r3, r2
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	f1c3 0308 	rsb	r3, r3, #8
 80017aa:	21fe      	movs	r1, #254	; 0xfe
 80017ac:	fa41 f303 	asr.w	r3, r1, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x60>)
 80017b6:	f7ff feda 	bl	800156e <LL_GPIO_WriteOutputPort>
	}
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000030 	.word	0x20000030
 80017c8:	20000028 	.word	0x20000028
 80017cc:	40011000 	.word	0x40011000

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_MspInit+0x5c>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a14      	ldr	r2, [pc, #80]	; (8001838 <HAL_MspInit+0x5c>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_MspInit+0x5c>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <HAL_MspInit+0x5c>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <HAL_MspInit+0x5c>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_MspInit+0x5c>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_MspInit+0x60>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_MspInit+0x60>)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	40021000 	.word	0x40021000
 800183c:	40010000 	.word	0x40010000

08001840 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <HAL_TIM_Base_MspInit+0x44>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d113      	bne.n	800187a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <HAL_TIM_Base_MspInit+0x48>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	4a0c      	ldr	r2, [pc, #48]	; (8001888 <HAL_TIM_Base_MspInit+0x48>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	61d3      	str	r3, [r2, #28]
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_TIM_Base_MspInit+0x48>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	201d      	movs	r0, #29
 8001870:	f7fe fda1 	bl	80003b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001874:	201d      	movs	r0, #29
 8001876:	f7fe fdba 	bl	80003ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40000400 	.word	0x40000400
 8001888:	40021000 	.word	0x40021000

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <HardFault_Handler+0x4>

0800189e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <MemManage_Handler+0x4>

080018a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <BusFault_Handler+0x4>

080018aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <UsageFault_Handler+0x4>

080018b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d8:	f7fe fc7e 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <TIM3_IRQHandler+0x10>)
 80018e6:	f7ff f9d2 	bl	8000c8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000030 	.word	0x20000030

080018f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <SystemInit+0x5c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a14      	ldr	r2, [pc, #80]	; (8001950 <SystemInit+0x5c>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <SystemInit+0x5c>)
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	4911      	ldr	r1, [pc, #68]	; (8001950 <SystemInit+0x5c>)
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <SystemInit+0x60>)
 800190c:	4013      	ands	r3, r2
 800190e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <SystemInit+0x5c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <SystemInit+0x5c>)
 8001916:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800191a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <SystemInit+0x5c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <SystemInit+0x5c>)
 8001926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800192a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <SystemInit+0x5c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <SystemInit+0x5c>)
 8001932:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001936:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <SystemInit+0x5c>)
 800193a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800193e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <SystemInit+0x64>)
 8001942:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001946:	609a      	str	r2, [r3, #8]
#endif 
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	40021000 	.word	0x40021000
 8001954:	f8ff0000 	.word	0xf8ff0000
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800195c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800195e:	e003      	b.n	8001968 <LoopCopyDataInit>

08001960 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001962:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001964:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001966:	3104      	adds	r1, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001968:	480a      	ldr	r0, [pc, #40]	; (8001994 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800196c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800196e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001970:	d3f6      	bcc.n	8001960 <CopyDataInit>
  ldr r2, =_sbss
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001974:	e002      	b.n	800197c <LoopFillZerobss>

08001976 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001978:	f842 3b04 	str.w	r3, [r2], #4

0800197c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800197e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001980:	d3f9      	bcc.n	8001976 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001982:	f7ff ffb7 	bl	80018f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001986:	f000 f80f 	bl	80019a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800198a:	f7ff fe25 	bl	80015d8 <main>
  bx lr
 800198e:	4770      	bx	lr
  ldr r3, =_sidata
 8001990:	08001a44 	.word	0x08001a44
  ldr r0, =_sdata
 8001994:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001998:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800199c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80019a0:	20000070 	.word	0x20000070

080019a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a4:	e7fe      	b.n	80019a4 <ADC1_2_IRQHandler>
	...

080019a8 <__libc_init_array>:
 80019a8:	b570      	push	{r4, r5, r6, lr}
 80019aa:	2500      	movs	r5, #0
 80019ac:	4e0c      	ldr	r6, [pc, #48]	; (80019e0 <__libc_init_array+0x38>)
 80019ae:	4c0d      	ldr	r4, [pc, #52]	; (80019e4 <__libc_init_array+0x3c>)
 80019b0:	1ba4      	subs	r4, r4, r6
 80019b2:	10a4      	asrs	r4, r4, #2
 80019b4:	42a5      	cmp	r5, r4
 80019b6:	d109      	bne.n	80019cc <__libc_init_array+0x24>
 80019b8:	f000 f822 	bl	8001a00 <_init>
 80019bc:	2500      	movs	r5, #0
 80019be:	4e0a      	ldr	r6, [pc, #40]	; (80019e8 <__libc_init_array+0x40>)
 80019c0:	4c0a      	ldr	r4, [pc, #40]	; (80019ec <__libc_init_array+0x44>)
 80019c2:	1ba4      	subs	r4, r4, r6
 80019c4:	10a4      	asrs	r4, r4, #2
 80019c6:	42a5      	cmp	r5, r4
 80019c8:	d105      	bne.n	80019d6 <__libc_init_array+0x2e>
 80019ca:	bd70      	pop	{r4, r5, r6, pc}
 80019cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019d0:	4798      	blx	r3
 80019d2:	3501      	adds	r5, #1
 80019d4:	e7ee      	b.n	80019b4 <__libc_init_array+0xc>
 80019d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019da:	4798      	blx	r3
 80019dc:	3501      	adds	r5, #1
 80019de:	e7f2      	b.n	80019c6 <__libc_init_array+0x1e>
 80019e0:	08001a3c 	.word	0x08001a3c
 80019e4:	08001a3c 	.word	0x08001a3c
 80019e8:	08001a3c 	.word	0x08001a3c
 80019ec:	08001a40 	.word	0x08001a40

080019f0 <memset>:
 80019f0:	4603      	mov	r3, r0
 80019f2:	4402      	add	r2, r0
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d100      	bne.n	80019fa <memset+0xa>
 80019f8:	4770      	bx	lr
 80019fa:	f803 1b01 	strb.w	r1, [r3], #1
 80019fe:	e7f9      	b.n	80019f4 <memset+0x4>

08001a00 <_init>:
 8001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a02:	bf00      	nop
 8001a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a06:	bc08      	pop	{r3}
 8001a08:	469e      	mov	lr, r3
 8001a0a:	4770      	bx	lr

08001a0c <_fini>:
 8001a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0e:	bf00      	nop
 8001a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a12:	bc08      	pop	{r3}
 8001a14:	469e      	mov	lr, r3
 8001a16:	4770      	bx	lr
