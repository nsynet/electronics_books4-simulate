
5.2-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000212c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002238  08002238  00012238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002264  08002264  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002264  08002264  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002264  08002264  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002264  08002264  00012264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002268  08002268  00012268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800226c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002278  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002278  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9e8  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000192f  00000000  00000000  0002aa1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000698  00000000  00000000  0002c350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f0  00000000  00000000  0002c9e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000141c3  00000000  00000000  0002cfd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000066cd  00000000  00000000  0004119b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00068d24  00000000  00000000  00047868  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b058c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001990  00000000  00000000  000b0608  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002220 	.word	0x08002220

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002220 	.word	0x08002220

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f91f 	bl	80003a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 ff1a 	bl	8001fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f937 	bl	800040a <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f8ff 	bl	80003b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000002c 	.word	0x2000002c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000002c 	.word	0x2000002c

08000210 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	f003 021f 	and.w	r2, r3, #31
 8000284:	4906      	ldr	r1, [pc, #24]	; (80002a0 <NVIC_EnableIRQ+0x2c>)
 8000286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028a:	095b      	lsrs	r3, r3, #5
 800028c:	2001      	movs	r0, #1
 800028e:	fa00 f202 	lsl.w	r2, r0, r2
 8000292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	6039      	str	r1, [r7, #0]
 80002ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da0b      	bge.n	80002d0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	490c      	ldr	r1, [pc, #48]	; (80002f0 <NVIC_SetPriority+0x4c>)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f003 030f 	and.w	r3, r3, #15
 80002c4:	3b04      	subs	r3, #4
 80002c6:	0112      	lsls	r2, r2, #4
 80002c8:	b2d2      	uxtb	r2, r2
 80002ca:	440b      	add	r3, r1
 80002cc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002ce:	e009      	b.n	80002e4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	4907      	ldr	r1, [pc, #28]	; (80002f4 <NVIC_SetPriority+0x50>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00
 80002f4:	e000e100 	.word	0xe000e100

080002f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b089      	sub	sp, #36	; 0x24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f003 0307 	and.w	r3, r3, #7
 800030a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800030c:	69fb      	ldr	r3, [r7, #28]
 800030e:	f1c3 0307 	rsb	r3, r3, #7
 8000312:	2b04      	cmp	r3, #4
 8000314:	bf28      	it	cs
 8000316:	2304      	movcs	r3, #4
 8000318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800031a:	69fb      	ldr	r3, [r7, #28]
 800031c:	3304      	adds	r3, #4
 800031e:	2b06      	cmp	r3, #6
 8000320:	d902      	bls.n	8000328 <NVIC_EncodePriority+0x30>
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3b03      	subs	r3, #3
 8000326:	e000      	b.n	800032a <NVIC_EncodePriority+0x32>
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800032c:	f04f 32ff 	mov.w	r2, #4294967295
 8000330:	69bb      	ldr	r3, [r7, #24]
 8000332:	fa02 f303 	lsl.w	r3, r2, r3
 8000336:	43da      	mvns	r2, r3
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	401a      	ands	r2, r3
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000340:	f04f 31ff 	mov.w	r1, #4294967295
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	43d9      	mvns	r1, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	4313      	orrs	r3, r2
         );
}
 8000352:	4618      	mov	r0, r3
 8000354:	3724      	adds	r7, #36	; 0x24
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3b01      	subs	r3, #1
 8000368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800036c:	d301      	bcc.n	8000372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800036e:	2301      	movs	r3, #1
 8000370:	e00f      	b.n	8000392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <SysTick_Config+0x40>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3b01      	subs	r3, #1
 8000378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800037a:	210f      	movs	r1, #15
 800037c:	f04f 30ff 	mov.w	r0, #4294967295
 8000380:	f7ff ff90 	bl	80002a4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <SysTick_Config+0x40>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <SysTick_Config+0x40>)
 800038c:	2207      	movs	r2, #7
 800038e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000390:	2300      	movs	r3, #0
}
 8000392:	4618      	mov	r0, r3
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	e000e010 	.word	0xe000e010

080003a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f7ff ff31 	bl	8000210 <NVIC_SetPriorityGrouping>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b086      	sub	sp, #24
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	4603      	mov	r3, r0
 80003be:	60b9      	str	r1, [r7, #8]
 80003c0:	607a      	str	r2, [r7, #4]
 80003c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003c8:	f7ff ff46 	bl	8000258 <NVIC_GetPriorityGrouping>
 80003cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	68b9      	ldr	r1, [r7, #8]
 80003d2:	6978      	ldr	r0, [r7, #20]
 80003d4:	f7ff ff90 	bl	80002f8 <NVIC_EncodePriority>
 80003d8:	4602      	mov	r2, r0
 80003da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003de:	4611      	mov	r1, r2
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ff5f 	bl	80002a4 <NVIC_SetPriority>
}
 80003e6:	bf00      	nop
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	4603      	mov	r3, r0
 80003f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80003f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ff39 	bl	8000274 <NVIC_EnableIRQ>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f7ff ffa2 	bl	800035c <SysTick_Config>
 8000418:	4603      	mov	r3, r0
}
 800041a:	4618      	mov	r0, r3
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800042c:	2300      	movs	r3, #0
 800042e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000436:	2b02      	cmp	r3, #2
 8000438:	d005      	beq.n	8000446 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2204      	movs	r2, #4
 800043e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000440:	2301      	movs	r3, #1
 8000442:	73fb      	strb	r3, [r7, #15]
 8000444:	e051      	b.n	80004ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f022 020e 	bic.w	r2, r2, #14
 8000454:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f022 0201 	bic.w	r2, r2, #1
 8000464:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a22      	ldr	r2, [pc, #136]	; (80004f4 <HAL_DMA_Abort_IT+0xd0>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d029      	beq.n	80004c4 <HAL_DMA_Abort_IT+0xa0>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a20      	ldr	r2, [pc, #128]	; (80004f8 <HAL_DMA_Abort_IT+0xd4>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d022      	beq.n	80004c0 <HAL_DMA_Abort_IT+0x9c>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a1f      	ldr	r2, [pc, #124]	; (80004fc <HAL_DMA_Abort_IT+0xd8>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d01a      	beq.n	80004ba <HAL_DMA_Abort_IT+0x96>
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a1d      	ldr	r2, [pc, #116]	; (8000500 <HAL_DMA_Abort_IT+0xdc>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d012      	beq.n	80004b4 <HAL_DMA_Abort_IT+0x90>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a1c      	ldr	r2, [pc, #112]	; (8000504 <HAL_DMA_Abort_IT+0xe0>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d00a      	beq.n	80004ae <HAL_DMA_Abort_IT+0x8a>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a1a      	ldr	r2, [pc, #104]	; (8000508 <HAL_DMA_Abort_IT+0xe4>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d102      	bne.n	80004a8 <HAL_DMA_Abort_IT+0x84>
 80004a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004a6:	e00e      	b.n	80004c6 <HAL_DMA_Abort_IT+0xa2>
 80004a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80004ac:	e00b      	b.n	80004c6 <HAL_DMA_Abort_IT+0xa2>
 80004ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004b2:	e008      	b.n	80004c6 <HAL_DMA_Abort_IT+0xa2>
 80004b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004b8:	e005      	b.n	80004c6 <HAL_DMA_Abort_IT+0xa2>
 80004ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004be:	e002      	b.n	80004c6 <HAL_DMA_Abort_IT+0xa2>
 80004c0:	2310      	movs	r3, #16
 80004c2:	e000      	b.n	80004c6 <HAL_DMA_Abort_IT+0xa2>
 80004c4:	2301      	movs	r3, #1
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <HAL_DMA_Abort_IT+0xe8>)
 80004c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2201      	movs	r2, #1
 80004ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2200      	movs	r2, #0
 80004d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d003      	beq.n	80004ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	4798      	blx	r3
    } 
  }
  return status;
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40020008 	.word	0x40020008
 80004f8:	4002001c 	.word	0x4002001c
 80004fc:	40020030 	.word	0x40020030
 8000500:	40020044 	.word	0x40020044
 8000504:	40020058 	.word	0x40020058
 8000508:	4002006c 	.word	0x4002006c
 800050c:	40020000 	.word	0x40020000

08000510 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000510:	b480      	push	{r7}
 8000512:	b08b      	sub	sp, #44	; 0x2c
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000526:	2300      	movs	r3, #0
 8000528:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800052e:	2300      	movs	r3, #0
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
 8000532:	e121      	b.n	8000778 <HAL_GPIO_Init+0x268>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000534:	2201      	movs	r2, #1
 8000536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	69fa      	ldr	r2, [r7, #28]
 8000544:	4013      	ands	r3, r2
 8000546:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000548:	69ba      	ldr	r2, [r7, #24]
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	429a      	cmp	r2, r3
 800054e:	f040 8110 	bne.w	8000772 <HAL_GPIO_Init+0x262>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	2b12      	cmp	r3, #18
 8000558:	d034      	beq.n	80005c4 <HAL_GPIO_Init+0xb4>
 800055a:	2b12      	cmp	r3, #18
 800055c:	d80d      	bhi.n	800057a <HAL_GPIO_Init+0x6a>
 800055e:	2b02      	cmp	r3, #2
 8000560:	d02b      	beq.n	80005ba <HAL_GPIO_Init+0xaa>
 8000562:	2b02      	cmp	r3, #2
 8000564:	d804      	bhi.n	8000570 <HAL_GPIO_Init+0x60>
 8000566:	2b00      	cmp	r3, #0
 8000568:	d031      	beq.n	80005ce <HAL_GPIO_Init+0xbe>
 800056a:	2b01      	cmp	r3, #1
 800056c:	d01c      	beq.n	80005a8 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800056e:	e048      	b.n	8000602 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000570:	2b03      	cmp	r3, #3
 8000572:	d043      	beq.n	80005fc <HAL_GPIO_Init+0xec>
 8000574:	2b11      	cmp	r3, #17
 8000576:	d01b      	beq.n	80005b0 <HAL_GPIO_Init+0xa0>
          break;
 8000578:	e043      	b.n	8000602 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800057a:	4a84      	ldr	r2, [pc, #528]	; (800078c <HAL_GPIO_Init+0x27c>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d026      	beq.n	80005ce <HAL_GPIO_Init+0xbe>
 8000580:	4a82      	ldr	r2, [pc, #520]	; (800078c <HAL_GPIO_Init+0x27c>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d806      	bhi.n	8000594 <HAL_GPIO_Init+0x84>
 8000586:	4a82      	ldr	r2, [pc, #520]	; (8000790 <HAL_GPIO_Init+0x280>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d020      	beq.n	80005ce <HAL_GPIO_Init+0xbe>
 800058c:	4a81      	ldr	r2, [pc, #516]	; (8000794 <HAL_GPIO_Init+0x284>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d01d      	beq.n	80005ce <HAL_GPIO_Init+0xbe>
          break;
 8000592:	e036      	b.n	8000602 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000594:	4a80      	ldr	r2, [pc, #512]	; (8000798 <HAL_GPIO_Init+0x288>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d019      	beq.n	80005ce <HAL_GPIO_Init+0xbe>
 800059a:	4a80      	ldr	r2, [pc, #512]	; (800079c <HAL_GPIO_Init+0x28c>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d016      	beq.n	80005ce <HAL_GPIO_Init+0xbe>
 80005a0:	4a7f      	ldr	r2, [pc, #508]	; (80007a0 <HAL_GPIO_Init+0x290>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d013      	beq.n	80005ce <HAL_GPIO_Init+0xbe>
          break;
 80005a6:	e02c      	b.n	8000602 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	623b      	str	r3, [r7, #32]
          break;
 80005ae:	e028      	b.n	8000602 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	3304      	adds	r3, #4
 80005b6:	623b      	str	r3, [r7, #32]
          break;
 80005b8:	e023      	b.n	8000602 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	3308      	adds	r3, #8
 80005c0:	623b      	str	r3, [r7, #32]
          break;
 80005c2:	e01e      	b.n	8000602 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	330c      	adds	r3, #12
 80005ca:	623b      	str	r3, [r7, #32]
          break;
 80005cc:	e019      	b.n	8000602 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d102      	bne.n	80005dc <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005d6:	2304      	movs	r3, #4
 80005d8:	623b      	str	r3, [r7, #32]
          break;
 80005da:	e012      	b.n	8000602 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d105      	bne.n	80005f0 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005e4:	2308      	movs	r3, #8
 80005e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	69fa      	ldr	r2, [r7, #28]
 80005ec:	611a      	str	r2, [r3, #16]
          break;
 80005ee:	e008      	b.n	8000602 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005f0:	2308      	movs	r3, #8
 80005f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	69fa      	ldr	r2, [r7, #28]
 80005f8:	615a      	str	r2, [r3, #20]
          break;
 80005fa:	e002      	b.n	8000602 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80005fc:	2300      	movs	r3, #0
 80005fe:	623b      	str	r3, [r7, #32]
          break;
 8000600:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	2bff      	cmp	r3, #255	; 0xff
 8000606:	d801      	bhi.n	800060c <HAL_GPIO_Init+0xfc>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	e001      	b.n	8000610 <HAL_GPIO_Init+0x100>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3304      	adds	r3, #4
 8000610:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000612:	69bb      	ldr	r3, [r7, #24]
 8000614:	2bff      	cmp	r3, #255	; 0xff
 8000616:	d802      	bhi.n	800061e <HAL_GPIO_Init+0x10e>
 8000618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	e002      	b.n	8000624 <HAL_GPIO_Init+0x114>
 800061e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000620:	3b08      	subs	r3, #8
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	210f      	movs	r1, #15
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	fa01 f303 	lsl.w	r3, r1, r3
 8000632:	43db      	mvns	r3, r3
 8000634:	401a      	ands	r2, r3
 8000636:	6a39      	ldr	r1, [r7, #32]
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	fa01 f303 	lsl.w	r3, r1, r3
 800063e:	431a      	orrs	r2, r3
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	2b00      	cmp	r3, #0
 800064e:	f000 8090 	beq.w	8000772 <HAL_GPIO_Init+0x262>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000652:	4b54      	ldr	r3, [pc, #336]	; (80007a4 <HAL_GPIO_Init+0x294>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a53      	ldr	r2, [pc, #332]	; (80007a4 <HAL_GPIO_Init+0x294>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b51      	ldr	r3, [pc, #324]	; (80007a4 <HAL_GPIO_Init+0x294>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800066a:	4a4f      	ldr	r2, [pc, #316]	; (80007a8 <HAL_GPIO_Init+0x298>)
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	089b      	lsrs	r3, r3, #2
 8000670:	3302      	adds	r3, #2
 8000672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000676:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067a:	f003 0303 	and.w	r3, r3, #3
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	220f      	movs	r2, #15
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	43db      	mvns	r3, r3
 8000688:	697a      	ldr	r2, [r7, #20]
 800068a:	4013      	ands	r3, r2
 800068c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a46      	ldr	r2, [pc, #280]	; (80007ac <HAL_GPIO_Init+0x29c>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d00d      	beq.n	80006b2 <HAL_GPIO_Init+0x1a2>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a45      	ldr	r2, [pc, #276]	; (80007b0 <HAL_GPIO_Init+0x2a0>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d007      	beq.n	80006ae <HAL_GPIO_Init+0x19e>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a44      	ldr	r2, [pc, #272]	; (80007b4 <HAL_GPIO_Init+0x2a4>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d101      	bne.n	80006aa <HAL_GPIO_Init+0x19a>
 80006a6:	2302      	movs	r3, #2
 80006a8:	e004      	b.n	80006b4 <HAL_GPIO_Init+0x1a4>
 80006aa:	2303      	movs	r3, #3
 80006ac:	e002      	b.n	80006b4 <HAL_GPIO_Init+0x1a4>
 80006ae:	2301      	movs	r3, #1
 80006b0:	e000      	b.n	80006b4 <HAL_GPIO_Init+0x1a4>
 80006b2:	2300      	movs	r3, #0
 80006b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006b6:	f002 0203 	and.w	r2, r2, #3
 80006ba:	0092      	lsls	r2, r2, #2
 80006bc:	4093      	lsls	r3, r2
 80006be:	697a      	ldr	r2, [r7, #20]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80006c4:	4938      	ldr	r1, [pc, #224]	; (80007a8 <HAL_GPIO_Init+0x298>)
 80006c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c8:	089b      	lsrs	r3, r3, #2
 80006ca:	3302      	adds	r3, #2
 80006cc:	697a      	ldr	r2, [r7, #20]
 80006ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80006de:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <HAL_GPIO_Init+0x2a8>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	4935      	ldr	r1, [pc, #212]	; (80007b8 <HAL_GPIO_Init+0x2a8>)
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	600b      	str	r3, [r1, #0]
 80006ea:	e006      	b.n	80006fa <HAL_GPIO_Init+0x1ea>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80006ec:	4b32      	ldr	r3, [pc, #200]	; (80007b8 <HAL_GPIO_Init+0x2a8>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	43db      	mvns	r3, r3
 80006f4:	4930      	ldr	r1, [pc, #192]	; (80007b8 <HAL_GPIO_Init+0x2a8>)
 80006f6:	4013      	ands	r3, r2
 80006f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000702:	2b00      	cmp	r3, #0
 8000704:	d006      	beq.n	8000714 <HAL_GPIO_Init+0x204>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000706:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <HAL_GPIO_Init+0x2a8>)
 8000708:	685a      	ldr	r2, [r3, #4]
 800070a:	492b      	ldr	r1, [pc, #172]	; (80007b8 <HAL_GPIO_Init+0x2a8>)
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	4313      	orrs	r3, r2
 8000710:	604b      	str	r3, [r1, #4]
 8000712:	e006      	b.n	8000722 <HAL_GPIO_Init+0x212>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <HAL_GPIO_Init+0x2a8>)
 8000716:	685a      	ldr	r2, [r3, #4]
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	43db      	mvns	r3, r3
 800071c:	4926      	ldr	r1, [pc, #152]	; (80007b8 <HAL_GPIO_Init+0x2a8>)
 800071e:	4013      	ands	r3, r2
 8000720:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800072a:	2b00      	cmp	r3, #0
 800072c:	d006      	beq.n	800073c <HAL_GPIO_Init+0x22c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <HAL_GPIO_Init+0x2a8>)
 8000730:	689a      	ldr	r2, [r3, #8]
 8000732:	4921      	ldr	r1, [pc, #132]	; (80007b8 <HAL_GPIO_Init+0x2a8>)
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	4313      	orrs	r3, r2
 8000738:	608b      	str	r3, [r1, #8]
 800073a:	e006      	b.n	800074a <HAL_GPIO_Init+0x23a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <HAL_GPIO_Init+0x2a8>)
 800073e:	689a      	ldr	r2, [r3, #8]
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	43db      	mvns	r3, r3
 8000744:	491c      	ldr	r1, [pc, #112]	; (80007b8 <HAL_GPIO_Init+0x2a8>)
 8000746:	4013      	ands	r3, r2
 8000748:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000752:	2b00      	cmp	r3, #0
 8000754:	d006      	beq.n	8000764 <HAL_GPIO_Init+0x254>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <HAL_GPIO_Init+0x2a8>)
 8000758:	68da      	ldr	r2, [r3, #12]
 800075a:	4917      	ldr	r1, [pc, #92]	; (80007b8 <HAL_GPIO_Init+0x2a8>)
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	4313      	orrs	r3, r2
 8000760:	60cb      	str	r3, [r1, #12]
 8000762:	e006      	b.n	8000772 <HAL_GPIO_Init+0x262>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_GPIO_Init+0x2a8>)
 8000766:	68da      	ldr	r2, [r3, #12]
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	43db      	mvns	r3, r3
 800076c:	4912      	ldr	r1, [pc, #72]	; (80007b8 <HAL_GPIO_Init+0x2a8>)
 800076e:	4013      	ands	r3, r2
 8000770:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000774:	3301      	adds	r3, #1
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	2b0f      	cmp	r3, #15
 800077c:	f67f aeda 	bls.w	8000534 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000780:	bf00      	nop
 8000782:	372c      	adds	r7, #44	; 0x2c
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	10210000 	.word	0x10210000
 8000790:	10110000 	.word	0x10110000
 8000794:	10120000 	.word	0x10120000
 8000798:	10310000 	.word	0x10310000
 800079c:	10320000 	.word	0x10320000
 80007a0:	10220000 	.word	0x10220000
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010000 	.word	0x40010000
 80007ac:	40010800 	.word	0x40010800
 80007b0:	40010c00 	.word	0x40010c00
 80007b4:	40011000 	.word	0x40011000
 80007b8:	40010400 	.word	0x40010400

080007bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	689a      	ldr	r2, [r3, #8]
 80007cc:	887b      	ldrh	r3, [r7, #2]
 80007ce:	4013      	ands	r3, r2
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d002      	beq.n	80007da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80007d4:	2301      	movs	r3, #1
 80007d6:	73fb      	strb	r3, [r7, #15]
 80007d8:	e001      	b.n	80007de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007de:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	807b      	strh	r3, [r7, #2]
 80007f6:	4613      	mov	r3, r2
 80007f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007fa:	787b      	ldrb	r3, [r7, #1]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d003      	beq.n	8000808 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000800:	887a      	ldrh	r2, [r7, #2]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000806:	e003      	b.n	8000810 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000808:	887b      	ldrh	r3, [r7, #2]
 800080a:	041a      	lsls	r2, r3, #16
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	611a      	str	r2, [r3, #16]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
	...

0800081c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	2b00      	cmp	r3, #0
 8000832:	f000 8087 	beq.w	8000944 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000836:	4b92      	ldr	r3, [pc, #584]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	f003 030c 	and.w	r3, r3, #12
 800083e:	2b04      	cmp	r3, #4
 8000840:	d00c      	beq.n	800085c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000842:	4b8f      	ldr	r3, [pc, #572]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	f003 030c 	and.w	r3, r3, #12
 800084a:	2b08      	cmp	r3, #8
 800084c:	d112      	bne.n	8000874 <HAL_RCC_OscConfig+0x58>
 800084e:	4b8c      	ldr	r3, [pc, #560]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800085a:	d10b      	bne.n	8000874 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800085c:	4b88      	ldr	r3, [pc, #544]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000864:	2b00      	cmp	r3, #0
 8000866:	d06c      	beq.n	8000942 <HAL_RCC_OscConfig+0x126>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d168      	bne.n	8000942 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000870:	2301      	movs	r3, #1
 8000872:	e22d      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800087c:	d106      	bne.n	800088c <HAL_RCC_OscConfig+0x70>
 800087e:	4b80      	ldr	r3, [pc, #512]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a7f      	ldr	r2, [pc, #508]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 8000884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	e02e      	b.n	80008ea <HAL_RCC_OscConfig+0xce>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d10c      	bne.n	80008ae <HAL_RCC_OscConfig+0x92>
 8000894:	4b7a      	ldr	r3, [pc, #488]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a79      	ldr	r2, [pc, #484]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 800089a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	4b77      	ldr	r3, [pc, #476]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a76      	ldr	r2, [pc, #472]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 80008a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	e01d      	b.n	80008ea <HAL_RCC_OscConfig+0xce>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008b6:	d10c      	bne.n	80008d2 <HAL_RCC_OscConfig+0xb6>
 80008b8:	4b71      	ldr	r3, [pc, #452]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a70      	ldr	r2, [pc, #448]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 80008be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b6e      	ldr	r3, [pc, #440]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a6d      	ldr	r2, [pc, #436]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 80008ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	e00b      	b.n	80008ea <HAL_RCC_OscConfig+0xce>
 80008d2:	4b6b      	ldr	r3, [pc, #428]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a6a      	ldr	r2, [pc, #424]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 80008d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008dc:	6013      	str	r3, [r2, #0]
 80008de:	4b68      	ldr	r3, [pc, #416]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a67      	ldr	r2, [pc, #412]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 80008e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008e8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d013      	beq.n	800091a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008f2:	f7ff fc83 	bl	80001fc <HAL_GetTick>
 80008f6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f8:	e008      	b.n	800090c <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008fa:	f7ff fc7f 	bl	80001fc <HAL_GetTick>
 80008fe:	4602      	mov	r2, r0
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	2b64      	cmp	r3, #100	; 0x64
 8000906:	d901      	bls.n	800090c <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000908:	2303      	movs	r3, #3
 800090a:	e1e1      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800090c:	4b5c      	ldr	r3, [pc, #368]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000914:	2b00      	cmp	r3, #0
 8000916:	d0f0      	beq.n	80008fa <HAL_RCC_OscConfig+0xde>
 8000918:	e014      	b.n	8000944 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800091a:	f7ff fc6f 	bl	80001fc <HAL_GetTick>
 800091e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000920:	e008      	b.n	8000934 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000922:	f7ff fc6b 	bl	80001fc <HAL_GetTick>
 8000926:	4602      	mov	r2, r0
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	2b64      	cmp	r3, #100	; 0x64
 800092e:	d901      	bls.n	8000934 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000930:	2303      	movs	r3, #3
 8000932:	e1cd      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000934:	4b52      	ldr	r3, [pc, #328]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1f0      	bne.n	8000922 <HAL_RCC_OscConfig+0x106>
 8000940:	e000      	b.n	8000944 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000942:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f003 0302 	and.w	r3, r3, #2
 800094c:	2b00      	cmp	r3, #0
 800094e:	d063      	beq.n	8000a18 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000950:	4b4b      	ldr	r3, [pc, #300]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f003 030c 	and.w	r3, r3, #12
 8000958:	2b00      	cmp	r3, #0
 800095a:	d00b      	beq.n	8000974 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800095c:	4b48      	ldr	r3, [pc, #288]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f003 030c 	and.w	r3, r3, #12
 8000964:	2b08      	cmp	r3, #8
 8000966:	d11c      	bne.n	80009a2 <HAL_RCC_OscConfig+0x186>
 8000968:	4b45      	ldr	r3, [pc, #276]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000970:	2b00      	cmp	r3, #0
 8000972:	d116      	bne.n	80009a2 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000974:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f003 0302 	and.w	r3, r3, #2
 800097c:	2b00      	cmp	r3, #0
 800097e:	d005      	beq.n	800098c <HAL_RCC_OscConfig+0x170>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	691b      	ldr	r3, [r3, #16]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d001      	beq.n	800098c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	e1a1      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800098c:	4b3c      	ldr	r3, [pc, #240]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	4939      	ldr	r1, [pc, #228]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 800099c:	4313      	orrs	r3, r2
 800099e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009a0:	e03a      	b.n	8000a18 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d020      	beq.n	80009ec <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009aa:	4b36      	ldr	r3, [pc, #216]	; (8000a84 <HAL_RCC_OscConfig+0x268>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009b0:	f7ff fc24 	bl	80001fc <HAL_GetTick>
 80009b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009b6:	e008      	b.n	80009ca <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009b8:	f7ff fc20 	bl	80001fc <HAL_GetTick>
 80009bc:	4602      	mov	r2, r0
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d901      	bls.n	80009ca <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80009c6:	2303      	movs	r3, #3
 80009c8:	e182      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ca:	4b2d      	ldr	r3, [pc, #180]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0f0      	beq.n	80009b8 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009d6:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	4926      	ldr	r1, [pc, #152]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 80009e6:	4313      	orrs	r3, r2
 80009e8:	600b      	str	r3, [r1, #0]
 80009ea:	e015      	b.n	8000a18 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009ec:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <HAL_RCC_OscConfig+0x268>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009f2:	f7ff fc03 	bl	80001fc <HAL_GetTick>
 80009f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009f8:	e008      	b.n	8000a0c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009fa:	f7ff fbff 	bl	80001fc <HAL_GetTick>
 80009fe:	4602      	mov	r2, r0
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d901      	bls.n	8000a0c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	e161      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1f0      	bne.n	80009fa <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f003 0308 	and.w	r3, r3, #8
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d039      	beq.n	8000a98 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d019      	beq.n	8000a60 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a32:	f7ff fbe3 	bl	80001fc <HAL_GetTick>
 8000a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a38:	e008      	b.n	8000a4c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a3a:	f7ff fbdf 	bl	80001fc <HAL_GetTick>
 8000a3e:	4602      	mov	r2, r0
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d901      	bls.n	8000a4c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	e141      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <HAL_RCC_OscConfig+0x264>)
 8000a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a50:	f003 0302 	and.w	r3, r3, #2
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d0f0      	beq.n	8000a3a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 fae3 	bl	8001024 <RCC_Delay>
 8000a5e:	e01b      	b.n	8000a98 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a66:	f7ff fbc9 	bl	80001fc <HAL_GetTick>
 8000a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a6c:	e00e      	b.n	8000a8c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a6e:	f7ff fbc5 	bl	80001fc <HAL_GetTick>
 8000a72:	4602      	mov	r2, r0
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d907      	bls.n	8000a8c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	e127      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4b4>
 8000a80:	40021000 	.word	0x40021000
 8000a84:	42420000 	.word	0x42420000
 8000a88:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a8c:	4b92      	ldr	r3, [pc, #584]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1ea      	bne.n	8000a6e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f000 80a6 	beq.w	8000bf2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aaa:	4b8b      	ldr	r3, [pc, #556]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d10d      	bne.n	8000ad2 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b88      	ldr	r3, [pc, #544]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a87      	ldr	r2, [pc, #540]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	61d3      	str	r3, [r2, #28]
 8000ac2:	4b85      	ldr	r3, [pc, #532]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ad2:	4b82      	ldr	r3, [pc, #520]	; (8000cdc <HAL_RCC_OscConfig+0x4c0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d118      	bne.n	8000b10 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ade:	4b7f      	ldr	r3, [pc, #508]	; (8000cdc <HAL_RCC_OscConfig+0x4c0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a7e      	ldr	r2, [pc, #504]	; (8000cdc <HAL_RCC_OscConfig+0x4c0>)
 8000ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000aea:	f7ff fb87 	bl	80001fc <HAL_GetTick>
 8000aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af0:	e008      	b.n	8000b04 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000af2:	f7ff fb83 	bl	80001fc <HAL_GetTick>
 8000af6:	4602      	mov	r2, r0
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	2b64      	cmp	r3, #100	; 0x64
 8000afe:	d901      	bls.n	8000b04 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000b00:	2303      	movs	r3, #3
 8000b02:	e0e5      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b04:	4b75      	ldr	r3, [pc, #468]	; (8000cdc <HAL_RCC_OscConfig+0x4c0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0f0      	beq.n	8000af2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d106      	bne.n	8000b26 <HAL_RCC_OscConfig+0x30a>
 8000b18:	4b6f      	ldr	r3, [pc, #444]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000b1a:	6a1b      	ldr	r3, [r3, #32]
 8000b1c:	4a6e      	ldr	r2, [pc, #440]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6213      	str	r3, [r2, #32]
 8000b24:	e02d      	b.n	8000b82 <HAL_RCC_OscConfig+0x366>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d10c      	bne.n	8000b48 <HAL_RCC_OscConfig+0x32c>
 8000b2e:	4b6a      	ldr	r3, [pc, #424]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000b30:	6a1b      	ldr	r3, [r3, #32]
 8000b32:	4a69      	ldr	r2, [pc, #420]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000b34:	f023 0301 	bic.w	r3, r3, #1
 8000b38:	6213      	str	r3, [r2, #32]
 8000b3a:	4b67      	ldr	r3, [pc, #412]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000b3c:	6a1b      	ldr	r3, [r3, #32]
 8000b3e:	4a66      	ldr	r2, [pc, #408]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000b40:	f023 0304 	bic.w	r3, r3, #4
 8000b44:	6213      	str	r3, [r2, #32]
 8000b46:	e01c      	b.n	8000b82 <HAL_RCC_OscConfig+0x366>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	2b05      	cmp	r3, #5
 8000b4e:	d10c      	bne.n	8000b6a <HAL_RCC_OscConfig+0x34e>
 8000b50:	4b61      	ldr	r3, [pc, #388]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000b52:	6a1b      	ldr	r3, [r3, #32]
 8000b54:	4a60      	ldr	r2, [pc, #384]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6213      	str	r3, [r2, #32]
 8000b5c:	4b5e      	ldr	r3, [pc, #376]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000b5e:	6a1b      	ldr	r3, [r3, #32]
 8000b60:	4a5d      	ldr	r2, [pc, #372]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6213      	str	r3, [r2, #32]
 8000b68:	e00b      	b.n	8000b82 <HAL_RCC_OscConfig+0x366>
 8000b6a:	4b5b      	ldr	r3, [pc, #364]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000b6c:	6a1b      	ldr	r3, [r3, #32]
 8000b6e:	4a5a      	ldr	r2, [pc, #360]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000b70:	f023 0301 	bic.w	r3, r3, #1
 8000b74:	6213      	str	r3, [r2, #32]
 8000b76:	4b58      	ldr	r3, [pc, #352]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000b78:	6a1b      	ldr	r3, [r3, #32]
 8000b7a:	4a57      	ldr	r2, [pc, #348]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000b7c:	f023 0304 	bic.w	r3, r3, #4
 8000b80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d015      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b8a:	f7ff fb37 	bl	80001fc <HAL_GetTick>
 8000b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b90:	e00a      	b.n	8000ba8 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b92:	f7ff fb33 	bl	80001fc <HAL_GetTick>
 8000b96:	4602      	mov	r2, r0
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d901      	bls.n	8000ba8 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	e093      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ba8:	4b4b      	ldr	r3, [pc, #300]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000baa:	6a1b      	ldr	r3, [r3, #32]
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d0ee      	beq.n	8000b92 <HAL_RCC_OscConfig+0x376>
 8000bb4:	e014      	b.n	8000be0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bb6:	f7ff fb21 	bl	80001fc <HAL_GetTick>
 8000bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bbc:	e00a      	b.n	8000bd4 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bbe:	f7ff fb1d 	bl	80001fc <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d901      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e07d      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bd4:	4b40      	ldr	r3, [pc, #256]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000bd6:	6a1b      	ldr	r3, [r3, #32]
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d1ee      	bne.n	8000bbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000be0:	7dfb      	ldrb	r3, [r7, #23]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d105      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000be6:	4b3c      	ldr	r3, [pc, #240]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a3b      	ldr	r2, [pc, #236]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d069      	beq.n	8000cce <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bfa:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
 8000c02:	2b08      	cmp	r3, #8
 8000c04:	d061      	beq.n	8000cca <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d146      	bne.n	8000c9c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c0e:	4b34      	ldr	r3, [pc, #208]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c14:	f7ff faf2 	bl	80001fc <HAL_GetTick>
 8000c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c1a:	e008      	b.n	8000c2e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c1c:	f7ff faee 	bl	80001fc <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d901      	bls.n	8000c2e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e050      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1f0      	bne.n	8000c1c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a1b      	ldr	r3, [r3, #32]
 8000c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c42:	d108      	bne.n	8000c56 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c44:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	4921      	ldr	r1, [pc, #132]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000c52:	4313      	orrs	r3, r2
 8000c54:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a19      	ldr	r1, [r3, #32]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	430b      	orrs	r3, r1
 8000c68:	491b      	ldr	r1, [pc, #108]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c74:	f7ff fac2 	bl	80001fc <HAL_GetTick>
 8000c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c7a:	e008      	b.n	8000c8e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c7c:	f7ff fabe 	bl	80001fc <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d901      	bls.n	8000c8e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e020      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0f0      	beq.n	8000c7c <HAL_RCC_OscConfig+0x460>
 8000c9a:	e018      	b.n	8000cce <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c9c:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca2:	f7ff faab 	bl	80001fc <HAL_GetTick>
 8000ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ca8:	e008      	b.n	8000cbc <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000caa:	f7ff faa7 	bl	80001fc <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d901      	bls.n	8000cbc <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e009      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_RCC_OscConfig+0x4bc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1f0      	bne.n	8000caa <HAL_RCC_OscConfig+0x48e>
 8000cc8:	e001      	b.n	8000cce <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e000      	b.n	8000cd0 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40007000 	.word	0x40007000
 8000ce0:	42420060 	.word	0x42420060

08000ce4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cf2:	4b7e      	ldr	r3, [pc, #504]	; (8000eec <HAL_RCC_ClockConfig+0x208>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d910      	bls.n	8000d22 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d00:	4b7a      	ldr	r3, [pc, #488]	; (8000eec <HAL_RCC_ClockConfig+0x208>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f023 0207 	bic.w	r2, r3, #7
 8000d08:	4978      	ldr	r1, [pc, #480]	; (8000eec <HAL_RCC_ClockConfig+0x208>)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d10:	4b76      	ldr	r3, [pc, #472]	; (8000eec <HAL_RCC_ClockConfig+0x208>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d001      	beq.n	8000d22 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e0e0      	b.n	8000ee4 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d020      	beq.n	8000d70 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d005      	beq.n	8000d46 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d3a:	4b6d      	ldr	r3, [pc, #436]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	4a6c      	ldr	r2, [pc, #432]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000d40:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d44:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d005      	beq.n	8000d5e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d52:	4b67      	ldr	r3, [pc, #412]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	4a66      	ldr	r2, [pc, #408]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000d58:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d5c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d5e:	4b64      	ldr	r3, [pc, #400]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	4961      	ldr	r1, [pc, #388]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d06a      	beq.n	8000e52 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d107      	bne.n	8000d94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d84:	4b5a      	ldr	r3, [pc, #360]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d115      	bne.n	8000dbc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e0a7      	b.n	8000ee4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d107      	bne.n	8000dac <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d9c:	4b54      	ldr	r3, [pc, #336]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d109      	bne.n	8000dbc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e09b      	b.n	8000ee4 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dac:	4b50      	ldr	r3, [pc, #320]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e093      	b.n	8000ee4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dbc:	4b4c      	ldr	r3, [pc, #304]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f023 0203 	bic.w	r2, r3, #3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	4949      	ldr	r1, [pc, #292]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000dce:	f7ff fa15 	bl	80001fc <HAL_GetTick>
 8000dd2:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d112      	bne.n	8000e02 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ddc:	e00a      	b.n	8000df4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dde:	f7ff fa0d 	bl	80001fc <HAL_GetTick>
 8000de2:	4602      	mov	r2, r0
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d901      	bls.n	8000df4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e077      	b.n	8000ee4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000df4:	4b3e      	ldr	r3, [pc, #248]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 030c 	and.w	r3, r3, #12
 8000dfc:	2b04      	cmp	r3, #4
 8000dfe:	d1ee      	bne.n	8000dde <HAL_RCC_ClockConfig+0xfa>
 8000e00:	e027      	b.n	8000e52 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d11d      	bne.n	8000e46 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e0a:	e00a      	b.n	8000e22 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e0c:	f7ff f9f6 	bl	80001fc <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e060      	b.n	8000ee4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e22:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 030c 	and.w	r3, r3, #12
 8000e2a:	2b08      	cmp	r3, #8
 8000e2c:	d1ee      	bne.n	8000e0c <HAL_RCC_ClockConfig+0x128>
 8000e2e:	e010      	b.n	8000e52 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e30:	f7ff f9e4 	bl	80001fc <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e04e      	b.n	8000ee4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e46:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1ee      	bne.n	8000e30 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <HAL_RCC_ClockConfig+0x208>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d210      	bcs.n	8000e82 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_RCC_ClockConfig+0x208>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f023 0207 	bic.w	r2, r3, #7
 8000e68:	4920      	ldr	r1, [pc, #128]	; (8000eec <HAL_RCC_ClockConfig+0x208>)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <HAL_RCC_ClockConfig+0x208>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d001      	beq.n	8000e82 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e030      	b.n	8000ee4 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d008      	beq.n	8000ea0 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	4915      	ldr	r1, [pc, #84]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d009      	beq.n	8000ec0 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	490d      	ldr	r1, [pc, #52]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ec0:	f000 f81c 	bl	8000efc <HAL_RCC_GetSysClockFreq>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_RCC_ClockConfig+0x20c>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	091b      	lsrs	r3, r3, #4
 8000ecc:	f003 030f 	and.w	r3, r3, #15
 8000ed0:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <HAL_RCC_ClockConfig+0x210>)
 8000ed2:	5cd3      	ldrb	r3, [r2, r3]
 8000ed4:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_RCC_ClockConfig+0x214>)
 8000eda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f7ff f94b 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40022000 	.word	0x40022000
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	0800224c 	.word	0x0800224c
 8000ef8:	20000008 	.word	0x20000008

08000efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000efc:	b490      	push	{r4, r7}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f02:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f04:	1d3c      	adds	r4, r7, #4
 8000f06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f0c:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 030c 	and.w	r3, r3, #12
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d002      	beq.n	8000f3c <HAL_RCC_GetSysClockFreq+0x40>
 8000f36:	2b08      	cmp	r3, #8
 8000f38:	d003      	beq.n	8000f42 <HAL_RCC_GetSysClockFreq+0x46>
 8000f3a:	e02d      	b.n	8000f98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f3e:	623b      	str	r3, [r7, #32]
      break;
 8000f40:	e02d      	b.n	8000f9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	0c9b      	lsrs	r3, r3, #18
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f4e:	4413      	add	r3, r2
 8000f50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000f54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d013      	beq.n	8000f88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	0c5b      	lsrs	r3, r3, #17
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f6e:	4413      	add	r3, r2
 8000f70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000f74:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f7a:	fb02 f203 	mul.w	r2, r2, r3
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
 8000f86:	e004      	b.n	8000f92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	4a0c      	ldr	r2, [pc, #48]	; (8000fbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f8c:	fb02 f303 	mul.w	r3, r2, r3
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	623b      	str	r3, [r7, #32]
      break;
 8000f96:	e002      	b.n	8000f9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f9a:	623b      	str	r3, [r7, #32]
      break;
 8000f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3728      	adds	r7, #40	; 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc90      	pop	{r4, r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	08002238 	.word	0x08002238
 8000fb0:	08002248 	.word	0x08002248
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	007a1200 	.word	0x007a1200
 8000fbc:	003d0900 	.word	0x003d0900

08000fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fc4:	4b02      	ldr	r3, [pc, #8]	; (8000fd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000fd8:	f7ff fff2 	bl	8000fc0 <HAL_RCC_GetHCLKFreq>
 8000fdc:	4601      	mov	r1, r0
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	0a1b      	lsrs	r3, r3, #8
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	4a03      	ldr	r2, [pc, #12]	; (8000ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fea:	5cd3      	ldrb	r3, [r2, r3]
 8000fec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	0800225c 	.word	0x0800225c

08000ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001000:	f7ff ffde 	bl	8000fc0 <HAL_RCC_GetHCLKFreq>
 8001004:	4601      	mov	r1, r0
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	0adb      	lsrs	r3, r3, #11
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	4a03      	ldr	r2, [pc, #12]	; (8001020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001012:	5cd3      	ldrb	r3, [r2, r3]
 8001014:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001018:	4618      	mov	r0, r3
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40021000 	.word	0x40021000
 8001020:	0800225c 	.word	0x0800225c

08001024 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <RCC_Delay+0x34>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <RCC_Delay+0x38>)
 8001032:	fba2 2303 	umull	r2, r3, r2, r3
 8001036:	0a5b      	lsrs	r3, r3, #9
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	fb02 f303 	mul.w	r3, r2, r3
 800103e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001040:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	1e5a      	subs	r2, r3, #1
 8001046:	60fa      	str	r2, [r7, #12]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f9      	bne.n	8001040 <RCC_Delay+0x1c>
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008
 800105c:	10624dd3 	.word	0x10624dd3

08001060 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e03f      	b.n	80010f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d106      	bne.n	800108c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 ffbc 	bl	8002004 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2224      	movs	r2, #36	; 0x24
 8001090:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68da      	ldr	r2, [r3, #12]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010a2:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 fb8d 	bl	80017c4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80010b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	695a      	ldr	r2, [r3, #20]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80010c8:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010d8:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2220      	movs	r2, #32
 80010e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2220      	movs	r2, #32
 80010ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b088      	sub	sp, #32
 80010fe:	af02      	add	r7, sp, #8
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	4613      	mov	r3, r2
 8001108:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b20      	cmp	r3, #32
 8001118:	f040 8083 	bne.w	8001222 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d002      	beq.n	8001128 <HAL_UART_Transmit+0x2e>
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e07b      	b.n	8001224 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001132:	2b01      	cmp	r3, #1
 8001134:	d101      	bne.n	800113a <HAL_UART_Transmit+0x40>
 8001136:	2302      	movs	r3, #2
 8001138:	e074      	b.n	8001224 <HAL_UART_Transmit+0x12a>
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2201      	movs	r2, #1
 800113e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2200      	movs	r2, #0
 8001146:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2221      	movs	r2, #33	; 0x21
 800114c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001150:	f7ff f854 	bl	80001fc <HAL_GetTick>
 8001154:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	88fa      	ldrh	r2, [r7, #6]
 800115a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	88fa      	ldrh	r2, [r7, #6]
 8001160:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001162:	e042      	b.n	80011ea <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001168:	b29b      	uxth	r3, r3
 800116a:	3b01      	subs	r3, #1
 800116c:	b29a      	uxth	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800117a:	d122      	bne.n	80011c2 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	2200      	movs	r2, #0
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f000 f9b2 	bl	80014f0 <UART_WaitOnFlagUntilTimeout>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e046      	b.n	8001224 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011a8:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d103      	bne.n	80011ba <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	3302      	adds	r3, #2
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	e017      	b.n	80011ea <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	3301      	adds	r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	e013      	b.n	80011ea <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2200      	movs	r2, #0
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f000 f98f 	bl	80014f0 <UART_WaitOnFlagUntilTimeout>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e023      	b.n	8001224 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	60ba      	str	r2, [r7, #8]
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1b7      	bne.n	8001164 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2200      	movs	r2, #0
 80011fc:	2140      	movs	r1, #64	; 0x40
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 f976 	bl	80014f0 <UART_WaitOnFlagUntilTimeout>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e00a      	b.n	8001224 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2220      	movs	r2, #32
 8001212:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001222:	2302      	movs	r3, #2
  }
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	4613      	mov	r3, r2
 8001238:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b20      	cmp	r3, #32
 8001244:	d140      	bne.n	80012c8 <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d002      	beq.n	8001252 <HAL_UART_Receive_IT+0x26>
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e039      	b.n	80012ca <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800125c:	2b01      	cmp	r3, #1
 800125e:	d101      	bne.n	8001264 <HAL_UART_Receive_IT+0x38>
 8001260:	2302      	movs	r3, #2
 8001262:	e032      	b.n	80012ca <HAL_UART_Receive_IT+0x9e>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	88fa      	ldrh	r2, [r7, #6]
 8001276:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	88fa      	ldrh	r2, [r7, #6]
 800127c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2200      	movs	r2, #0
 8001282:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2222      	movs	r2, #34	; 0x22
 8001288:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012a2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695a      	ldr	r2, [r3, #20]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0201 	orr.w	r2, r2, #1
 80012b2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0220 	orr.w	r2, r2, #32
 80012c2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e000      	b.n	80012ca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80012c8:	2302      	movs	r3, #2
  }
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10d      	bne.n	8001326 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	f003 0320 	and.w	r3, r3, #32
 8001310:	2b00      	cmp	r3, #0
 8001312:	d008      	beq.n	8001326 <HAL_UART_IRQHandler+0x52>
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	f003 0320 	and.w	r3, r3, #32
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f9ce 	bl	80016c0 <UART_Receive_IT>
      return;
 8001324:	e0cc      	b.n	80014c0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80ab 	beq.w	8001484 <HAL_UART_IRQHandler+0x1b0>
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	d105      	bne.n	8001344 <HAL_UART_IRQHandler+0x70>
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 80a0 	beq.w	8001484 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00a      	beq.n	8001364 <HAL_UART_IRQHandler+0x90>
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135c:	f043 0201 	orr.w	r2, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00a      	beq.n	8001384 <HAL_UART_IRQHandler+0xb0>
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137c:	f043 0202 	orr.w	r2, r3, #2
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00a      	beq.n	80013a4 <HAL_UART_IRQHandler+0xd0>
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139c:	f043 0204 	orr.w	r2, r3, #4
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00a      	beq.n	80013c4 <HAL_UART_IRQHandler+0xf0>
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013bc:	f043 0208 	orr.w	r2, r3, #8
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d078      	beq.n	80014be <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f003 0320 	and.w	r3, r3, #32
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d007      	beq.n	80013e6 <HAL_UART_IRQHandler+0x112>
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	f003 0320 	and.w	r3, r3, #32
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f96d 	bl	80016c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf14      	ite	ne
 80013f4:	2301      	movne	r3, #1
 80013f6:	2300      	moveq	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <HAL_UART_IRQHandler+0x13a>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d031      	beq.n	8001472 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f8b8 	bl	8001584 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141e:	2b00      	cmp	r3, #0
 8001420:	d023      	beq.n	800146a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	695a      	ldr	r2, [r3, #20]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001430:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001436:	2b00      	cmp	r3, #0
 8001438:	d013      	beq.n	8001462 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143e:	4a22      	ldr	r2, [pc, #136]	; (80014c8 <HAL_UART_IRQHandler+0x1f4>)
 8001440:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe ffec 	bl	8000424 <HAL_DMA_Abort_IT>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d016      	beq.n	8001480 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800145c:	4610      	mov	r0, r2
 800145e:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001460:	e00e      	b.n	8001480 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f83b 	bl	80014de <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001468:	e00a      	b.n	8001480 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f837 	bl	80014de <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001470:	e006      	b.n	8001480 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f833 	bl	80014de <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800147e:	e01e      	b.n	80014be <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001480:	bf00      	nop
    return;
 8001482:	e01c      	b.n	80014be <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148a:	2b00      	cmp	r3, #0
 800148c:	d008      	beq.n	80014a0 <HAL_UART_IRQHandler+0x1cc>
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f8a4 	bl	80015e6 <UART_Transmit_IT>
    return;
 800149e:	e00f      	b.n	80014c0 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00a      	beq.n	80014c0 <HAL_UART_IRQHandler+0x1ec>
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f8eb 	bl	8001690 <UART_EndTransmit_IT>
    return;
 80014ba:	bf00      	nop
 80014bc:	e000      	b.n	80014c0 <HAL_UART_IRQHandler+0x1ec>
    return;
 80014be:	bf00      	nop
  }
}
 80014c0:	3720      	adds	r7, #32
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	080015bf 	.word	0x080015bf

080014cc <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	4613      	mov	r3, r2
 80014fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001500:	e02c      	b.n	800155c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d028      	beq.n	800155c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d007      	beq.n	8001520 <UART_WaitOnFlagUntilTimeout+0x30>
 8001510:	f7fe fe74 	bl	80001fc <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	429a      	cmp	r2, r3
 800151e:	d21d      	bcs.n	800155c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800152e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0201 	bic.w	r2, r2, #1
 800153e:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2220      	movs	r2, #32
 8001544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2220      	movs	r2, #32
 800154c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e00f      	b.n	800157c <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	4013      	ands	r3, r2
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	429a      	cmp	r2, r3
 800156a:	bf0c      	ite	eq
 800156c:	2301      	moveq	r3, #1
 800156e:	2300      	movne	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	461a      	mov	r2, r3
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	429a      	cmp	r2, r3
 8001578:	d0c3      	beq.n	8001502 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800159a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0201 	bic.w	r2, r2, #1
 80015aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2220      	movs	r2, #32
 80015b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7ff ff80 	bl	80014de <HAL_UART_ErrorCallback>
}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b21      	cmp	r3, #33	; 0x21
 80015f8:	d144      	bne.n	8001684 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001602:	d11a      	bne.n	800163a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001618:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d105      	bne.n	800162e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	1c9a      	adds	r2, r3, #2
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	621a      	str	r2, [r3, #32]
 800162c:	e00e      	b.n	800164c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	621a      	str	r2, [r3, #32]
 8001638:	e008      	b.n	800164c <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	1c59      	adds	r1, r3, #1
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6211      	str	r1, [r2, #32]
 8001644:	781a      	ldrb	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001650:	b29b      	uxth	r3, r3
 8001652:	3b01      	subs	r3, #1
 8001654:	b29b      	uxth	r3, r3
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4619      	mov	r1, r3
 800165a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10f      	bne.n	8001680 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800166e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800167e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	e000      	b.n	8001686 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001684:	2302      	movs	r3, #2
  }
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016a6:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2220      	movs	r2, #32
 80016ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff0b 	bl	80014cc <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b22      	cmp	r3, #34	; 0x22
 80016d2:	d171      	bne.n	80017b8 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016dc:	d123      	bne.n	8001726 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10e      	bne.n	800170a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001702:	1c9a      	adds	r2, r3, #2
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	629a      	str	r2, [r3, #40]	; 0x28
 8001708:	e029      	b.n	800175e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	b29b      	uxth	r3, r3
 8001712:	b2db      	uxtb	r3, r3
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	629a      	str	r2, [r3, #40]	; 0x28
 8001724:	e01b      	b.n	800175e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10a      	bne.n	8001744 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6858      	ldr	r0, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	1c59      	adds	r1, r3, #1
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6291      	str	r1, [r2, #40]	; 0x28
 800173e:	b2c2      	uxtb	r2, r0
 8001740:	701a      	strb	r2, [r3, #0]
 8001742:	e00c      	b.n	800175e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	1c58      	adds	r0, r3, #1
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	6288      	str	r0, [r1, #40]	; 0x28
 8001756:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001762:	b29b      	uxth	r3, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	b29b      	uxth	r3, r3
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	4619      	mov	r1, r3
 800176c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800176e:	2b00      	cmp	r3, #0
 8001770:	d120      	bne.n	80017b4 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0220 	bic.w	r2, r2, #32
 8001780:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001790:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695a      	ldr	r2, [r3, #20]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0201 	bic.w	r2, r2, #1
 80017a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2220      	movs	r2, #32
 80017a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 fbde 	bl	8001f6c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e002      	b.n	80017ba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	e000      	b.n	80017ba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80017b8:	2302      	movs	r3, #2
  }
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017c4:	b5b0      	push	{r4, r5, r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001806:	f023 030c 	bic.w	r3, r3, #12
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	68f9      	ldr	r1, [r7, #12]
 8001810:	430b      	orrs	r3, r1
 8001812:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699a      	ldr	r2, [r3, #24]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a6f      	ldr	r2, [pc, #444]	; (80019ec <UART_SetConfig+0x228>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d16b      	bne.n	800190c <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001834:	f7ff fbe2 	bl	8000ffc <HAL_RCC_GetPCLK2Freq>
 8001838:	4602      	mov	r2, r0
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	009a      	lsls	r2, r3, #2
 8001842:	441a      	add	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	4a68      	ldr	r2, [pc, #416]	; (80019f0 <UART_SetConfig+0x22c>)
 8001850:	fba2 2303 	umull	r2, r3, r2, r3
 8001854:	095b      	lsrs	r3, r3, #5
 8001856:	011c      	lsls	r4, r3, #4
 8001858:	f7ff fbd0 	bl	8000ffc <HAL_RCC_GetPCLK2Freq>
 800185c:	4602      	mov	r2, r0
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	009a      	lsls	r2, r3, #2
 8001866:	441a      	add	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	fbb2 f5f3 	udiv	r5, r2, r3
 8001872:	f7ff fbc3 	bl	8000ffc <HAL_RCC_GetPCLK2Freq>
 8001876:	4602      	mov	r2, r0
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	009a      	lsls	r2, r3, #2
 8001880:	441a      	add	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	fbb2 f3f3 	udiv	r3, r2, r3
 800188c:	4a58      	ldr	r2, [pc, #352]	; (80019f0 <UART_SetConfig+0x22c>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	2264      	movs	r2, #100	; 0x64
 8001896:	fb02 f303 	mul.w	r3, r2, r3
 800189a:	1aeb      	subs	r3, r5, r3
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	3332      	adds	r3, #50	; 0x32
 80018a0:	4a53      	ldr	r2, [pc, #332]	; (80019f0 <UART_SetConfig+0x22c>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ac:	441c      	add	r4, r3
 80018ae:	f7ff fba5 	bl	8000ffc <HAL_RCC_GetPCLK2Freq>
 80018b2:	4602      	mov	r2, r0
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	009a      	lsls	r2, r3, #2
 80018bc:	441a      	add	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	fbb2 f5f3 	udiv	r5, r2, r3
 80018c8:	f7ff fb98 	bl	8000ffc <HAL_RCC_GetPCLK2Freq>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	009a      	lsls	r2, r3, #2
 80018d6:	441a      	add	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4a43      	ldr	r2, [pc, #268]	; (80019f0 <UART_SetConfig+0x22c>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	095b      	lsrs	r3, r3, #5
 80018ea:	2264      	movs	r2, #100	; 0x64
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	1aeb      	subs	r3, r5, r3
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	3332      	adds	r3, #50	; 0x32
 80018f6:	4a3e      	ldr	r2, [pc, #248]	; (80019f0 <UART_SetConfig+0x22c>)
 80018f8:	fba2 2303 	umull	r2, r3, r2, r3
 80018fc:	095b      	lsrs	r3, r3, #5
 80018fe:	f003 020f 	and.w	r2, r3, #15
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4422      	add	r2, r4
 8001908:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800190a:	e06a      	b.n	80019e2 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800190c:	f7ff fb62 	bl	8000fd4 <HAL_RCC_GetPCLK1Freq>
 8001910:	4602      	mov	r2, r0
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	009a      	lsls	r2, r3, #2
 800191a:	441a      	add	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	4a32      	ldr	r2, [pc, #200]	; (80019f0 <UART_SetConfig+0x22c>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	095b      	lsrs	r3, r3, #5
 800192e:	011c      	lsls	r4, r3, #4
 8001930:	f7ff fb50 	bl	8000fd4 <HAL_RCC_GetPCLK1Freq>
 8001934:	4602      	mov	r2, r0
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	009a      	lsls	r2, r3, #2
 800193e:	441a      	add	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	fbb2 f5f3 	udiv	r5, r2, r3
 800194a:	f7ff fb43 	bl	8000fd4 <HAL_RCC_GetPCLK1Freq>
 800194e:	4602      	mov	r2, r0
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	009a      	lsls	r2, r3, #2
 8001958:	441a      	add	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	4a22      	ldr	r2, [pc, #136]	; (80019f0 <UART_SetConfig+0x22c>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	2264      	movs	r2, #100	; 0x64
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	1aeb      	subs	r3, r5, r3
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	3332      	adds	r3, #50	; 0x32
 8001978:	4a1d      	ldr	r2, [pc, #116]	; (80019f0 <UART_SetConfig+0x22c>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001984:	441c      	add	r4, r3
 8001986:	f7ff fb25 	bl	8000fd4 <HAL_RCC_GetPCLK1Freq>
 800198a:	4602      	mov	r2, r0
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	009a      	lsls	r2, r3, #2
 8001994:	441a      	add	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	fbb2 f5f3 	udiv	r5, r2, r3
 80019a0:	f7ff fb18 	bl	8000fd4 <HAL_RCC_GetPCLK1Freq>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	009a      	lsls	r2, r3, #2
 80019ae:	441a      	add	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <UART_SetConfig+0x22c>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	095b      	lsrs	r3, r3, #5
 80019c2:	2264      	movs	r2, #100	; 0x64
 80019c4:	fb02 f303 	mul.w	r3, r2, r3
 80019c8:	1aeb      	subs	r3, r5, r3
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	3332      	adds	r3, #50	; 0x32
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <UART_SetConfig+0x22c>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	095b      	lsrs	r3, r3, #5
 80019d6:	f003 020f 	and.w	r2, r3, #15
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4422      	add	r2, r4
 80019e0:	609a      	str	r2, [r3, #8]
}
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bdb0      	pop	{r4, r5, r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40013800 	.word	0x40013800
 80019f0:	51eb851f 	.word	0x51eb851f

080019f4 <delay_us>:

#ifndef VI2C_H_
#define VI2C_H_

void delay_us(uint16_t n)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	80fb      	strh	r3, [r7, #6]
	uint16_t i=n*8; //8MHz，对应1/8微秒
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	81fb      	strh	r3, [r7, #14]
	while(i--);
 8001a04:	bf00      	nop
 8001a06:	89fb      	ldrh	r3, [r7, #14]
 8001a08:	1e5a      	subs	r2, r3, #1
 8001a0a:	81fa      	strh	r2, [r7, #14]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1fa      	bne.n	8001a06 <delay_us+0x12>
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
	...

08001a1c <Pin_vSDA_Mode>:

void Pin_vSDA_Mode(char status)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a26:	f107 0308 	add.w	r3, r7, #8
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOB, vSDA_Pin, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	2180      	movs	r1, #128	; 0x80
 8001a38:	480e      	ldr	r0, [pc, #56]	; (8001a74 <Pin_vSDA_Mode+0x58>)
 8001a3a:	f7fe fed6 	bl	80007ea <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = vSDA_Pin;
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	613b      	str	r3, [r7, #16]
	if(status=='I') //Input
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	2b49      	cmp	r3, #73	; 0x49
 8001a4a:	d102      	bne.n	8001a52 <Pin_vSDA_Mode+0x36>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	e006      	b.n	8001a60 <Pin_vSDA_Mode+0x44>
	}
	else if(status=='O') //Output
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	2b4f      	cmp	r3, #79	; 0x4f
 8001a56:	d103      	bne.n	8001a60 <Pin_vSDA_Mode+0x44>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a58:	2311      	movs	r3, #17
 8001a5a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	617b      	str	r3, [r7, #20]
	}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a60:	f107 0308 	add.w	r3, r7, #8
 8001a64:	4619      	mov	r1, r3
 8001a66:	4803      	ldr	r0, [pc, #12]	; (8001a74 <Pin_vSDA_Mode+0x58>)
 8001a68:	f7fe fd52 	bl	8000510 <HAL_GPIO_Init>
}
 8001a6c:	bf00      	nop
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40010c00 	.word	0x40010c00

08001a78 <vSCL_Out>:

void vSCL_Out(uint8_t dat)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
	switch(dat)
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d105      	bne.n	8001a94 <vSCL_Out+0x1c>
	{
		//case 1:HAL_GPIO_WritePin(GPIOB, vSCL_Pin, GPIO_PIN_SET)  ;break;
		case  0:HAL_GPIO_WritePin(GPIOB, vSCL_Pin, GPIO_PIN_RESET);break;
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2140      	movs	r1, #64	; 0x40
 8001a8c:	4806      	ldr	r0, [pc, #24]	; (8001aa8 <vSCL_Out+0x30>)
 8001a8e:	f7fe feac 	bl	80007ea <HAL_GPIO_WritePin>
 8001a92:	e004      	b.n	8001a9e <vSCL_Out+0x26>
		default:HAL_GPIO_WritePin(GPIOB, vSCL_Pin, GPIO_PIN_SET)  ;
 8001a94:	2201      	movs	r2, #1
 8001a96:	2140      	movs	r1, #64	; 0x40
 8001a98:	4803      	ldr	r0, [pc, #12]	; (8001aa8 <vSCL_Out+0x30>)
 8001a9a:	f7fe fea6 	bl	80007ea <HAL_GPIO_WritePin>
	}
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40010c00 	.word	0x40010c00

08001aac <vSDA_Out>:

void vSDA_Out(uint8_t dat)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
	//Pin_vSDA_Mode('O');
	switch(dat)
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d105      	bne.n	8001ac8 <vSDA_Out+0x1c>
	{
		//case 1:HAL_GPIO_WritePin(GPIOB, vSDA_Pin, GPIO_PIN_SET)  ;break;
		case  0:HAL_GPIO_WritePin(GPIOB, vSDA_Pin, GPIO_PIN_RESET);break;
 8001abc:	2200      	movs	r2, #0
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	4806      	ldr	r0, [pc, #24]	; (8001adc <vSDA_Out+0x30>)
 8001ac2:	f7fe fe92 	bl	80007ea <HAL_GPIO_WritePin>
 8001ac6:	e004      	b.n	8001ad2 <vSDA_Out+0x26>
		default:HAL_GPIO_WritePin(GPIOB, vSDA_Pin, GPIO_PIN_SET)  ;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	4803      	ldr	r0, [pc, #12]	; (8001adc <vSDA_Out+0x30>)
 8001ace:	f7fe fe8c 	bl	80007ea <HAL_GPIO_WritePin>
	}
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40010c00 	.word	0x40010c00

08001ae0 <vSDA_In>:

uint8_t vSDA_In()
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
	GPIO_PinState PinState;
	uint8_t rt;
	//Pin_vSDA_Mode('I');
	PinState=HAL_GPIO_ReadPin(GPIOB,vSDA_Pin);
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	4808      	ldr	r0, [pc, #32]	; (8001b0c <vSDA_In+0x2c>)
 8001aea:	f7fe fe67 	bl	80007bc <HAL_GPIO_ReadPin>
 8001aee:	4603      	mov	r3, r0
 8001af0:	71bb      	strb	r3, [r7, #6]
	switch(PinState)
 8001af2:	79bb      	ldrb	r3, [r7, #6]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <vSDA_In+0x1e>
	{
		//case GPIO_PIN_SET  :rt=1;break;
		case GPIO_PIN_RESET:rt=0;break;
 8001af8:	2300      	movs	r3, #0
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	e001      	b.n	8001b02 <vSDA_In+0x22>
		default:rt=1;
 8001afe:	2301      	movs	r3, #1
 8001b00:	71fb      	strb	r3, [r7, #7]
	}
	return rt;
 8001b02:	79fb      	ldrb	r3, [r7, #7]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40010c00 	.word	0x40010c00

08001b10 <I2C_Start>:

//启动I2C通信
void I2C_Start()
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	Pin_vSDA_Mode('O');
 8001b14:	204f      	movs	r0, #79	; 0x4f
 8001b16:	f7ff ff81 	bl	8001a1c <Pin_vSDA_Mode>
	vSDA_Out(1);
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f7ff ffc6 	bl	8001aac <vSDA_Out>
	delay_us(6);//至少延时4.7us
 8001b20:	2006      	movs	r0, #6
 8001b22:	f7ff ff67 	bl	80019f4 <delay_us>
	vSCL_Out(1);
 8001b26:	2001      	movs	r0, #1
 8001b28:	f7ff ffa6 	bl	8001a78 <vSCL_Out>
	delay_us(6);//至少延时4.7us
 8001b2c:	2006      	movs	r0, #6
 8001b2e:	f7ff ff61 	bl	80019f4 <delay_us>
	vSDA_Out(0);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f7ff ffba 	bl	8001aac <vSDA_Out>
	delay_us(6);//至少延时4us
 8001b38:	2006      	movs	r0, #6
 8001b3a:	f7ff ff5b 	bl	80019f4 <delay_us>
	vSCL_Out(0);
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f7ff ff9a 	bl	8001a78 <vSCL_Out>
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <I2C_Stop>:

//停止I2C通信
void I2C_Stop()
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	Pin_vSDA_Mode('O');
 8001b4c:	204f      	movs	r0, #79	; 0x4f
 8001b4e:	f7ff ff65 	bl	8001a1c <Pin_vSDA_Mode>
	vSDA_Out(0);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f7ff ffaa 	bl	8001aac <vSDA_Out>
	delay_us(6);//至少延时4us
 8001b58:	2006      	movs	r0, #6
 8001b5a:	f7ff ff4b 	bl	80019f4 <delay_us>
	vSCL_Out(1);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f7ff ff8a 	bl	8001a78 <vSCL_Out>
	delay_us(6);//至少延时4us
 8001b64:	2006      	movs	r0, #6
 8001b66:	f7ff ff45 	bl	80019f4 <delay_us>
	vSDA_Out(1);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f7ff ff9e 	bl	8001aac <vSDA_Out>
	delay_us(6);//至少延时4.7us
 8001b70:	2006      	movs	r0, #6
 8001b72:	f7ff ff3f 	bl	80019f4 <delay_us>
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <I2C_Ack>:

//发送应答
void I2C_Ack()
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	af00      	add	r7, sp, #0
	Pin_vSDA_Mode('O');
 8001b7e:	204f      	movs	r0, #79	; 0x4f
 8001b80:	f7ff ff4c 	bl	8001a1c <Pin_vSDA_Mode>
	vSDA_Out(0);
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff ff91 	bl	8001aac <vSDA_Out>
	delay_us(6);
 8001b8a:	2006      	movs	r0, #6
 8001b8c:	f7ff ff32 	bl	80019f4 <delay_us>
	vSCL_Out(1);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f7ff ff71 	bl	8001a78 <vSCL_Out>
	delay_us(6);
 8001b96:	2006      	movs	r0, #6
 8001b98:	f7ff ff2c 	bl	80019f4 <delay_us>
    vSCL_Out(0);
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f7ff ff6b 	bl	8001a78 <vSCL_Out>
    delay_us(6);
 8001ba2:	2006      	movs	r0, #6
 8001ba4:	f7ff ff26 	bl	80019f4 <delay_us>
    vSDA_Out(1);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f7ff ff7f 	bl	8001aac <vSDA_Out>
    delay_us(6);
 8001bae:	2006      	movs	r0, #6
 8001bb0:	f7ff ff20 	bl	80019f4 <delay_us>
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <I2C_WtByte>:

//写1个字节数据
void I2C_WtByte(uint8_t Dat)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
    uint8_t i,tmp;
    Pin_vSDA_Mode('O');
 8001bc2:	204f      	movs	r0, #79	; 0x4f
 8001bc4:	f7ff ff2a 	bl	8001a1c <Pin_vSDA_Mode>
    for(i = 0; i < 8; i++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]
 8001bcc:	e025      	b.n	8001c1a <I2C_WtByte+0x62>
    {
        tmp=Dat&(0x80>>i);
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	2280      	movs	r2, #128	; 0x80
 8001bd2:	fa42 f303 	asr.w	r3, r2, r3
 8001bd6:	b25a      	sxtb	r2, r3
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	b25b      	sxtb	r3, r3
 8001be0:	73bb      	strb	r3, [r7, #14]
        vSCL_Out(0);
 8001be2:	2000      	movs	r0, #0
 8001be4:	f7ff ff48 	bl	8001a78 <vSCL_Out>
        delay_us(6);
 8001be8:	2006      	movs	r0, #6
 8001bea:	f7ff ff03 	bl	80019f4 <delay_us>
        (tmp==0)?(vSDA_Out(0)):(vSDA_Out(1));
 8001bee:	7bbb      	ldrb	r3, [r7, #14]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d103      	bne.n	8001bfc <I2C_WtByte+0x44>
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f7ff ff59 	bl	8001aac <vSDA_Out>
 8001bfa:	e002      	b.n	8001c02 <I2C_WtByte+0x4a>
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f7ff ff55 	bl	8001aac <vSDA_Out>
        delay_us(6);
 8001c02:	2006      	movs	r0, #6
 8001c04:	f7ff fef6 	bl	80019f4 <delay_us>
        vSCL_Out(1);
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff ff35 	bl	8001a78 <vSCL_Out>
        delay_us(6);
 8001c0e:	2006      	movs	r0, #6
 8001c10:	f7ff fef0 	bl	80019f4 <delay_us>
    for(i = 0; i < 8; i++)
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	3301      	adds	r3, #1
 8001c18:	73fb      	strb	r3, [r7, #15]
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	2b07      	cmp	r3, #7
 8001c1e:	d9d6      	bls.n	8001bce <I2C_WtByte+0x16>
    }
    vSCL_Out(0);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff ff29 	bl	8001a78 <vSCL_Out>
    delay_us(6);
 8001c26:	2006      	movs	r0, #6
 8001c28:	f7ff fee4 	bl	80019f4 <delay_us>
    vSDA_Out(1);
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f7ff ff3d 	bl	8001aac <vSDA_Out>
    delay_us(6);
 8001c32:	2006      	movs	r0, #6
 8001c34:	f7ff fede 	bl	80019f4 <delay_us>
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <I2C_RdByte>:

//读1个字节数据
uint8_t I2C_RdByte()
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
    uint8_t Dat = 0, tmp, i;
 8001c46:	2300      	movs	r3, #0
 8001c48:	71fb      	strb	r3, [r7, #7]
    Pin_vSDA_Mode('I');
 8001c4a:	2049      	movs	r0, #73	; 0x49
 8001c4c:	f7ff fee6 	bl	8001a1c <Pin_vSDA_Mode>
    vSCL_Out(0);
 8001c50:	2000      	movs	r0, #0
 8001c52:	f7ff ff11 	bl	8001a78 <vSCL_Out>
    delay_us(6);
 8001c56:	2006      	movs	r0, #6
 8001c58:	f7ff fecc 	bl	80019f4 <delay_us>
    for(i = 0; i < 8; i++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	71bb      	strb	r3, [r7, #6]
 8001c60:	e01c      	b.n	8001c9c <I2C_RdByte+0x5c>
    {
    	vSCL_Out(1);
 8001c62:	2001      	movs	r0, #1
 8001c64:	f7ff ff08 	bl	8001a78 <vSCL_Out>
    	delay_us(6);
 8001c68:	2006      	movs	r0, #6
 8001c6a:	f7ff fec3 	bl	80019f4 <delay_us>
        tmp = vSDA_In();
 8001c6e:	f7ff ff37 	bl	8001ae0 <vSDA_In>
 8001c72:	4603      	mov	r3, r0
 8001c74:	717b      	strb	r3, [r7, #5]
        Dat = Dat << 1;
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	71fb      	strb	r3, [r7, #7]
        Dat = Dat | tmp;
 8001c7c:	79fa      	ldrb	r2, [r7, #7]
 8001c7e:	797b      	ldrb	r3, [r7, #5]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	71fb      	strb	r3, [r7, #7]
        delay_us(6);
 8001c84:	2006      	movs	r0, #6
 8001c86:	f7ff feb5 	bl	80019f4 <delay_us>
        vSCL_Out(0);
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f7ff fef4 	bl	8001a78 <vSCL_Out>
        delay_us(6);
 8001c90:	2006      	movs	r0, #6
 8001c92:	f7ff feaf 	bl	80019f4 <delay_us>
    for(i = 0; i < 8; i++)
 8001c96:	79bb      	ldrb	r3, [r7, #6]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	71bb      	strb	r3, [r7, #6]
 8001c9c:	79bb      	ldrb	r3, [r7, #6]
 8001c9e:	2b07      	cmp	r3, #7
 8001ca0:	d9df      	bls.n	8001c62 <I2C_RdByte+0x22>
    }
    return Dat;
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <AT24C02_Write>:
#ifndef AT24C02_H_
#define AT24C02_H_
#define AT24C02_ADDR 0xa0
//写入1个字节
void AT24C02_Write(uint8_t DatAddr, uint8_t Dat)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	460a      	mov	r2, r1
 8001cb6:	71fb      	strb	r3, [r7, #7]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	71bb      	strb	r3, [r7, #6]
	I2C_Start();
 8001cbc:	f7ff ff28 	bl	8001b10 <I2C_Start>
	I2C_WtByte(AT24C02_ADDR + 0);
 8001cc0:	20a0      	movs	r0, #160	; 0xa0
 8001cc2:	f7ff ff79 	bl	8001bb8 <I2C_WtByte>
	I2C_Ack();
 8001cc6:	f7ff ff58 	bl	8001b7a <I2C_Ack>
	I2C_WtByte(DatAddr);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff73 	bl	8001bb8 <I2C_WtByte>
	I2C_Ack();
 8001cd2:	f7ff ff52 	bl	8001b7a <I2C_Ack>
	I2C_WtByte(Dat);
 8001cd6:	79bb      	ldrb	r3, [r7, #6]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff6d 	bl	8001bb8 <I2C_WtByte>
	I2C_Ack();
 8001cde:	f7ff ff4c 	bl	8001b7a <I2C_Ack>
	I2C_Stop();
 8001ce2:	f7ff ff31 	bl	8001b48 <I2C_Stop>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <AT24C02_Read>:

//读取1个字节
uint8_t AT24C02_Read(uint8_t DatAddr)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	71fb      	strb	r3, [r7, #7]
    uint8_t Dat;
    I2C_Start();
 8001cf8:	f7ff ff0a 	bl	8001b10 <I2C_Start>
    I2C_WtByte(AT24C02_ADDR + 0);
 8001cfc:	20a0      	movs	r0, #160	; 0xa0
 8001cfe:	f7ff ff5b 	bl	8001bb8 <I2C_WtByte>
    I2C_Ack();
 8001d02:	f7ff ff3a 	bl	8001b7a <I2C_Ack>
    I2C_WtByte(DatAddr);
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff55 	bl	8001bb8 <I2C_WtByte>
    I2C_Ack();
 8001d0e:	f7ff ff34 	bl	8001b7a <I2C_Ack>
    I2C_Start();
 8001d12:	f7ff fefd 	bl	8001b10 <I2C_Start>
    I2C_WtByte(AT24C02_ADDR + 1);
 8001d16:	20a1      	movs	r0, #161	; 0xa1
 8001d18:	f7ff ff4e 	bl	8001bb8 <I2C_WtByte>
    I2C_Ack();
 8001d1c:	f7ff ff2d 	bl	8001b7a <I2C_Ack>
    Dat = I2C_RdByte();
 8001d20:	f7ff ff8e 	bl	8001c40 <I2C_RdByte>
 8001d24:	4603      	mov	r3, r0
 8001d26:	73fb      	strb	r3, [r7, #15]
    I2C_Stop();
 8001d28:	f7ff ff0e 	bl	8001b48 <I2C_Stop>
    return Dat;
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d3c:	f7fe fa06 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d40:	f000 f844 	bl	8001dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d44:	f000 f8a8 	bl	8001e98 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001d48:	f000 f87c 	bl	8001e44 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,RcvDat,1);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	491a      	ldr	r1, [pc, #104]	; (8001db8 <main+0x80>)
 8001d50:	481a      	ldr	r0, [pc, #104]	; (8001dbc <main+0x84>)
 8001d52:	f7ff fa6b 	bl	800122c <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(rf==1)
 8001d56:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <main+0x88>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d10e      	bne.n	8001d7c <main+0x44>
	  {
		  rf=0;
 8001d5e:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <main+0x88>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
		  AT24C02_Write(0,RcvDat[0]);
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <main+0x80>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7ff ff9e 	bl	8001cac <AT24C02_Write>
		  HAL_UART_Receive_IT(&huart1,RcvDat,1);
 8001d70:	2201      	movs	r2, #1
 8001d72:	4911      	ldr	r1, [pc, #68]	; (8001db8 <main+0x80>)
 8001d74:	4811      	ldr	r0, [pc, #68]	; (8001dbc <main+0x84>)
 8001d76:	f7ff fa59 	bl	800122c <HAL_UART_Receive_IT>
 8001d7a:	e7ec      	b.n	8001d56 <main+0x1e>
	  }
	  else if(HAL_GPIO_ReadPin(BTN_GPIO_Port,BTN_Pin)==GPIO_PIN_RESET)
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	4811      	ldr	r0, [pc, #68]	; (8001dc4 <main+0x8c>)
 8001d80:	f7fe fd1c 	bl	80007bc <HAL_GPIO_ReadPin>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1e5      	bne.n	8001d56 <main+0x1e>
	  {
		  SndDat[0]=AT24C02_Read(0);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff ffaf 	bl	8001cee <AT24C02_Read>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <main+0x90>)
 8001d96:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1,SndDat,1,0xffff);
 8001d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	490a      	ldr	r1, [pc, #40]	; (8001dc8 <main+0x90>)
 8001da0:	4806      	ldr	r0, [pc, #24]	; (8001dbc <main+0x84>)
 8001da2:	f7ff f9aa 	bl	80010fa <HAL_UART_Transmit>
		  while(HAL_GPIO_ReadPin(BTN_GPIO_Port,BTN_Pin)==GPIO_PIN_RESET);
 8001da6:	bf00      	nop
 8001da8:	2101      	movs	r1, #1
 8001daa:	4806      	ldr	r0, [pc, #24]	; (8001dc4 <main+0x8c>)
 8001dac:	f7fe fd06 	bl	80007bc <HAL_GPIO_ReadPin>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f8      	beq.n	8001da8 <main+0x70>
	  if(rf==1)
 8001db6:	e7ce      	b.n	8001d56 <main+0x1e>
 8001db8:	20000074 	.word	0x20000074
 8001dbc:	20000034 	.word	0x20000034
 8001dc0:	20000028 	.word	0x20000028
 8001dc4:	40011000 	.word	0x40011000
 8001dc8:	20000030 	.word	0x20000030

08001dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b090      	sub	sp, #64	; 0x40
 8001dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd2:	f107 0318 	add.w	r3, r7, #24
 8001dd6:	2228      	movs	r2, #40	; 0x28
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 fa18 	bl	8002210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dee:	2302      	movs	r3, #2
 8001df0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001df2:	2301      	movs	r3, #1
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001df6:	2310      	movs	r3, #16
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dfe:	f107 0318 	add.w	r3, r7, #24
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fd0a 	bl	800081c <HAL_RCC_OscConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001e0e:	f000 f8c1 	bl	8001f94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e12:	230f      	movs	r3, #15
 8001e14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe ff5a 	bl	8000ce4 <HAL_RCC_ClockConfig>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001e36:	f000 f8ad 	bl	8001f94 <Error_Handler>
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	3740      	adds	r7, #64	; 0x40
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_USART1_UART_Init+0x4c>)
 8001e4a:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <MX_USART1_UART_Init+0x50>)
 8001e4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <MX_USART1_UART_Init+0x4c>)
 8001e50:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001e54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_USART1_UART_Init+0x4c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_USART1_UART_Init+0x4c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <MX_USART1_UART_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_USART1_UART_Init+0x4c>)
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <MX_USART1_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_USART1_UART_Init+0x4c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <MX_USART1_UART_Init+0x4c>)
 8001e7c:	f7ff f8f0 	bl	8001060 <HAL_UART_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e86:	f000 f885 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000034 	.word	0x20000034
 8001e94:	40013800 	.word	0x40013800

08001e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eac:	4b2c      	ldr	r3, [pc, #176]	; (8001f60 <MX_GPIO_Init+0xc8>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a2b      	ldr	r2, [pc, #172]	; (8001f60 <MX_GPIO_Init+0xc8>)
 8001eb2:	f043 0310 	orr.w	r3, r3, #16
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <MX_GPIO_Init+0xc8>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec4:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <MX_GPIO_Init+0xc8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a25      	ldr	r2, [pc, #148]	; (8001f60 <MX_GPIO_Init+0xc8>)
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <MX_GPIO_Init+0xc8>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001edc:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <MX_GPIO_Init+0xc8>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <MX_GPIO_Init+0xc8>)
 8001ee2:	f043 0308 	orr.w	r3, r3, #8
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <MX_GPIO_Init+0xc8>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2102      	movs	r1, #2
 8001ef8:	481a      	ldr	r0, [pc, #104]	; (8001f64 <MX_GPIO_Init+0xcc>)
 8001efa:	f7fe fc76 	bl	80007ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, vSCL_Pin|vSDA_Pin, GPIO_PIN_SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	21c0      	movs	r1, #192	; 0xc0
 8001f02:	4819      	ldr	r0, [pc, #100]	; (8001f68 <MX_GPIO_Init+0xd0>)
 8001f04:	f7fe fc71 	bl	80007ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f10:	2301      	movs	r3, #1
 8001f12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4812      	ldr	r0, [pc, #72]	; (8001f64 <MX_GPIO_Init+0xcc>)
 8001f1c:	f7fe faf8 	bl	8000510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f20:	2302      	movs	r3, #2
 8001f22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f24:	2301      	movs	r3, #1
 8001f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	4619      	mov	r1, r3
 8001f36:	480b      	ldr	r0, [pc, #44]	; (8001f64 <MX_GPIO_Init+0xcc>)
 8001f38:	f7fe faea 	bl	8000510 <HAL_GPIO_Init>

  /*Configure GPIO pins : vSCL_Pin vSDA_Pin */
  GPIO_InitStruct.Pin = vSCL_Pin|vSDA_Pin;
 8001f3c:	23c0      	movs	r3, #192	; 0xc0
 8001f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f40:	2311      	movs	r3, #17
 8001f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f44:	2301      	movs	r3, #1
 8001f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	4619      	mov	r1, r3
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_GPIO_Init+0xd0>)
 8001f54:	f7fe fadc 	bl	8000510 <HAL_GPIO_Init>

}
 8001f58:	bf00      	nop
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40011000 	.word	0x40011000
 8001f68:	40010c00 	.word	0x40010c00

08001f6c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <HAL_UART_RxCpltCallback+0x20>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d102      	bne.n	8001f82 <HAL_UART_RxCpltCallback+0x16>
	{
		rf=1;
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <HAL_UART_RxCpltCallback+0x24>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
	}
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	20000034 	.word	0x20000034
 8001f90:	20000028 	.word	0x20000028

08001f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_MspInit+0x5c>)
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <HAL_MspInit+0x5c>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6193      	str	r3, [r2, #24]
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_MspInit+0x5c>)
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <HAL_MspInit+0x5c>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a0e      	ldr	r2, [pc, #56]	; (8001ffc <HAL_MspInit+0x5c>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	61d3      	str	r3, [r2, #28]
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <HAL_MspInit+0x5c>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_MspInit+0x60>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <HAL_MspInit+0x60>)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010000 	.word	0x40010000

08002004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a20      	ldr	r2, [pc, #128]	; (80020a0 <HAL_UART_MspInit+0x9c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d139      	bne.n	8002098 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <HAL_UART_MspInit+0xa0>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	4a1e      	ldr	r2, [pc, #120]	; (80020a4 <HAL_UART_MspInit+0xa0>)
 800202a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800202e:	6193      	str	r3, [r2, #24]
 8002030:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <HAL_UART_MspInit+0xa0>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_UART_MspInit+0xa0>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4a18      	ldr	r2, [pc, #96]	; (80020a4 <HAL_UART_MspInit+0xa0>)
 8002042:	f043 0304 	orr.w	r3, r3, #4
 8002046:	6193      	str	r3, [r2, #24]
 8002048:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <HAL_UART_MspInit+0xa0>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002058:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800205e:	2303      	movs	r3, #3
 8002060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002062:	f107 0310 	add.w	r3, r7, #16
 8002066:	4619      	mov	r1, r3
 8002068:	480f      	ldr	r0, [pc, #60]	; (80020a8 <HAL_UART_MspInit+0xa4>)
 800206a:	f7fe fa51 	bl	8000510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800206e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002072:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	4619      	mov	r1, r3
 8002082:	4809      	ldr	r0, [pc, #36]	; (80020a8 <HAL_UART_MspInit+0xa4>)
 8002084:	f7fe fa44 	bl	8000510 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	2100      	movs	r1, #0
 800208c:	2025      	movs	r0, #37	; 0x25
 800208e:	f7fe f992 	bl	80003b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002092:	2025      	movs	r0, #37	; 0x25
 8002094:	f7fe f9ab 	bl	80003ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002098:	bf00      	nop
 800209a:	3720      	adds	r7, #32
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40013800 	.word	0x40013800
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40010800 	.word	0x40010800

080020ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <HardFault_Handler+0x4>

080020be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c2:	e7fe      	b.n	80020c2 <MemManage_Handler+0x4>

080020c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <BusFault_Handler+0x4>

080020ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ce:	e7fe      	b.n	80020ce <UsageFault_Handler+0x4>

080020d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f8:	f7fe f86e 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}

08002100 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <USART1_IRQHandler+0x10>)
 8002106:	f7ff f8e5 	bl	80012d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000034 	.word	0x20000034

08002114 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <SystemInit+0x5c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a14      	ldr	r2, [pc, #80]	; (8002170 <SystemInit+0x5c>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <SystemInit+0x5c>)
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4911      	ldr	r1, [pc, #68]	; (8002170 <SystemInit+0x5c>)
 800212a:	4b12      	ldr	r3, [pc, #72]	; (8002174 <SystemInit+0x60>)
 800212c:	4013      	ands	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <SystemInit+0x5c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <SystemInit+0x5c>)
 8002136:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800213a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <SystemInit+0x5c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <SystemInit+0x5c>)
 8002146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <SystemInit+0x5c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a07      	ldr	r2, [pc, #28]	; (8002170 <SystemInit+0x5c>)
 8002152:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002156:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <SystemInit+0x5c>)
 800215a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800215e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <SystemInit+0x64>)
 8002162:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002166:	609a      	str	r2, [r3, #8]
#endif 
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	40021000 	.word	0x40021000
 8002174:	f8ff0000 	.word	0xf8ff0000
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <Reset_Handler>:
 800217c:	2100      	movs	r1, #0
 800217e:	e003      	b.n	8002188 <LoopCopyDataInit>

08002180 <CopyDataInit>:
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <LoopFillZerobss+0x14>)
 8002182:	585b      	ldr	r3, [r3, r1]
 8002184:	5043      	str	r3, [r0, r1]
 8002186:	3104      	adds	r1, #4

08002188 <LoopCopyDataInit>:
 8002188:	480a      	ldr	r0, [pc, #40]	; (80021b4 <LoopFillZerobss+0x18>)
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <LoopFillZerobss+0x1c>)
 800218c:	1842      	adds	r2, r0, r1
 800218e:	429a      	cmp	r2, r3
 8002190:	d3f6      	bcc.n	8002180 <CopyDataInit>
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <LoopFillZerobss+0x20>)
 8002194:	e002      	b.n	800219c <LoopFillZerobss>

08002196 <FillZerobss>:
 8002196:	2300      	movs	r3, #0
 8002198:	f842 3b04 	str.w	r3, [r2], #4

0800219c <LoopFillZerobss>:
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <LoopFillZerobss+0x24>)
 800219e:	429a      	cmp	r2, r3
 80021a0:	d3f9      	bcc.n	8002196 <FillZerobss>
 80021a2:	f7ff ffb7 	bl	8002114 <SystemInit>
 80021a6:	f000 f80f 	bl	80021c8 <__libc_init_array>
 80021aa:	f7ff fdc5 	bl	8001d38 <main>
 80021ae:	4770      	bx	lr
 80021b0:	0800226c 	.word	0x0800226c
 80021b4:	20000000 	.word	0x20000000
 80021b8:	2000000c 	.word	0x2000000c
 80021bc:	2000000c 	.word	0x2000000c
 80021c0:	20000078 	.word	0x20000078

080021c4 <ADC1_2_IRQHandler>:
 80021c4:	e7fe      	b.n	80021c4 <ADC1_2_IRQHandler>
	...

080021c8 <__libc_init_array>:
 80021c8:	b570      	push	{r4, r5, r6, lr}
 80021ca:	2500      	movs	r5, #0
 80021cc:	4e0c      	ldr	r6, [pc, #48]	; (8002200 <__libc_init_array+0x38>)
 80021ce:	4c0d      	ldr	r4, [pc, #52]	; (8002204 <__libc_init_array+0x3c>)
 80021d0:	1ba4      	subs	r4, r4, r6
 80021d2:	10a4      	asrs	r4, r4, #2
 80021d4:	42a5      	cmp	r5, r4
 80021d6:	d109      	bne.n	80021ec <__libc_init_array+0x24>
 80021d8:	f000 f822 	bl	8002220 <_init>
 80021dc:	2500      	movs	r5, #0
 80021de:	4e0a      	ldr	r6, [pc, #40]	; (8002208 <__libc_init_array+0x40>)
 80021e0:	4c0a      	ldr	r4, [pc, #40]	; (800220c <__libc_init_array+0x44>)
 80021e2:	1ba4      	subs	r4, r4, r6
 80021e4:	10a4      	asrs	r4, r4, #2
 80021e6:	42a5      	cmp	r5, r4
 80021e8:	d105      	bne.n	80021f6 <__libc_init_array+0x2e>
 80021ea:	bd70      	pop	{r4, r5, r6, pc}
 80021ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021f0:	4798      	blx	r3
 80021f2:	3501      	adds	r5, #1
 80021f4:	e7ee      	b.n	80021d4 <__libc_init_array+0xc>
 80021f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021fa:	4798      	blx	r3
 80021fc:	3501      	adds	r5, #1
 80021fe:	e7f2      	b.n	80021e6 <__libc_init_array+0x1e>
 8002200:	08002264 	.word	0x08002264
 8002204:	08002264 	.word	0x08002264
 8002208:	08002264 	.word	0x08002264
 800220c:	08002268 	.word	0x08002268

08002210 <memset>:
 8002210:	4603      	mov	r3, r0
 8002212:	4402      	add	r2, r0
 8002214:	4293      	cmp	r3, r2
 8002216:	d100      	bne.n	800221a <memset+0xa>
 8002218:	4770      	bx	lr
 800221a:	f803 1b01 	strb.w	r1, [r3], #1
 800221e:	e7f9      	b.n	8002214 <memset+0x4>

08002220 <_init>:
 8002220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002222:	bf00      	nop
 8002224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002226:	bc08      	pop	{r3}
 8002228:	469e      	mov	lr, r3
 800222a:	4770      	bx	lr

0800222c <_fini>:
 800222c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222e:	bf00      	nop
 8002230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002232:	bc08      	pop	{r3}
 8002234:	469e      	mov	lr, r3
 8002236:	4770      	bx	lr
