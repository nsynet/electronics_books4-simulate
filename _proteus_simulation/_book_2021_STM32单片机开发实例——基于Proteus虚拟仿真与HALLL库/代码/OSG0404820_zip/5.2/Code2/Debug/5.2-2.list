
5.2-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000376c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003878  08003878  00013878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038ac  080038ac  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080038ac  080038ac  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038ac  080038ac  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038ac  080038ac  000138ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038b0  080038b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080038b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000014  080038c8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080038c8  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008196  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001531  00000000  00000000  000281d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f8  00000000  00000000  00029708  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000868  00000000  00000000  0002a000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f2b  00000000  00000000  0002a868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007411  00000000  00000000  00040793  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007de55  00000000  00000000  00047ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c59f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024b8  00000000  00000000  000c5a74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003860 	.word	0x08003860

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003860 	.word	0x08003860

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa39 	bl	80005c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f831 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8c7 	bl	80002ec <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f86d 	bl	800023c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f899 	bl	8000298 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000166:	2064      	movs	r0, #100	; 0x64
 8000168:	f000 fa90 	bl	800068c <HAL_Delay>
  if(HAL_I2C_Mem_Write(&hi2c1, 0xa0, 0, I2C_MEMADD_SIZE_8BIT,I2C_Buffer_Write,8, 1000)==HAL_OK)
 800016c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000170:	9302      	str	r3, [sp, #8]
 8000172:	2308      	movs	r3, #8
 8000174:	9301      	str	r3, [sp, #4]
 8000176:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <main+0x5c>)
 8000178:	9300      	str	r3, [sp, #0]
 800017a:	2301      	movs	r3, #1
 800017c:	2200      	movs	r2, #0
 800017e:	21a0      	movs	r1, #160	; 0xa0
 8000180:	480a      	ldr	r0, [pc, #40]	; (80001ac <main+0x60>)
 8000182:	f000 febf 	bl	8000f04 <HAL_I2C_Mem_Write>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d106      	bne.n	800019a <main+0x4e>
  {
	  HAL_UART_Transmit(&huart1,&"OK",3,10);
 800018c:	230a      	movs	r3, #10
 800018e:	2203      	movs	r2, #3
 8000190:	4907      	ldr	r1, [pc, #28]	; (80001b0 <main+0x64>)
 8000192:	4808      	ldr	r0, [pc, #32]	; (80001b4 <main+0x68>)
 8000194:	f003 f9cd 	bl	8003532 <HAL_UART_Transmit>
 8000198:	e005      	b.n	80001a6 <main+0x5a>
  }
  else
  {
	  HAL_UART_Transmit(&huart1,&"ERR",4,10);
 800019a:	230a      	movs	r3, #10
 800019c:	2204      	movs	r2, #4
 800019e:	4906      	ldr	r1, [pc, #24]	; (80001b8 <main+0x6c>)
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <main+0x68>)
 80001a2:	f003 f9c6 	bl	8003532 <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart1,I2C_Buffer_Read,8,100);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a6:	e7fe      	b.n	80001a6 <main+0x5a>
 80001a8:	20000000 	.word	0x20000000
 80001ac:	20000038 	.word	0x20000038
 80001b0:	08003878 	.word	0x08003878
 80001b4:	2000008c 	.word	0x2000008c
 80001b8:	0800387c 	.word	0x0800387c

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b090      	sub	sp, #64	; 0x40
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	2228      	movs	r2, #40	; 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f003 fb40 	bl	8003850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001de:	2302      	movs	r3, #2
 80001e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e2:	2301      	movs	r3, #1
 80001e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001e6:	2310      	movs	r3, #16
 80001e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ea:	2302      	movs	r3, #2
 80001ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001ee:	2300      	movs	r3, #0
 80001f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f8:	f107 0318 	add.w	r3, r7, #24
 80001fc:	4618      	mov	r0, r3
 80001fe:	f002 fd2f 	bl	8002c60 <HAL_RCC_OscConfig>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000208:	f000 f8b2 	bl	8000370 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020c:	230f      	movs	r3, #15
 800020e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000210:	2302      	movs	r3, #2
 8000212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2101      	movs	r1, #1
 8000224:	4618      	mov	r0, r3
 8000226:	f002 ff9b 	bl	8003160 <HAL_RCC_ClockConfig>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000230:	f000 f89e 	bl	8000370 <Error_Handler>
  }
}
 8000234:	bf00      	nop
 8000236:	3740      	adds	r7, #64	; 0x40
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}

0800023c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <MX_I2C1_Init+0x50>)
 8000242:	4a13      	ldr	r2, [pc, #76]	; (8000290 <MX_I2C1_Init+0x54>)
 8000244:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000246:	4b11      	ldr	r3, [pc, #68]	; (800028c <MX_I2C1_Init+0x50>)
 8000248:	4a12      	ldr	r2, [pc, #72]	; (8000294 <MX_I2C1_Init+0x58>)
 800024a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <MX_I2C1_Init+0x50>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000252:	4b0e      	ldr	r3, [pc, #56]	; (800028c <MX_I2C1_Init+0x50>)
 8000254:	2200      	movs	r2, #0
 8000256:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <MX_I2C1_Init+0x50>)
 800025a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800025e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <MX_I2C1_Init+0x50>)
 8000262:	2200      	movs	r2, #0
 8000264:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <MX_I2C1_Init+0x50>)
 8000268:	2200      	movs	r2, #0
 800026a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <MX_I2C1_Init+0x50>)
 800026e:	2200      	movs	r2, #0
 8000270:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <MX_I2C1_Init+0x50>)
 8000274:	2200      	movs	r2, #0
 8000276:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <MX_I2C1_Init+0x50>)
 800027a:	f000 fd0b 	bl	8000c94 <HAL_I2C_Init>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000284:	f000 f874 	bl	8000370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000038 	.word	0x20000038
 8000290:	40005400 	.word	0x40005400
 8000294:	000186a0 	.word	0x000186a0

08000298 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 800029e:	4a12      	ldr	r2, [pc, #72]	; (80002e8 <MX_USART1_UART_Init+0x50>)
 80002a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80002a2:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002a4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80002a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002be:	220c      	movs	r2, #12
 80002c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c2:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ce:	4805      	ldr	r0, [pc, #20]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002d0:	f003 f8e2 	bl	8003498 <HAL_UART_Init>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002da:	f000 f849 	bl	8000370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	2000008c 	.word	0x2000008c
 80002e8:	40013800 	.word	0x40013800

080002ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0310 	add.w	r3, r7, #16
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000300:	4b19      	ldr	r3, [pc, #100]	; (8000368 <MX_GPIO_Init+0x7c>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a18      	ldr	r2, [pc, #96]	; (8000368 <MX_GPIO_Init+0x7c>)
 8000306:	f043 0310 	orr.w	r3, r3, #16
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b16      	ldr	r3, [pc, #88]	; (8000368 <MX_GPIO_Init+0x7c>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0310 	and.w	r3, r3, #16
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000318:	4b13      	ldr	r3, [pc, #76]	; (8000368 <MX_GPIO_Init+0x7c>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a12      	ldr	r2, [pc, #72]	; (8000368 <MX_GPIO_Init+0x7c>)
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <MX_GPIO_Init+0x7c>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0304 	and.w	r3, r3, #4
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000330:	4b0d      	ldr	r3, [pc, #52]	; (8000368 <MX_GPIO_Init+0x7c>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a0c      	ldr	r2, [pc, #48]	; (8000368 <MX_GPIO_Init+0x7c>)
 8000336:	f043 0308 	orr.w	r3, r3, #8
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <MX_GPIO_Init+0x7c>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0308 	and.w	r3, r3, #8
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000348:	2301      	movs	r3, #1
 800034a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000350:	2300      	movs	r3, #0
 8000352:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000354:	f107 0310 	add.w	r3, r7, #16
 8000358:	4619      	mov	r1, r3
 800035a:	4804      	ldr	r0, [pc, #16]	; (800036c <MX_GPIO_Init+0x80>)
 800035c:	f000 fb48 	bl	80009f0 <HAL_GPIO_Init>

}
 8000360:	bf00      	nop
 8000362:	3720      	adds	r7, #32
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40021000 	.word	0x40021000
 800036c:	40011000 	.word	0x40011000

08000370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <HAL_MspInit+0x5c>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <HAL_MspInit+0x5c>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6193      	str	r3, [r2, #24]
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <HAL_MspInit+0x5c>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	60bb      	str	r3, [r7, #8]
 8000398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <HAL_MspInit+0x5c>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	4a0e      	ldr	r2, [pc, #56]	; (80003d8 <HAL_MspInit+0x5c>)
 80003a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a4:	61d3      	str	r3, [r2, #28]
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <HAL_MspInit+0x5c>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80003b2:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <HAL_MspInit+0x60>)
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	4a04      	ldr	r2, [pc, #16]	; (80003dc <HAL_MspInit+0x60>)
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ce:	bf00      	nop
 80003d0:	3714      	adds	r7, #20
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40010000 	.word	0x40010000

080003e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e8:	f107 0310 	add.w	r3, r7, #16
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a1a      	ldr	r2, [pc, #104]	; (8000464 <HAL_I2C_MspInit+0x84>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d12d      	bne.n	800045c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000400:	4b19      	ldr	r3, [pc, #100]	; (8000468 <HAL_I2C_MspInit+0x88>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a18      	ldr	r2, [pc, #96]	; (8000468 <HAL_I2C_MspInit+0x88>)
 8000406:	f043 0308 	orr.w	r3, r3, #8
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b16      	ldr	r3, [pc, #88]	; (8000468 <HAL_I2C_MspInit+0x88>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0308 	and.w	r3, r3, #8
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000418:	23c0      	movs	r3, #192	; 0xc0
 800041a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800041c:	2312      	movs	r3, #18
 800041e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000420:	2301      	movs	r3, #1
 8000422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000424:	2303      	movs	r3, #3
 8000426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	4619      	mov	r1, r3
 800042e:	480f      	ldr	r0, [pc, #60]	; (800046c <HAL_I2C_MspInit+0x8c>)
 8000430:	f000 fade 	bl	80009f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <HAL_I2C_MspInit+0x88>)
 8000436:	69db      	ldr	r3, [r3, #28]
 8000438:	4a0b      	ldr	r2, [pc, #44]	; (8000468 <HAL_I2C_MspInit+0x88>)
 800043a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800043e:	61d3      	str	r3, [r2, #28]
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <HAL_I2C_MspInit+0x88>)
 8000442:	69db      	ldr	r3, [r3, #28]
 8000444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000448:	60bb      	str	r3, [r7, #8]
 800044a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800044c:	2200      	movs	r2, #0
 800044e:	2100      	movs	r1, #0
 8000450:	201f      	movs	r0, #31
 8000452:	f000 fa14 	bl	800087e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000456:	201f      	movs	r0, #31
 8000458:	f000 fa2d 	bl	80008b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800045c:	bf00      	nop
 800045e:	3720      	adds	r7, #32
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40005400 	.word	0x40005400
 8000468:	40021000 	.word	0x40021000
 800046c:	40010c00 	.word	0x40010c00

08000470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b088      	sub	sp, #32
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a1c      	ldr	r2, [pc, #112]	; (80004fc <HAL_UART_MspInit+0x8c>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d131      	bne.n	80004f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000490:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <HAL_UART_MspInit+0x90>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a1a      	ldr	r2, [pc, #104]	; (8000500 <HAL_UART_MspInit+0x90>)
 8000496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b18      	ldr	r3, [pc, #96]	; (8000500 <HAL_UART_MspInit+0x90>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b15      	ldr	r3, [pc, #84]	; (8000500 <HAL_UART_MspInit+0x90>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a14      	ldr	r2, [pc, #80]	; (8000500 <HAL_UART_MspInit+0x90>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <HAL_UART_MspInit+0x90>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c6:	2302      	movs	r3, #2
 80004c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ca:	2303      	movs	r3, #3
 80004cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ce:	f107 0310 	add.w	r3, r7, #16
 80004d2:	4619      	mov	r1, r3
 80004d4:	480b      	ldr	r0, [pc, #44]	; (8000504 <HAL_UART_MspInit+0x94>)
 80004d6:	f000 fa8b 	bl	80009f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <HAL_UART_MspInit+0x94>)
 80004f0:	f000 fa7e 	bl	80009f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40013800 	.word	0x40013800
 8000500:	40021000 	.word	0x40021000
 8000504:	40010800 	.word	0x40010800

08000508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr

08000514 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <HardFault_Handler+0x4>

0800051a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <MemManage_Handler+0x4>

08000520 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <BusFault_Handler+0x4>

08000526 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800052a:	e7fe      	b.n	800052a <UsageFault_Handler+0x4>

0800052c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000554:	f000 f87e 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}

0800055c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000560:	4802      	ldr	r0, [pc, #8]	; (800056c <I2C1_EV_IRQHandler+0x10>)
 8000562:	f000 fdc9 	bl	80010f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000038 	.word	0x20000038

08000570 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800057c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800057e:	e003      	b.n	8000588 <LoopCopyDataInit>

08000580 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000582:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000584:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000586:	3104      	adds	r1, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000588:	480a      	ldr	r0, [pc, #40]	; (80005b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800058c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800058e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000590:	d3f6      	bcc.n	8000580 <CopyDataInit>
  ldr r2, =_sbss
 8000592:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000594:	e002      	b.n	800059c <LoopFillZerobss>

08000596 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000598:	f842 3b04 	str.w	r3, [r2], #4

0800059c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800059e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005a0:	d3f9      	bcc.n	8000596 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005a2:	f7ff ffe5 	bl	8000570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005a6:	f003 f92f 	bl	8003808 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005aa:	f7ff fdcf 	bl	800014c <main>
  bx lr
 80005ae:	4770      	bx	lr
  ldr r3, =_sidata
 80005b0:	080038b4 	.word	0x080038b4
  ldr r0, =_sdata
 80005b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005b8:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 80005bc:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 80005c0:	200000d0 	.word	0x200000d0

080005c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC1_2_IRQHandler>
	...

080005c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_Init+0x28>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <HAL_Init+0x28>)
 80005d2:	f043 0310 	orr.w	r3, r3, #16
 80005d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d8:	2003      	movs	r0, #3
 80005da:	f000 f945 	bl	8000868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 f808 	bl	80005f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e4:	f7ff feca 	bl	800037c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40022000 	.word	0x40022000

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_InitTick+0x54>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_InitTick+0x58>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4619      	mov	r1, r3
 8000606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060a:	fbb3 f3f1 	udiv	r3, r3, r1
 800060e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f95d 	bl	80008d2 <HAL_SYSTICK_Config>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
 8000620:	e00e      	b.n	8000640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d80a      	bhi.n	800063e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000628:	2200      	movs	r2, #0
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
 8000630:	f000 f925 	bl	800087e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <HAL_InitTick+0x5c>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800063a:	2300      	movs	r3, #0
 800063c:	e000      	b.n	8000640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000008 	.word	0x20000008
 800064c:	20000010 	.word	0x20000010
 8000650:	2000000c 	.word	0x2000000c

08000654 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <HAL_IncTick+0x1c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <HAL_IncTick+0x20>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a03      	ldr	r2, [pc, #12]	; (8000674 <HAL_IncTick+0x20>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	20000010 	.word	0x20000010
 8000674:	200000cc 	.word	0x200000cc

08000678 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;
 800067c:	4b02      	ldr	r3, [pc, #8]	; (8000688 <HAL_GetTick+0x10>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	200000cc 	.word	0x200000cc

0800068c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000694:	f7ff fff0 	bl	8000678 <HAL_GetTick>
 8000698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a4:	d005      	beq.n	80006b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <HAL_Delay+0x40>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	461a      	mov	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4413      	add	r3, r2
 80006b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006b2:	bf00      	nop
 80006b4:	f7ff ffe0 	bl	8000678 <HAL_GetTick>
 80006b8:	4602      	mov	r2, r0
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d8f7      	bhi.n	80006b4 <HAL_Delay+0x28>
  {
  }
}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000010 	.word	0x20000010

080006d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <__NVIC_SetPriorityGrouping+0x44>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006e6:	68ba      	ldr	r2, [r7, #8]
 80006e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006ec:	4013      	ands	r3, r2
 80006ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000702:	4a04      	ldr	r2, [pc, #16]	; (8000714 <__NVIC_SetPriorityGrouping+0x44>)
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	60d3      	str	r3, [r2, #12]
}
 8000708:	bf00      	nop
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <__NVIC_GetPriorityGrouping+0x18>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	0a1b      	lsrs	r3, r3, #8
 8000722:	f003 0307 	and.w	r3, r3, #7
}
 8000726:	4618      	mov	r0, r3
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	2b00      	cmp	r3, #0
 8000744:	db0b      	blt.n	800075e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	f003 021f 	and.w	r2, r3, #31
 800074c:	4906      	ldr	r1, [pc, #24]	; (8000768 <__NVIC_EnableIRQ+0x34>)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	095b      	lsrs	r3, r3, #5
 8000754:	2001      	movs	r0, #1
 8000756:	fa00 f202 	lsl.w	r2, r0, r2
 800075a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	e000e100 	.word	0xe000e100

0800076c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	db0a      	blt.n	8000796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	b2da      	uxtb	r2, r3
 8000784:	490c      	ldr	r1, [pc, #48]	; (80007b8 <__NVIC_SetPriority+0x4c>)
 8000786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078a:	0112      	lsls	r2, r2, #4
 800078c:	b2d2      	uxtb	r2, r2
 800078e:	440b      	add	r3, r1
 8000790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000794:	e00a      	b.n	80007ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4908      	ldr	r1, [pc, #32]	; (80007bc <__NVIC_SetPriority+0x50>)
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	f003 030f 	and.w	r3, r3, #15
 80007a2:	3b04      	subs	r3, #4
 80007a4:	0112      	lsls	r2, r2, #4
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	440b      	add	r3, r1
 80007aa:	761a      	strb	r2, [r3, #24]
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000e100 	.word	0xe000e100
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b089      	sub	sp, #36	; 0x24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	f1c3 0307 	rsb	r3, r3, #7
 80007da:	2b04      	cmp	r3, #4
 80007dc:	bf28      	it	cs
 80007de:	2304      	movcs	r3, #4
 80007e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3304      	adds	r3, #4
 80007e6:	2b06      	cmp	r3, #6
 80007e8:	d902      	bls.n	80007f0 <NVIC_EncodePriority+0x30>
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3b03      	subs	r3, #3
 80007ee:	e000      	b.n	80007f2 <NVIC_EncodePriority+0x32>
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	f04f 32ff 	mov.w	r2, #4294967295
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	43da      	mvns	r2, r3
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	401a      	ands	r2, r3
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000808:	f04f 31ff 	mov.w	r1, #4294967295
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	fa01 f303 	lsl.w	r3, r1, r3
 8000812:	43d9      	mvns	r1, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000818:	4313      	orrs	r3, r2
         );
}
 800081a:	4618      	mov	r0, r3
 800081c:	3724      	adds	r7, #36	; 0x24
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000834:	d301      	bcc.n	800083a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000836:	2301      	movs	r3, #1
 8000838:	e00f      	b.n	800085a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <SysTick_Config+0x40>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000842:	210f      	movs	r1, #15
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f7ff ff90 	bl	800076c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <SysTick_Config+0x40>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000852:	4b04      	ldr	r3, [pc, #16]	; (8000864 <SysTick_Config+0x40>)
 8000854:	2207      	movs	r2, #7
 8000856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	e000e010 	.word	0xe000e010

08000868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff ff2d 	bl	80006d0 <__NVIC_SetPriorityGrouping>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	4603      	mov	r3, r0
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000890:	f7ff ff42 	bl	8000718 <__NVIC_GetPriorityGrouping>
 8000894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	6978      	ldr	r0, [r7, #20]
 800089c:	f7ff ff90 	bl	80007c0 <NVIC_EncodePriority>
 80008a0:	4602      	mov	r2, r0
 80008a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff5f 	bl	800076c <__NVIC_SetPriority>
}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff35 	bl	8000734 <__NVIC_EnableIRQ>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ffa2 	bl	8000824 <SysTick_Config>
 80008e0:	4603      	mov	r3, r0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008f4:	2300      	movs	r3, #0
 80008f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d005      	beq.n	800090e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2204      	movs	r2, #4
 8000906:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	73fb      	strb	r3, [r7, #15]
 800090c:	e051      	b.n	80009b2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f022 020e 	bic.w	r2, r2, #14
 800091c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f022 0201 	bic.w	r2, r2, #1
 800092c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a22      	ldr	r2, [pc, #136]	; (80009bc <HAL_DMA_Abort_IT+0xd0>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d029      	beq.n	800098c <HAL_DMA_Abort_IT+0xa0>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a20      	ldr	r2, [pc, #128]	; (80009c0 <HAL_DMA_Abort_IT+0xd4>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d022      	beq.n	8000988 <HAL_DMA_Abort_IT+0x9c>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a1f      	ldr	r2, [pc, #124]	; (80009c4 <HAL_DMA_Abort_IT+0xd8>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d01a      	beq.n	8000982 <HAL_DMA_Abort_IT+0x96>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a1d      	ldr	r2, [pc, #116]	; (80009c8 <HAL_DMA_Abort_IT+0xdc>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d012      	beq.n	800097c <HAL_DMA_Abort_IT+0x90>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <HAL_DMA_Abort_IT+0xe0>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d00a      	beq.n	8000976 <HAL_DMA_Abort_IT+0x8a>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a1a      	ldr	r2, [pc, #104]	; (80009d0 <HAL_DMA_Abort_IT+0xe4>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d102      	bne.n	8000970 <HAL_DMA_Abort_IT+0x84>
 800096a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800096e:	e00e      	b.n	800098e <HAL_DMA_Abort_IT+0xa2>
 8000970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000974:	e00b      	b.n	800098e <HAL_DMA_Abort_IT+0xa2>
 8000976:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800097a:	e008      	b.n	800098e <HAL_DMA_Abort_IT+0xa2>
 800097c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000980:	e005      	b.n	800098e <HAL_DMA_Abort_IT+0xa2>
 8000982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000986:	e002      	b.n	800098e <HAL_DMA_Abort_IT+0xa2>
 8000988:	2310      	movs	r3, #16
 800098a:	e000      	b.n	800098e <HAL_DMA_Abort_IT+0xa2>
 800098c:	2301      	movs	r3, #1
 800098e:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <HAL_DMA_Abort_IT+0xe8>)
 8000990:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2201      	movs	r2, #1
 8000996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d003      	beq.n	80009b2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	4798      	blx	r3
    } 
  }
  return status;
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40020008 	.word	0x40020008
 80009c0:	4002001c 	.word	0x4002001c
 80009c4:	40020030 	.word	0x40020030
 80009c8:	40020044 	.word	0x40020044
 80009cc:	40020058 	.word	0x40020058
 80009d0:	4002006c 	.word	0x4002006c
 80009d4:	40020000 	.word	0x40020000

080009d8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b08b      	sub	sp, #44	; 0x2c
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a02:	e121      	b.n	8000c48 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a04:	2201      	movs	r2, #1
 8000a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	69fa      	ldr	r2, [r7, #28]
 8000a14:	4013      	ands	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	f040 8110 	bne.w	8000c42 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	2b12      	cmp	r3, #18
 8000a28:	d034      	beq.n	8000a94 <HAL_GPIO_Init+0xa4>
 8000a2a:	2b12      	cmp	r3, #18
 8000a2c:	d80d      	bhi.n	8000a4a <HAL_GPIO_Init+0x5a>
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d02b      	beq.n	8000a8a <HAL_GPIO_Init+0x9a>
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d804      	bhi.n	8000a40 <HAL_GPIO_Init+0x50>
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d031      	beq.n	8000a9e <HAL_GPIO_Init+0xae>
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d01c      	beq.n	8000a78 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a3e:	e048      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	d043      	beq.n	8000acc <HAL_GPIO_Init+0xdc>
 8000a44:	2b11      	cmp	r3, #17
 8000a46:	d01b      	beq.n	8000a80 <HAL_GPIO_Init+0x90>
          break;
 8000a48:	e043      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a4a:	4a86      	ldr	r2, [pc, #536]	; (8000c64 <HAL_GPIO_Init+0x274>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d026      	beq.n	8000a9e <HAL_GPIO_Init+0xae>
 8000a50:	4a84      	ldr	r2, [pc, #528]	; (8000c64 <HAL_GPIO_Init+0x274>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d806      	bhi.n	8000a64 <HAL_GPIO_Init+0x74>
 8000a56:	4a84      	ldr	r2, [pc, #528]	; (8000c68 <HAL_GPIO_Init+0x278>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d020      	beq.n	8000a9e <HAL_GPIO_Init+0xae>
 8000a5c:	4a83      	ldr	r2, [pc, #524]	; (8000c6c <HAL_GPIO_Init+0x27c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d01d      	beq.n	8000a9e <HAL_GPIO_Init+0xae>
          break;
 8000a62:	e036      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a64:	4a82      	ldr	r2, [pc, #520]	; (8000c70 <HAL_GPIO_Init+0x280>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d019      	beq.n	8000a9e <HAL_GPIO_Init+0xae>
 8000a6a:	4a82      	ldr	r2, [pc, #520]	; (8000c74 <HAL_GPIO_Init+0x284>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d016      	beq.n	8000a9e <HAL_GPIO_Init+0xae>
 8000a70:	4a81      	ldr	r2, [pc, #516]	; (8000c78 <HAL_GPIO_Init+0x288>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d013      	beq.n	8000a9e <HAL_GPIO_Init+0xae>
          break;
 8000a76:	e02c      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	623b      	str	r3, [r7, #32]
          break;
 8000a7e:	e028      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	3304      	adds	r3, #4
 8000a86:	623b      	str	r3, [r7, #32]
          break;
 8000a88:	e023      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	3308      	adds	r3, #8
 8000a90:	623b      	str	r3, [r7, #32]
          break;
 8000a92:	e01e      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	330c      	adds	r3, #12
 8000a9a:	623b      	str	r3, [r7, #32]
          break;
 8000a9c:	e019      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d102      	bne.n	8000aac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	623b      	str	r3, [r7, #32]
          break;
 8000aaa:	e012      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d105      	bne.n	8000ac0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	69fa      	ldr	r2, [r7, #28]
 8000abc:	611a      	str	r2, [r3, #16]
          break;
 8000abe:	e008      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	69fa      	ldr	r2, [r7, #28]
 8000ac8:	615a      	str	r2, [r3, #20]
          break;
 8000aca:	e002      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
          break;
 8000ad0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	2bff      	cmp	r3, #255	; 0xff
 8000ad6:	d801      	bhi.n	8000adc <HAL_GPIO_Init+0xec>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	e001      	b.n	8000ae0 <HAL_GPIO_Init+0xf0>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3304      	adds	r3, #4
 8000ae0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	2bff      	cmp	r3, #255	; 0xff
 8000ae6:	d802      	bhi.n	8000aee <HAL_GPIO_Init+0xfe>
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	e002      	b.n	8000af4 <HAL_GPIO_Init+0x104>
 8000aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af0:	3b08      	subs	r3, #8
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	210f      	movs	r1, #15
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	401a      	ands	r2, r3
 8000b06:	6a39      	ldr	r1, [r7, #32]
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	f000 8090 	beq.w	8000c42 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b22:	4b56      	ldr	r3, [pc, #344]	; (8000c7c <HAL_GPIO_Init+0x28c>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	4a55      	ldr	r2, [pc, #340]	; (8000c7c <HAL_GPIO_Init+0x28c>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6193      	str	r3, [r2, #24]
 8000b2e:	4b53      	ldr	r3, [pc, #332]	; (8000c7c <HAL_GPIO_Init+0x28c>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b3a:	4a51      	ldr	r2, [pc, #324]	; (8000c80 <HAL_GPIO_Init+0x290>)
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	3302      	adds	r3, #2
 8000b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b46:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4a:	f003 0303 	and.w	r3, r3, #3
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	220f      	movs	r2, #15
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a48      	ldr	r2, [pc, #288]	; (8000c84 <HAL_GPIO_Init+0x294>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d00d      	beq.n	8000b82 <HAL_GPIO_Init+0x192>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a47      	ldr	r2, [pc, #284]	; (8000c88 <HAL_GPIO_Init+0x298>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d007      	beq.n	8000b7e <HAL_GPIO_Init+0x18e>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a46      	ldr	r2, [pc, #280]	; (8000c8c <HAL_GPIO_Init+0x29c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d101      	bne.n	8000b7a <HAL_GPIO_Init+0x18a>
 8000b76:	2302      	movs	r3, #2
 8000b78:	e004      	b.n	8000b84 <HAL_GPIO_Init+0x194>
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e002      	b.n	8000b84 <HAL_GPIO_Init+0x194>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e000      	b.n	8000b84 <HAL_GPIO_Init+0x194>
 8000b82:	2300      	movs	r3, #0
 8000b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b86:	f002 0203 	and.w	r2, r2, #3
 8000b8a:	0092      	lsls	r2, r2, #2
 8000b8c:	4093      	lsls	r3, r2
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b94:	493a      	ldr	r1, [pc, #232]	; (8000c80 <HAL_GPIO_Init+0x290>)
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	089b      	lsrs	r3, r3, #2
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d006      	beq.n	8000bbc <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bae:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	4937      	ldr	r1, [pc, #220]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	600b      	str	r3, [r1, #0]
 8000bba:	e006      	b.n	8000bca <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bbc:	4b34      	ldr	r3, [pc, #208]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	4932      	ldr	r1, [pc, #200]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d006      	beq.n	8000be4 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bd6:	4b2e      	ldr	r3, [pc, #184]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	492d      	ldr	r1, [pc, #180]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	604b      	str	r3, [r1, #4]
 8000be2:	e006      	b.n	8000bf2 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000be4:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000be6:	685a      	ldr	r2, [r3, #4]
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	4928      	ldr	r1, [pc, #160]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d006      	beq.n	8000c0c <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bfe:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	4923      	ldr	r1, [pc, #140]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	608b      	str	r3, [r1, #8]
 8000c0a:	e006      	b.n	8000c1a <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c0c:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	491e      	ldr	r1, [pc, #120]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000c16:	4013      	ands	r3, r2
 8000c18:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d006      	beq.n	8000c34 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	4919      	ldr	r1, [pc, #100]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	60cb      	str	r3, [r1, #12]
 8000c32:	e006      	b.n	8000c42 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000c36:	68da      	ldr	r2, [r3, #12]
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	4914      	ldr	r1, [pc, #80]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c44:	3301      	adds	r3, #1
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f47f aed6 	bne.w	8000a04 <HAL_GPIO_Init+0x14>
  }
}
 8000c58:	bf00      	nop
 8000c5a:	372c      	adds	r7, #44	; 0x2c
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	10210000 	.word	0x10210000
 8000c68:	10110000 	.word	0x10110000
 8000c6c:	10120000 	.word	0x10120000
 8000c70:	10310000 	.word	0x10310000
 8000c74:	10320000 	.word	0x10320000
 8000c78:	10220000 	.word	0x10220000
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40010000 	.word	0x40010000
 8000c84:	40010800 	.word	0x40010800
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	40011000 	.word	0x40011000
 8000c90:	40010400 	.word	0x40010400

08000c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e11f      	b.n	8000ee6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d106      	bne.n	8000cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fb90 	bl	80003e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2224      	movs	r2, #36	; 0x24
 8000cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0201 	bic.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ce6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cf8:	f002 fb88 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 8000cfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	4a7b      	ldr	r2, [pc, #492]	; (8000ef0 <HAL_I2C_Init+0x25c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d807      	bhi.n	8000d18 <HAL_I2C_Init+0x84>
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4a7a      	ldr	r2, [pc, #488]	; (8000ef4 <HAL_I2C_Init+0x260>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	bf94      	ite	ls
 8000d10:	2301      	movls	r3, #1
 8000d12:	2300      	movhi	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	e006      	b.n	8000d26 <HAL_I2C_Init+0x92>
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4a77      	ldr	r2, [pc, #476]	; (8000ef8 <HAL_I2C_Init+0x264>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	bf94      	ite	ls
 8000d20:	2301      	movls	r3, #1
 8000d22:	2300      	movhi	r3, #0
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e0db      	b.n	8000ee6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	4a72      	ldr	r2, [pc, #456]	; (8000efc <HAL_I2C_Init+0x268>)
 8000d32:	fba2 2303 	umull	r2, r3, r2, r3
 8000d36:	0c9b      	lsrs	r3, r3, #18
 8000d38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6a1b      	ldr	r3, [r3, #32]
 8000d54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	4a64      	ldr	r2, [pc, #400]	; (8000ef0 <HAL_I2C_Init+0x25c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d802      	bhi.n	8000d68 <HAL_I2C_Init+0xd4>
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	3301      	adds	r3, #1
 8000d66:	e009      	b.n	8000d7c <HAL_I2C_Init+0xe8>
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d6e:	fb02 f303 	mul.w	r3, r2, r3
 8000d72:	4a63      	ldr	r2, [pc, #396]	; (8000f00 <HAL_I2C_Init+0x26c>)
 8000d74:	fba2 2303 	umull	r2, r3, r2, r3
 8000d78:	099b      	lsrs	r3, r3, #6
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	6812      	ldr	r2, [r2, #0]
 8000d80:	430b      	orrs	r3, r1
 8000d82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	4956      	ldr	r1, [pc, #344]	; (8000ef0 <HAL_I2C_Init+0x25c>)
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d80d      	bhi.n	8000db8 <HAL_I2C_Init+0x124>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	1e59      	subs	r1, r3, #1
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000daa:	3301      	adds	r3, #1
 8000dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	bf38      	it	cc
 8000db4:	2304      	movcc	r3, #4
 8000db6:	e04f      	b.n	8000e58 <HAL_I2C_Init+0x1c4>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d111      	bne.n	8000de4 <HAL_I2C_Init+0x150>
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	1e58      	subs	r0, r3, #1
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6859      	ldr	r1, [r3, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	440b      	add	r3, r1
 8000dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	bf0c      	ite	eq
 8000ddc:	2301      	moveq	r3, #1
 8000dde:	2300      	movne	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	e012      	b.n	8000e0a <HAL_I2C_Init+0x176>
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	1e58      	subs	r0, r3, #1
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6859      	ldr	r1, [r3, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	0099      	lsls	r1, r3, #2
 8000df4:	440b      	add	r3, r1
 8000df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	bf0c      	ite	eq
 8000e04:	2301      	moveq	r3, #1
 8000e06:	2300      	movne	r3, #0
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_I2C_Init+0x17e>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e022      	b.n	8000e58 <HAL_I2C_Init+0x1c4>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10e      	bne.n	8000e38 <HAL_I2C_Init+0x1a4>
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	1e58      	subs	r0, r3, #1
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6859      	ldr	r1, [r3, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	440b      	add	r3, r1
 8000e28:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e36:	e00f      	b.n	8000e58 <HAL_I2C_Init+0x1c4>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	1e58      	subs	r0, r3, #1
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6859      	ldr	r1, [r3, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	440b      	add	r3, r1
 8000e46:	0099      	lsls	r1, r3, #2
 8000e48:	440b      	add	r3, r1
 8000e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e4e:	3301      	adds	r3, #1
 8000e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	6809      	ldr	r1, [r1, #0]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69da      	ldr	r2, [r3, #28]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	431a      	orrs	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	6911      	ldr	r1, [r2, #16]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68d2      	ldr	r2, [r2, #12]
 8000e92:	4311      	orrs	r1, r2
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	430b      	orrs	r3, r1
 8000e9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	695a      	ldr	r2, [r3, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0201 	orr.w	r2, r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2220      	movs	r2, #32
 8000ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	000186a0 	.word	0x000186a0
 8000ef4:	001e847f 	.word	0x001e847f
 8000ef8:	003d08ff 	.word	0x003d08ff
 8000efc:	431bde83 	.word	0x431bde83
 8000f00:	10624dd3 	.word	0x10624dd3

08000f04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	4611      	mov	r1, r2
 8000f10:	461a      	mov	r2, r3
 8000f12:	4603      	mov	r3, r0
 8000f14:	817b      	strh	r3, [r7, #10]
 8000f16:	460b      	mov	r3, r1
 8000f18:	813b      	strh	r3, [r7, #8]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f1e:	f7ff fbab 	bl	8000678 <HAL_GetTick>
 8000f22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b20      	cmp	r3, #32
 8000f2e:	f040 80d9 	bne.w	80010e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2319      	movs	r3, #25
 8000f38:	2201      	movs	r2, #1
 8000f3a:	496d      	ldr	r1, [pc, #436]	; (80010f0 <HAL_I2C_Mem_Write+0x1ec>)
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f001 fcbd 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	e0cc      	b.n	80010e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d101      	bne.n	8000f5a <HAL_I2C_Mem_Write+0x56>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e0c5      	b.n	80010e6 <HAL_I2C_Mem_Write+0x1e2>
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d007      	beq.n	8000f80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f042 0201 	orr.w	r2, r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2221      	movs	r2, #33	; 0x21
 8000f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2240      	movs	r2, #64	; 0x40
 8000f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6a3a      	ldr	r2, [r7, #32]
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4a4d      	ldr	r2, [pc, #308]	; (80010f4 <HAL_I2C_Mem_Write+0x1f0>)
 8000fc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fc2:	88f8      	ldrh	r0, [r7, #6]
 8000fc4:	893a      	ldrh	r2, [r7, #8]
 8000fc6:	8979      	ldrh	r1, [r7, #10]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f001 fb34 	bl	8002640 <I2C_RequestMemoryWrite>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d052      	beq.n	8001084 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e081      	b.n	80010e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f001 fd3e 	bl	8002a68 <I2C_WaitOnTXEFlagUntilTimeout>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00d      	beq.n	800100e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d107      	bne.n	800100a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001008:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e06b      	b.n	80010e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001012:	781a      	ldrb	r2, [r3, #0]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001028:	3b01      	subs	r3, #1
 800102a:	b29a      	uxth	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001034:	b29b      	uxth	r3, r3
 8001036:	3b01      	subs	r3, #1
 8001038:	b29a      	uxth	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	2b04      	cmp	r3, #4
 800104a:	d11b      	bne.n	8001084 <HAL_I2C_Mem_Write+0x180>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001050:	2b00      	cmp	r3, #0
 8001052:	d017      	beq.n	8001084 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	781a      	ldrb	r2, [r3, #0]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800106e:	3b01      	subs	r3, #1
 8001070:	b29a      	uxth	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800107a:	b29b      	uxth	r3, r3
 800107c:	3b01      	subs	r3, #1
 800107e:	b29a      	uxth	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1aa      	bne.n	8000fe2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f001 fd2a 	bl	8002aea <I2C_WaitOnBTFFlagUntilTimeout>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00d      	beq.n	80010b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d107      	bne.n	80010b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e016      	b.n	80010e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2220      	movs	r2, #32
 80010cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e000      	b.n	80010e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80010e4:	2302      	movs	r3, #2
  }
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	00100002 	.word	0x00100002
 80010f4:	ffff0000 	.word	0xffff0000

080010f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001110:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001118:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001120:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	2b10      	cmp	r3, #16
 8001126:	d003      	beq.n	8001130 <HAL_I2C_EV_IRQHandler+0x38>
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	2b40      	cmp	r3, #64	; 0x40
 800112c:	f040 80bd 	bne.w	80012aa <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10d      	bne.n	8001166 <HAL_I2C_EV_IRQHandler+0x6e>
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001150:	d003      	beq.n	800115a <HAL_I2C_EV_IRQHandler+0x62>
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001158:	d101      	bne.n	800115e <HAL_I2C_EV_IRQHandler+0x66>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_I2C_EV_IRQHandler+0x68>
 800115e:	2300      	movs	r3, #0
 8001160:	2b01      	cmp	r3, #1
 8001162:	f000 812e 	beq.w	80013c2 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00c      	beq.n	800118a <HAL_I2C_EV_IRQHandler+0x92>
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	0a5b      	lsrs	r3, r3, #9
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b00      	cmp	r3, #0
 800117a:	d006      	beq.n	800118a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f001 fd55 	bl	8002c2c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 fcb1 	bl	8001aea <I2C_Master_SB>
 8001188:	e08e      	b.n	80012a8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	08db      	lsrs	r3, r3, #3
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d009      	beq.n	80011aa <HAL_I2C_EV_IRQHandler+0xb2>
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	0a5b      	lsrs	r3, r3, #9
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 fd26 	bl	8001bf4 <I2C_Master_ADD10>
 80011a8:	e07e      	b.n	80012a8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	085b      	lsrs	r3, r3, #1
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d009      	beq.n	80011ca <HAL_I2C_EV_IRQHandler+0xd2>
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	0a5b      	lsrs	r3, r3, #9
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 fd3f 	bl	8001c46 <I2C_Master_ADDR>
 80011c8:	e06e      	b.n	80012a8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d037      	beq.n	8001246 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011e4:	f000 80ef 	beq.w	80013c6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	09db      	lsrs	r3, r3, #7
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00f      	beq.n	8001214 <HAL_I2C_EV_IRQHandler+0x11c>
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	0a9b      	lsrs	r3, r3, #10
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d009      	beq.n	8001214 <HAL_I2C_EV_IRQHandler+0x11c>
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d103      	bne.n	8001214 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f93e 	bl	800148e <I2C_MasterTransmit_TXE>
 8001212:	e049      	b.n	80012a8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80d2 	beq.w	80013c6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	0a5b      	lsrs	r3, r3, #9
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 80cb 	beq.w	80013c6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2b10      	cmp	r3, #16
 8001234:	d103      	bne.n	800123e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 f9c5 	bl	80015c6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800123c:	e0c3      	b.n	80013c6 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 fa29 	bl	8001696 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001244:	e0bf      	b.n	80013c6 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001254:	f000 80b7 	beq.w	80013c6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	099b      	lsrs	r3, r3, #6
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00f      	beq.n	8001284 <HAL_I2C_EV_IRQHandler+0x18c>
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	0a9b      	lsrs	r3, r3, #10
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b00      	cmp	r3, #0
 800126e:	d009      	beq.n	8001284 <HAL_I2C_EV_IRQHandler+0x18c>
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d103      	bne.n	8001284 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 fa99 	bl	80017b4 <I2C_MasterReceive_RXNE>
 8001282:	e011      	b.n	80012a8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 809a 	beq.w	80013c6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	0a5b      	lsrs	r3, r3, #9
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 8093 	beq.w	80013c6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 fb38 	bl	8001916 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012a6:	e08e      	b.n	80013c6 <HAL_I2C_EV_IRQHandler+0x2ce>
 80012a8:	e08d      	b.n	80013c6 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d004      	beq.n	80012bc <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	e007      	b.n	80012cc <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	085b      	lsrs	r3, r3, #1
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d012      	beq.n	80012fe <HAL_I2C_EV_IRQHandler+0x206>
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	0a5b      	lsrs	r3, r3, #9
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00c      	beq.n	80012fe <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80012f4:	69b9      	ldr	r1, [r7, #24]
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 fefc 	bl	80020f4 <I2C_Slave_ADDR>
 80012fc:	e066      	b.n	80013cc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d009      	beq.n	800131e <HAL_I2C_EV_IRQHandler+0x226>
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	0a5b      	lsrs	r3, r3, #9
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 ff30 	bl	800217c <I2C_Slave_STOPF>
 800131c:	e056      	b.n	80013cc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800131e:	7bbb      	ldrb	r3, [r7, #14]
 8001320:	2b21      	cmp	r3, #33	; 0x21
 8001322:	d002      	beq.n	800132a <HAL_I2C_EV_IRQHandler+0x232>
 8001324:	7bbb      	ldrb	r3, [r7, #14]
 8001326:	2b29      	cmp	r3, #41	; 0x29
 8001328:	d125      	bne.n	8001376 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	09db      	lsrs	r3, r3, #7
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00f      	beq.n	8001356 <HAL_I2C_EV_IRQHandler+0x25e>
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	0a9b      	lsrs	r3, r3, #10
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d009      	beq.n	8001356 <HAL_I2C_EV_IRQHandler+0x25e>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d103      	bne.n	8001356 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fe14 	bl	8001f7c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001354:	e039      	b.n	80013ca <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d033      	beq.n	80013ca <HAL_I2C_EV_IRQHandler+0x2d2>
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	0a5b      	lsrs	r3, r3, #9
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d02d      	beq.n	80013ca <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fe41 	bl	8001ff6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001374:	e029      	b.n	80013ca <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	099b      	lsrs	r3, r3, #6
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00f      	beq.n	80013a2 <HAL_I2C_EV_IRQHandler+0x2aa>
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	0a9b      	lsrs	r3, r3, #10
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	d009      	beq.n	80013a2 <HAL_I2C_EV_IRQHandler+0x2aa>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d103      	bne.n	80013a2 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fe4b 	bl	8002036 <I2C_SlaveReceive_RXNE>
 80013a0:	e014      	b.n	80013cc <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00e      	beq.n	80013cc <HAL_I2C_EV_IRQHandler+0x2d4>
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	0a5b      	lsrs	r3, r3, #9
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d008      	beq.n	80013cc <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fe79 	bl	80020b2 <I2C_SlaveReceive_BTF>
 80013c0:	e004      	b.n	80013cc <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80013c2:	bf00      	nop
 80013c4:	e002      	b.n	80013cc <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013c6:	bf00      	nop
 80013c8:	e000      	b.n	80013cc <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80013ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80013cc:	3720      	adds	r7, #32
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	460b      	mov	r3, r1
 8001424:	70fb      	strb	r3, [r7, #3]
 8001426:	4613      	mov	r3, r2
 8001428:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800149c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014a4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d150      	bne.n	8001556 <I2C_MasterTransmit_TXE+0xc8>
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2b21      	cmp	r3, #33	; 0x21
 80014b8:	d14d      	bne.n	8001556 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d01d      	beq.n	80014fc <I2C_MasterTransmit_TXE+0x6e>
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b20      	cmp	r3, #32
 80014c4:	d01a      	beq.n	80014fc <I2C_MasterTransmit_TXE+0x6e>
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80014cc:	d016      	beq.n	80014fc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80014dc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2211      	movs	r2, #17
 80014e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2220      	movs	r2, #32
 80014f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff6c 	bl	80013d2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80014fa:	e060      	b.n	80015be <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800150a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800151a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2220      	movs	r2, #32
 8001526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b40      	cmp	r3, #64	; 0x40
 8001534:	d107      	bne.n	8001546 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ff81 	bl	8001446 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001544:	e03b      	b.n	80015be <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ff3f 	bl	80013d2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001554:	e033      	b.n	80015be <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	2b21      	cmp	r3, #33	; 0x21
 800155a:	d005      	beq.n	8001568 <I2C_MasterTransmit_TXE+0xda>
 800155c:	7bbb      	ldrb	r3, [r7, #14]
 800155e:	2b40      	cmp	r3, #64	; 0x40
 8001560:	d12d      	bne.n	80015be <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	2b22      	cmp	r3, #34	; 0x22
 8001566:	d12a      	bne.n	80015be <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156c:	b29b      	uxth	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d108      	bne.n	8001584 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001580:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001582:	e01c      	b.n	80015be <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b40      	cmp	r3, #64	; 0x40
 800158e:	d103      	bne.n	8001598 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f880 	bl	8001696 <I2C_MemoryTransmit_TXE_BTF>
}
 8001596:	e012      	b.n	80015be <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80015bc:	e7ff      	b.n	80015be <I2C_MasterTransmit_TXE+0x130>
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b21      	cmp	r3, #33	; 0x21
 80015de:	d156      	bne.n	800168e <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d012      	beq.n	8001610 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	781a      	ldrb	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001604:	b29b      	uxth	r3, r3
 8001606:	3b01      	subs	r3, #1
 8001608:	b29a      	uxth	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800160e:	e03e      	b.n	800168e <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b08      	cmp	r3, #8
 8001614:	d01d      	beq.n	8001652 <I2C_MasterTransmit_BTF+0x8c>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2b20      	cmp	r3, #32
 800161a:	d01a      	beq.n	8001652 <I2C_MasterTransmit_BTF+0x8c>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001622:	d016      	beq.n	8001652 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001632:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2211      	movs	r2, #17
 8001638:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2220      	movs	r2, #32
 8001646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fec1 	bl	80013d2 <HAL_I2C_MasterTxCpltCallback>
}
 8001650:	e01d      	b.n	800168e <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001660:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001670:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2220      	movs	r2, #32
 800167c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff fea2 	bl	80013d2 <HAL_I2C_MasterTxCpltCallback>
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d11d      	bne.n	80016ea <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d10b      	bne.n	80016ce <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016c6:	1c9a      	adds	r2, r3, #2
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80016cc:	e06e      	b.n	80017ac <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	121b      	asrs	r3, r3, #8
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80016e8:	e060      	b.n	80017ac <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d10b      	bne.n	800170a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001708:	e050      	b.n	80017ac <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800170e:	2b02      	cmp	r3, #2
 8001710:	d14c      	bne.n	80017ac <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	2b22      	cmp	r3, #34	; 0x22
 8001716:	d108      	bne.n	800172a <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001726:	601a      	str	r2, [r3, #0]
}
 8001728:	e040      	b.n	80017ac <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172e:	b29b      	uxth	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d015      	beq.n	8001760 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	2b21      	cmp	r3, #33	; 0x21
 8001738:	d112      	bne.n	8001760 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001754:	b29b      	uxth	r3, r3
 8001756:	3b01      	subs	r3, #1
 8001758:	b29a      	uxth	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800175e:	e025      	b.n	80017ac <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001764:	b29b      	uxth	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d120      	bne.n	80017ac <I2C_MemoryTransmit_TXE_BTF+0x116>
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	2b21      	cmp	r3, #33	; 0x21
 800176e:	d11d      	bne.n	80017ac <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800177e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800178e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2220      	movs	r2, #32
 800179a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fe4d 	bl	8001446 <HAL_I2C_MemTxCpltCallback>
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b22      	cmp	r3, #34	; 0x22
 80017c6:	f040 80a2 	bne.w	800190e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d921      	bls.n	800181c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	691a      	ldr	r2, [r3, #16]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001802:	b29b      	uxth	r3, r3
 8001804:	2b03      	cmp	r3, #3
 8001806:	f040 8082 	bne.w	800190e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001818:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800181a:	e078      	b.n	800190e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001820:	2b02      	cmp	r3, #2
 8001822:	d074      	beq.n	800190e <I2C_MasterReceive_RXNE+0x15a>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d002      	beq.n	8001830 <I2C_MasterReceive_RXNE+0x7c>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d16e      	bne.n	800190e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f001 f99b 	bl	8002b6c <I2C_WaitOnSTOPRequestThroughIT>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d142      	bne.n	80018c2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800184a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800185a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691a      	ldr	r2, [r3, #16]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001878:	b29b      	uxth	r3, r3
 800187a:	3b01      	subs	r3, #1
 800187c:	b29a      	uxth	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2220      	movs	r2, #32
 8001886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b40      	cmp	r3, #64	; 0x40
 8001894:	d10a      	bne.n	80018ac <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fdd7 	bl	8001458 <HAL_I2C_MemRxCpltCallback>
}
 80018aa:	e030      	b.n	800190e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2212      	movs	r2, #18
 80018b8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff fd92 	bl	80013e4 <HAL_I2C_MasterRxCpltCallback>
}
 80018c0:	e025      	b.n	800190e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018d0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2220      	movs	r2, #32
 80018fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff fdae 	bl	800146a <HAL_I2C_ErrorCallback>
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29b      	uxth	r3, r3
 800192a:	2b04      	cmp	r3, #4
 800192c:	d11b      	bne.n	8001966 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800193c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195a:	b29b      	uxth	r3, r3
 800195c:	3b01      	subs	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001964:	e0bd      	b.n	8001ae2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196a:	b29b      	uxth	r3, r3
 800196c:	2b03      	cmp	r3, #3
 800196e:	d129      	bne.n	80019c4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800197e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b04      	cmp	r3, #4
 8001984:	d00a      	beq.n	800199c <I2C_MasterReceive_BTF+0x86>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d007      	beq.n	800199c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800199a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29a      	uxth	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80019c2:	e08e      	b.n	8001ae2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d176      	bne.n	8001abc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d002      	beq.n	80019da <I2C_MasterReceive_BTF+0xc4>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b10      	cmp	r3, #16
 80019d8:	d108      	bne.n	80019ec <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	e019      	b.n	8001a20 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d002      	beq.n	80019f8 <I2C_MasterReceive_BTF+0xe2>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d108      	bne.n	8001a0a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	e00a      	b.n	8001a20 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b10      	cmp	r3, #16
 8001a0e:	d007      	beq.n	8001a20 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a1e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691a      	ldr	r2, [r3, #16]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	3b01      	subs	r3, #1
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a7a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b40      	cmp	r3, #64	; 0x40
 8001a8e:	d10a      	bne.n	8001aa6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff fcda 	bl	8001458 <HAL_I2C_MemRxCpltCallback>
}
 8001aa4:	e01d      	b.n	8001ae2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2212      	movs	r2, #18
 8001ab2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff fc95 	bl	80013e4 <HAL_I2C_MasterRxCpltCallback>
}
 8001aba:	e012      	b.n	8001ae2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	3b01      	subs	r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b40      	cmp	r3, #64	; 0x40
 8001afc:	d117      	bne.n	8001b2e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b16:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001b18:	e067      	b.n	8001bea <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	611a      	str	r2, [r3, #16]
}
 8001b2c:	e05d      	b.n	8001bea <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b36:	d133      	bne.n	8001ba0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b21      	cmp	r3, #33	; 0x21
 8001b42:	d109      	bne.n	8001b58 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b54:	611a      	str	r2, [r3, #16]
 8001b56:	e008      	b.n	8001b6a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d004      	beq.n	8001b7c <I2C_Master_SB+0x92>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d108      	bne.n	8001b8e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d032      	beq.n	8001bea <I2C_Master_SB+0x100>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d02d      	beq.n	8001bea <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b9c:	605a      	str	r2, [r3, #4]
}
 8001b9e:	e024      	b.n	8001bea <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10e      	bne.n	8001bc6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	11db      	asrs	r3, r3, #7
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f003 0306 	and.w	r3, r3, #6
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f063 030f 	orn	r3, r3, #15
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	611a      	str	r2, [r3, #16]
}
 8001bc4:	e011      	b.n	8001bea <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d10d      	bne.n	8001bea <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	11db      	asrs	r3, r3, #7
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	f003 0306 	and.w	r3, r3, #6
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f063 030e 	orn	r3, r3, #14
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	611a      	str	r2, [r3, #16]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d103      	bne.n	8001c18 <I2C_Master_ADD10+0x24>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d011      	beq.n	8001c3c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d104      	bne.n	8001c2c <I2C_Master_ADD10+0x38>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d007      	beq.n	8001c3c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c3a:	605a      	str	r2, [r3, #4]
    }
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b091      	sub	sp, #68	; 0x44
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b22      	cmp	r3, #34	; 0x22
 8001c6e:	f040 8174 	bne.w	8001f5a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10f      	bne.n	8001c9a <I2C_Master_ADDR+0x54>
 8001c7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c7e:	2b40      	cmp	r3, #64	; 0x40
 8001c80:	d10b      	bne.n	8001c9a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c82:	2300      	movs	r3, #0
 8001c84:	633b      	str	r3, [r7, #48]	; 0x30
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
 8001c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c98:	e16b      	b.n	8001f72 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d11d      	bne.n	8001cde <I2C_Master_ADDR+0x98>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001caa:	d118      	bne.n	8001cde <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cac:	2300      	movs	r3, #0
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	651a      	str	r2, [r3, #80]	; 0x50
 8001cdc:	e149      	b.n	8001f72 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d113      	bne.n	8001d10 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	e120      	b.n	8001f52 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	f040 808a 	bne.w	8001e30 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d22:	d137      	bne.n	8001d94 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d32:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d42:	d113      	bne.n	8001d6c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d52:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d54:	2300      	movs	r3, #0
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	e0f2      	b.n	8001f52 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	623b      	str	r3, [r7, #32]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	623b      	str	r3, [r7, #32]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	623b      	str	r3, [r7, #32]
 8001d80:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	e0de      	b.n	8001f52 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d02e      	beq.n	8001df8 <I2C_Master_ADDR+0x1b2>
 8001d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d02b      	beq.n	8001df8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da2:	2b12      	cmp	r3, #18
 8001da4:	d102      	bne.n	8001dac <I2C_Master_ADDR+0x166>
 8001da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d125      	bne.n	8001df8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d00e      	beq.n	8001dd0 <I2C_Master_ADDR+0x18a>
 8001db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d00b      	beq.n	8001dd0 <I2C_Master_ADDR+0x18a>
 8001db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d008      	beq.n	8001dd0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e007      	b.n	8001de0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dde:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	61fb      	str	r3, [r7, #28]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	e0ac      	b.n	8001f52 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e06:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	61bb      	str	r3, [r7, #24]
 8001e1c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	e090      	b.n	8001f52 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d158      	bne.n	8001eec <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d021      	beq.n	8001e84 <I2C_Master_ADDR+0x23e>
 8001e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d01e      	beq.n	8001e84 <I2C_Master_ADDR+0x23e>
 8001e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e48:	2b10      	cmp	r3, #16
 8001e4a:	d01b      	beq.n	8001e84 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e5a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e012      	b.n	8001eaa <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e92:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e94:	2300      	movs	r3, #0
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eb8:	d14b      	bne.n	8001f52 <I2C_Master_ADDR+0x30c>
 8001eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ebc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ec0:	d00b      	beq.n	8001eda <I2C_Master_ADDR+0x294>
 8001ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d008      	beq.n	8001eda <I2C_Master_ADDR+0x294>
 8001ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d005      	beq.n	8001eda <I2C_Master_ADDR+0x294>
 8001ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed0:	2b10      	cmp	r3, #16
 8001ed2:	d002      	beq.n	8001eda <I2C_Master_ADDR+0x294>
 8001ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d13b      	bne.n	8001f52 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	e032      	b.n	8001f52 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001efa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f0a:	d117      	bne.n	8001f3c <I2C_Master_ADDR+0x2f6>
 8001f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f12:	d00b      	beq.n	8001f2c <I2C_Master_ADDR+0x2e6>
 8001f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d008      	beq.n	8001f2c <I2C_Master_ADDR+0x2e6>
 8001f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d005      	beq.n	8001f2c <I2C_Master_ADDR+0x2e6>
 8001f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d002      	beq.n	8001f2c <I2C_Master_ADDR+0x2e6>
 8001f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f28:	2b20      	cmp	r3, #32
 8001f2a:	d107      	bne.n	8001f3c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f3a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8001f58:	e00b      	b.n	8001f72 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
}
 8001f70:	e7ff      	b.n	8001f72 <I2C_Master_ADDR+0x32c>
 8001f72:	bf00      	nop
 8001f74:	3744      	adds	r7, #68	; 0x44
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d02b      	beq.n	8001fee <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	781a      	ldrb	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d114      	bne.n	8001fee <I2C_SlaveTransmit_TXE+0x72>
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	2b29      	cmp	r3, #41	; 0x29
 8001fc8:	d111      	bne.n	8001fee <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fd8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2221      	movs	r2, #33	; 0x21
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2228      	movs	r2, #40	; 0x28
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff fa04 	bl	80013f6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002002:	b29b      	uxth	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d011      	beq.n	800202c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002044:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204a:	b29b      	uxth	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d02c      	beq.n	80020aa <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691a      	ldr	r2, [r3, #16]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206c:	b29b      	uxth	r3, r3
 800206e:	3b01      	subs	r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207a:	b29b      	uxth	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d114      	bne.n	80020aa <I2C_SlaveReceive_RXNE+0x74>
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	2b2a      	cmp	r3, #42	; 0x2a
 8002084:	d111      	bne.n	80020aa <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002094:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2222      	movs	r2, #34	; 0x22
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2228      	movs	r2, #40	; 0x28
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff f9af 	bl	8001408 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020be:	b29b      	uxth	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d012      	beq.n	80020ea <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800210e:	2b28      	cmp	r3, #40	; 0x28
 8002110:	d127      	bne.n	8002162 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002120:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800212e:	2301      	movs	r3, #1
 8002130:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	09db      	lsrs	r3, r3, #7
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d103      	bne.n	8002146 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	81bb      	strh	r3, [r7, #12]
 8002144:	e002      	b.n	800214c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002154:	89ba      	ldrh	r2, [r7, #12]
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	4619      	mov	r1, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff f95d 	bl	800141a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002160:	e008      	b.n	8002174 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f06f 0202 	mvn.w	r2, #2
 800216a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800219a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021d8:	d172      	bne.n	80022c0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	2b22      	cmp	r3, #34	; 0x22
 80021de:	d002      	beq.n	80021e6 <I2C_Slave_STOPF+0x6a>
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	2b2a      	cmp	r3, #42	; 0x2a
 80021e4:	d135      	bne.n	8002252 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f043 0204 	orr.w	r2, r3, #4
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002218:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fbda 	bl	80009d8 <HAL_DMA_GetState>
 8002224:	4603      	mov	r3, r0
 8002226:	2b01      	cmp	r3, #1
 8002228:	d049      	beq.n	80022be <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	4a69      	ldr	r2, [pc, #420]	; (80023d4 <I2C_Slave_STOPF+0x258>)
 8002230:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fb58 	bl	80008ec <HAL_DMA_Abort_IT>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d03d      	beq.n	80022be <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800224c:	4610      	mov	r0, r2
 800224e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002250:	e035      	b.n	80022be <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	b29a      	uxth	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f043 0204 	orr.w	r2, r3, #4
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002284:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fba4 	bl	80009d8 <HAL_DMA_GetState>
 8002290:	4603      	mov	r3, r0
 8002292:	2b01      	cmp	r3, #1
 8002294:	d014      	beq.n	80022c0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229a:	4a4e      	ldr	r2, [pc, #312]	; (80023d4 <I2C_Slave_STOPF+0x258>)
 800229c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fb22 	bl	80008ec <HAL_DMA_Abort_IT>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022b8:	4610      	mov	r0, r2
 80022ba:	4798      	blx	r3
 80022bc:	e000      	b.n	80022c0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022be:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d03e      	beq.n	8002348 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d112      	bne.n	80022fe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002308:	2b40      	cmp	r3, #64	; 0x40
 800230a:	d112      	bne.n	8002332 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	f043 0204 	orr.w	r2, r3, #4
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f843 	bl	80023dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002356:	e039      	b.n	80023cc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b2a      	cmp	r3, #42	; 0x2a
 800235c:	d109      	bne.n	8002372 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2228      	movs	r2, #40	; 0x28
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff f84b 	bl	8001408 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b28      	cmp	r3, #40	; 0x28
 800237c:	d111      	bne.n	80023a2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a15      	ldr	r2, [pc, #84]	; (80023d8 <I2C_Slave_STOPF+0x25c>)
 8002382:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff f84a 	bl	8001434 <HAL_I2C_ListenCpltCallback>
}
 80023a0:	e014      	b.n	80023cc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	2b22      	cmp	r3, #34	; 0x22
 80023a8:	d002      	beq.n	80023b0 <I2C_Slave_STOPF+0x234>
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b22      	cmp	r3, #34	; 0x22
 80023ae:	d10d      	bne.n	80023cc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff f81e 	bl	8001408 <HAL_I2C_SlaveRxCpltCallback>
}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	0800276d 	.word	0x0800276d
 80023d8:	ffff0000 	.word	0xffff0000

080023dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80023f4:	7bbb      	ldrb	r3, [r7, #14]
 80023f6:	2b10      	cmp	r3, #16
 80023f8:	d002      	beq.n	8002400 <I2C_ITError+0x24>
 80023fa:	7bbb      	ldrb	r3, [r7, #14]
 80023fc:	2b40      	cmp	r3, #64	; 0x40
 80023fe:	d10a      	bne.n	8002416 <I2C_ITError+0x3a>
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	2b22      	cmp	r3, #34	; 0x22
 8002404:	d107      	bne.n	8002416 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002414:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800241c:	2b28      	cmp	r3, #40	; 0x28
 800241e:	d107      	bne.n	8002430 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2228      	movs	r2, #40	; 0x28
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800242e:	e015      	b.n	800245c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800243a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800243e:	d00a      	beq.n	8002456 <I2C_ITError+0x7a>
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2b60      	cmp	r3, #96	; 0x60
 8002444:	d007      	beq.n	8002456 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800246a:	d161      	bne.n	8002530 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800247a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002480:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002484:	2b01      	cmp	r3, #1
 8002486:	d020      	beq.n	80024ca <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248c:	4a6a      	ldr	r2, [pc, #424]	; (8002638 <I2C_ITError+0x25c>)
 800248e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe fa29 	bl	80008ec <HAL_DMA_Abort_IT>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 8089 	beq.w	80025b4 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0201 	bic.w	r2, r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024c4:	4610      	mov	r0, r2
 80024c6:	4798      	blx	r3
 80024c8:	e074      	b.n	80025b4 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ce:	4a5a      	ldr	r2, [pc, #360]	; (8002638 <I2C_ITError+0x25c>)
 80024d0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fa08 	bl	80008ec <HAL_DMA_Abort_IT>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d068      	beq.n	80025b4 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ec:	2b40      	cmp	r3, #64	; 0x40
 80024ee:	d10b      	bne.n	8002508 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800252a:	4610      	mov	r0, r2
 800252c:	4798      	blx	r3
 800252e:	e041      	b.n	80025b4 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b60      	cmp	r3, #96	; 0x60
 800253a:	d125      	bne.n	8002588 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002554:	2b40      	cmp	r3, #64	; 0x40
 8002556:	d10b      	bne.n	8002570 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0201 	bic.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7fe ff7b 	bl	800147c <HAL_I2C_AbortCpltCallback>
 8002586:	e015      	b.n	80025b4 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002592:	2b40      	cmp	r3, #64	; 0x40
 8002594:	d10b      	bne.n	80025ae <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe ff5b 	bl	800146a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10e      	bne.n	80025e2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d104      	bne.n	80025e2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025f0:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f8:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b04      	cmp	r3, #4
 8002604:	d113      	bne.n	800262e <I2C_ITError+0x252>
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	2b28      	cmp	r3, #40	; 0x28
 800260a:	d110      	bne.n	800262e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a0b      	ldr	r2, [pc, #44]	; (800263c <I2C_ITError+0x260>)
 8002610:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7fe ff03 	bl	8001434 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	0800276d 	.word	0x0800276d
 800263c:	ffff0000 	.word	0xffff0000

08002640 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af02      	add	r7, sp, #8
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	4608      	mov	r0, r1
 800264a:	4611      	mov	r1, r2
 800264c:	461a      	mov	r2, r3
 800264e:	4603      	mov	r3, r0
 8002650:	817b      	strh	r3, [r7, #10]
 8002652:	460b      	mov	r3, r1
 8002654:	813b      	strh	r3, [r7, #8]
 8002656:	4613      	mov	r3, r2
 8002658:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002668:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	2200      	movs	r2, #0
 8002672:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f920 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00d      	beq.n	800269e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002690:	d103      	bne.n	800269a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e05f      	b.n	800275e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800269e:	897b      	ldrh	r3, [r7, #10]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	461a      	mov	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	6a3a      	ldr	r2, [r7, #32]
 80026b2:	492d      	ldr	r1, [pc, #180]	; (8002768 <I2C_RequestMemoryWrite+0x128>)
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f958 	bl	800296a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e04c      	b.n	800275e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026dc:	6a39      	ldr	r1, [r7, #32]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f9c2 	bl	8002a68 <I2C_WaitOnTXEFlagUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00d      	beq.n	8002706 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d107      	bne.n	8002702 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002700:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e02b      	b.n	800275e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d105      	bne.n	8002718 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800270c:	893b      	ldrh	r3, [r7, #8]
 800270e:	b2da      	uxtb	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	611a      	str	r2, [r3, #16]
 8002716:	e021      	b.n	800275c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002718:	893b      	ldrh	r3, [r7, #8]
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	b29b      	uxth	r3, r3
 800271e:	b2da      	uxtb	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002728:	6a39      	ldr	r1, [r7, #32]
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 f99c 	bl	8002a68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00d      	beq.n	8002752 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	2b04      	cmp	r3, #4
 800273c:	d107      	bne.n	800274e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800274c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e005      	b.n	800275e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002752:	893b      	ldrh	r3, [r7, #8]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	00010002 	.word	0x00010002

0800276c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002784:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002786:	4b4b      	ldr	r3, [pc, #300]	; (80028b4 <I2C_DMAAbort+0x148>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	08db      	lsrs	r3, r3, #3
 800278c:	4a4a      	ldr	r2, [pc, #296]	; (80028b8 <I2C_DMAAbort+0x14c>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0a1a      	lsrs	r2, r3, #8
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	00da      	lsls	r2, r3, #3
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f043 0220 	orr.w	r2, r3, #32
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80027b2:	e00a      	b.n	80027ca <I2C_DMAAbort+0x5e>
    }
    count--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c8:	d0ea      	beq.n	80027a0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d6:	2200      	movs	r2, #0
 80027d8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e6:	2200      	movs	r2, #0
 80027e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2200      	movs	r2, #0
 80027fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280c:	2200      	movs	r2, #0
 800280e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281c:	2200      	movs	r2, #0
 800281e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0201 	bic.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b60      	cmp	r3, #96	; 0x60
 800283a:	d10e      	bne.n	800285a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2200      	movs	r2, #0
 8002850:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002852:	6978      	ldr	r0, [r7, #20]
 8002854:	f7fe fe12 	bl	800147c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002858:	e027      	b.n	80028aa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800285a:	7cfb      	ldrb	r3, [r7, #19]
 800285c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002860:	2b28      	cmp	r3, #40	; 0x28
 8002862:	d117      	bne.n	8002894 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002882:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2200      	movs	r2, #0
 8002888:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2228      	movs	r2, #40	; 0x28
 800288e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002892:	e007      	b.n	80028a4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80028a4:	6978      	ldr	r0, [r7, #20]
 80028a6:	f7fe fde0 	bl	800146a <HAL_I2C_ErrorCallback>
}
 80028aa:	bf00      	nop
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000008 	.word	0x20000008
 80028b8:	14f8b589 	.word	0x14f8b589

080028bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	4613      	mov	r3, r2
 80028ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028cc:	e025      	b.n	800291a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d021      	beq.n	800291a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d6:	f7fd fecf 	bl	8000678 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d302      	bcc.n	80028ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d116      	bne.n	800291a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f043 0220 	orr.w	r2, r3, #32
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e023      	b.n	8002962 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	0c1b      	lsrs	r3, r3, #16
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d10d      	bne.n	8002940 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4013      	ands	r3, r2
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	bf0c      	ite	eq
 8002936:	2301      	moveq	r3, #1
 8002938:	2300      	movne	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	e00c      	b.n	800295a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	43da      	mvns	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4013      	ands	r3, r2
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	bf0c      	ite	eq
 8002952:	2301      	moveq	r3, #1
 8002954:	2300      	movne	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	429a      	cmp	r2, r3
 800295e:	d0b6      	beq.n	80028ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002978:	e051      	b.n	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002988:	d123      	bne.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002998:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f043 0204 	orr.w	r2, r3, #4
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e046      	b.n	8002a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d021      	beq.n	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029da:	f7fd fe4d 	bl	8000678 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d302      	bcc.n	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d116      	bne.n	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f043 0220 	orr.w	r2, r3, #32
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e020      	b.n	8002a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d10c      	bne.n	8002a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4013      	ands	r3, r2
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bf14      	ite	ne
 8002a3a:	2301      	movne	r3, #1
 8002a3c:	2300      	moveq	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	e00b      	b.n	8002a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	43da      	mvns	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf14      	ite	ne
 8002a54:	2301      	movne	r3, #1
 8002a56:	2300      	moveq	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d18d      	bne.n	800297a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a74:	e02d      	b.n	8002ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f8aa 	bl	8002bd0 <I2C_IsAcknowledgeFailed>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e02d      	b.n	8002ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d021      	beq.n	8002ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8e:	f7fd fdf3 	bl	8000678 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d302      	bcc.n	8002aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d116      	bne.n	8002ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f043 0220 	orr.w	r2, r3, #32
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e007      	b.n	8002ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002adc:	2b80      	cmp	r3, #128	; 0x80
 8002ade:	d1ca      	bne.n	8002a76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b084      	sub	sp, #16
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002af6:	e02d      	b.n	8002b54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f869 	bl	8002bd0 <I2C_IsAcknowledgeFailed>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e02d      	b.n	8002b64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0e:	d021      	beq.n	8002b54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b10:	f7fd fdb2 	bl	8000678 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d302      	bcc.n	8002b26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d116      	bne.n	8002b54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f043 0220 	orr.w	r2, r3, #32
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e007      	b.n	8002b64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d1ca      	bne.n	8002af8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b78:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	08db      	lsrs	r3, r3, #3
 8002b7e:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002b80:	fba2 2303 	umull	r2, r3, r2, r3
 8002b84:	0a1a      	lsrs	r2, r3, #8
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d107      	bne.n	8002baa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f043 0220 	orr.w	r2, r3, #32
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e008      	b.n	8002bbc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb8:	d0e9      	beq.n	8002b8e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20000008 	.word	0x20000008
 8002bcc:	14f8b589 	.word	0x14f8b589

08002bd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be6:	d11b      	bne.n	8002c20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bf0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f043 0204 	orr.w	r2, r3, #4
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002c3c:	d103      	bne.n	8002c46 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002c44:	e007      	b.n	8002c56 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c4e:	d102      	bne.n	8002c56 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2208      	movs	r2, #8
 8002c54:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e26c      	b.n	800314c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 8087 	beq.w	8002d8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c80:	4b92      	ldr	r3, [pc, #584]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d00c      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c8c:	4b8f      	ldr	r3, [pc, #572]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 030c 	and.w	r3, r3, #12
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d112      	bne.n	8002cbe <HAL_RCC_OscConfig+0x5e>
 8002c98:	4b8c      	ldr	r3, [pc, #560]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca4:	d10b      	bne.n	8002cbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca6:	4b89      	ldr	r3, [pc, #548]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d06c      	beq.n	8002d8c <HAL_RCC_OscConfig+0x12c>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d168      	bne.n	8002d8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e246      	b.n	800314c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc6:	d106      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x76>
 8002cc8:	4b80      	ldr	r3, [pc, #512]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a7f      	ldr	r2, [pc, #508]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	e02e      	b.n	8002d34 <HAL_RCC_OscConfig+0xd4>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x98>
 8002cde:	4b7b      	ldr	r3, [pc, #492]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a7a      	ldr	r2, [pc, #488]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	4b78      	ldr	r3, [pc, #480]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a77      	ldr	r2, [pc, #476]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e01d      	b.n	8002d34 <HAL_RCC_OscConfig+0xd4>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCC_OscConfig+0xbc>
 8002d02:	4b72      	ldr	r3, [pc, #456]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a71      	ldr	r2, [pc, #452]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b6f      	ldr	r3, [pc, #444]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a6e      	ldr	r2, [pc, #440]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e00b      	b.n	8002d34 <HAL_RCC_OscConfig+0xd4>
 8002d1c:	4b6b      	ldr	r3, [pc, #428]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a6a      	ldr	r2, [pc, #424]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b68      	ldr	r3, [pc, #416]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a67      	ldr	r2, [pc, #412]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7fd fc9c 	bl	8000678 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d44:	f7fd fc98 	bl	8000678 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	; 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e1fa      	b.n	800314c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	4b5d      	ldr	r3, [pc, #372]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0xe4>
 8002d62:	e014      	b.n	8002d8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fd fc88 	bl	8000678 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7fd fc84 	bl	8000678 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	; 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e1e6      	b.n	800314c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	4b53      	ldr	r3, [pc, #332]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x10c>
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d063      	beq.n	8002e62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d9a:	4b4c      	ldr	r3, [pc, #304]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002da6:	4b49      	ldr	r3, [pc, #292]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d11c      	bne.n	8002dec <HAL_RCC_OscConfig+0x18c>
 8002db2:	4b46      	ldr	r3, [pc, #280]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d116      	bne.n	8002dec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dbe:	4b43      	ldr	r3, [pc, #268]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d005      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x176>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d001      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e1ba      	b.n	800314c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4939      	ldr	r1, [pc, #228]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dea:	e03a      	b.n	8002e62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d020      	beq.n	8002e36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df4:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7fd fc3d 	bl	8000678 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e02:	f7fd fc39 	bl	8000678 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e19b      	b.n	800314c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e14:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e20:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4927      	ldr	r1, [pc, #156]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	600b      	str	r3, [r1, #0]
 8002e34:	e015      	b.n	8002e62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e36:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fd fc1c 	bl	8000678 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e44:	f7fd fc18 	bl	8000678 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e17a      	b.n	800314c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e56:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d03a      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d019      	beq.n	8002eaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e76:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <HAL_RCC_OscConfig+0x274>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7c:	f7fd fbfc 	bl	8000678 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e84:	f7fd fbf8 	bl	8000678 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e15a      	b.n	800314c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ea2:	2001      	movs	r0, #1
 8002ea4:	f000 fada 	bl	800345c <RCC_Delay>
 8002ea8:	e01c      	b.n	8002ee4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <HAL_RCC_OscConfig+0x274>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb0:	f7fd fbe2 	bl	8000678 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb6:	e00f      	b.n	8002ed8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb8:	f7fd fbde 	bl	8000678 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d908      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e140      	b.n	800314c <HAL_RCC_OscConfig+0x4ec>
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	42420000 	.word	0x42420000
 8002ed4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	4b9e      	ldr	r3, [pc, #632]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e9      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80a6 	beq.w	800303e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef6:	4b97      	ldr	r3, [pc, #604]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10d      	bne.n	8002f1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	4b94      	ldr	r3, [pc, #592]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	4a93      	ldr	r2, [pc, #588]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	61d3      	str	r3, [r2, #28]
 8002f0e:	4b91      	ldr	r3, [pc, #580]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1e:	4b8e      	ldr	r3, [pc, #568]	; (8003158 <HAL_RCC_OscConfig+0x4f8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d118      	bne.n	8002f5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2a:	4b8b      	ldr	r3, [pc, #556]	; (8003158 <HAL_RCC_OscConfig+0x4f8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a8a      	ldr	r2, [pc, #552]	; (8003158 <HAL_RCC_OscConfig+0x4f8>)
 8002f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f36:	f7fd fb9f 	bl	8000678 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3e:	f7fd fb9b 	bl	8000678 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b64      	cmp	r3, #100	; 0x64
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e0fd      	b.n	800314c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	4b81      	ldr	r3, [pc, #516]	; (8003158 <HAL_RCC_OscConfig+0x4f8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_OscConfig+0x312>
 8002f64:	4b7b      	ldr	r3, [pc, #492]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4a7a      	ldr	r2, [pc, #488]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6213      	str	r3, [r2, #32]
 8002f70:	e02d      	b.n	8002fce <HAL_RCC_OscConfig+0x36e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x334>
 8002f7a:	4b76      	ldr	r3, [pc, #472]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4a75      	ldr	r2, [pc, #468]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	6213      	str	r3, [r2, #32]
 8002f86:	4b73      	ldr	r3, [pc, #460]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	4a72      	ldr	r2, [pc, #456]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002f8c:	f023 0304 	bic.w	r3, r3, #4
 8002f90:	6213      	str	r3, [r2, #32]
 8002f92:	e01c      	b.n	8002fce <HAL_RCC_OscConfig+0x36e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	d10c      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x356>
 8002f9c:	4b6d      	ldr	r3, [pc, #436]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4a6c      	ldr	r2, [pc, #432]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	6213      	str	r3, [r2, #32]
 8002fa8:	4b6a      	ldr	r3, [pc, #424]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4a69      	ldr	r2, [pc, #420]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6213      	str	r3, [r2, #32]
 8002fb4:	e00b      	b.n	8002fce <HAL_RCC_OscConfig+0x36e>
 8002fb6:	4b67      	ldr	r3, [pc, #412]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4a66      	ldr	r2, [pc, #408]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	6213      	str	r3, [r2, #32]
 8002fc2:	4b64      	ldr	r3, [pc, #400]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	4a63      	ldr	r2, [pc, #396]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002fc8:	f023 0304 	bic.w	r3, r3, #4
 8002fcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d015      	beq.n	8003002 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd6:	f7fd fb4f 	bl	8000678 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fde:	f7fd fb4b 	bl	8000678 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0ab      	b.n	800314c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff4:	4b57      	ldr	r3, [pc, #348]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0ee      	beq.n	8002fde <HAL_RCC_OscConfig+0x37e>
 8003000:	e014      	b.n	800302c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003002:	f7fd fb39 	bl	8000678 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003008:	e00a      	b.n	8003020 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300a:	f7fd fb35 	bl	8000678 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	; 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e095      	b.n	800314c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003020:	4b4c      	ldr	r3, [pc, #304]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1ee      	bne.n	800300a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d105      	bne.n	800303e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003032:	4b48      	ldr	r3, [pc, #288]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	4a47      	ldr	r2, [pc, #284]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8003038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800303c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8081 	beq.w	800314a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003048:	4b42      	ldr	r3, [pc, #264]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d061      	beq.n	8003118 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d146      	bne.n	80030ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305c:	4b3f      	ldr	r3, [pc, #252]	; (800315c <HAL_RCC_OscConfig+0x4fc>)
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003062:	f7fd fb09 	bl	8000678 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306a:	f7fd fb05 	bl	8000678 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e067      	b.n	800314c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307c:	4b35      	ldr	r3, [pc, #212]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f0      	bne.n	800306a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003090:	d108      	bne.n	80030a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003092:	4b30      	ldr	r3, [pc, #192]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	492d      	ldr	r1, [pc, #180]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a4:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a19      	ldr	r1, [r3, #32]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	430b      	orrs	r3, r1
 80030b6:	4927      	ldr	r1, [pc, #156]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030bc:	4b27      	ldr	r3, [pc, #156]	; (800315c <HAL_RCC_OscConfig+0x4fc>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c2:	f7fd fad9 	bl	8000678 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ca:	f7fd fad5 	bl	8000678 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e037      	b.n	800314c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030dc:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x46a>
 80030e8:	e02f      	b.n	800314a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ea:	4b1c      	ldr	r3, [pc, #112]	; (800315c <HAL_RCC_OscConfig+0x4fc>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fd fac2 	bl	8000678 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fd fabe 	bl	8000678 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e020      	b.n	800314c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310a:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x498>
 8003116:	e018      	b.n	800314a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e013      	b.n	800314c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_OscConfig+0x4f4>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	429a      	cmp	r2, r3
 8003136:	d106      	bne.n	8003146 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d001      	beq.n	800314a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40021000 	.word	0x40021000
 8003158:	40007000 	.word	0x40007000
 800315c:	42420060 	.word	0x42420060

08003160 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0d0      	b.n	8003316 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003174:	4b6a      	ldr	r3, [pc, #424]	; (8003320 <HAL_RCC_ClockConfig+0x1c0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d910      	bls.n	80031a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b67      	ldr	r3, [pc, #412]	; (8003320 <HAL_RCC_ClockConfig+0x1c0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 0207 	bic.w	r2, r3, #7
 800318a:	4965      	ldr	r1, [pc, #404]	; (8003320 <HAL_RCC_ClockConfig+0x1c0>)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003192:	4b63      	ldr	r3, [pc, #396]	; (8003320 <HAL_RCC_ClockConfig+0x1c0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0b8      	b.n	8003316 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d020      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031bc:	4b59      	ldr	r3, [pc, #356]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4a58      	ldr	r2, [pc, #352]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031d4:	4b53      	ldr	r3, [pc, #332]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4a52      	ldr	r2, [pc, #328]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e0:	4b50      	ldr	r3, [pc, #320]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	494d      	ldr	r1, [pc, #308]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d040      	beq.n	8003280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d107      	bne.n	8003216 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	4b47      	ldr	r3, [pc, #284]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d115      	bne.n	800323e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e07f      	b.n	8003316 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d107      	bne.n	800322e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321e:	4b41      	ldr	r3, [pc, #260]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e073      	b.n	8003316 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322e:	4b3d      	ldr	r3, [pc, #244]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e06b      	b.n	8003316 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800323e:	4b39      	ldr	r3, [pc, #228]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f023 0203 	bic.w	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4936      	ldr	r1, [pc, #216]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003250:	f7fd fa12 	bl	8000678 <HAL_GetTick>
 8003254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003256:	e00a      	b.n	800326e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003258:	f7fd fa0e 	bl	8000678 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	; 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e053      	b.n	8003316 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326e:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 020c 	and.w	r2, r3, #12
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	429a      	cmp	r2, r3
 800327e:	d1eb      	bne.n	8003258 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003280:	4b27      	ldr	r3, [pc, #156]	; (8003320 <HAL_RCC_ClockConfig+0x1c0>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d210      	bcs.n	80032b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328e:	4b24      	ldr	r3, [pc, #144]	; (8003320 <HAL_RCC_ClockConfig+0x1c0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 0207 	bic.w	r2, r3, #7
 8003296:	4922      	ldr	r1, [pc, #136]	; (8003320 <HAL_RCC_ClockConfig+0x1c0>)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	4313      	orrs	r3, r2
 800329c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800329e:	4b20      	ldr	r3, [pc, #128]	; (8003320 <HAL_RCC_ClockConfig+0x1c0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d001      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e032      	b.n	8003316 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032bc:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4916      	ldr	r1, [pc, #88]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d009      	beq.n	80032ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032da:	4b12      	ldr	r3, [pc, #72]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	490e      	ldr	r1, [pc, #56]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032ee:	f000 f821 	bl	8003334 <HAL_RCC_GetSysClockFreq>
 80032f2:	4601      	mov	r1, r0
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 8003300:	5cd3      	ldrb	r3, [r2, r3]
 8003302:	fa21 f303 	lsr.w	r3, r1, r3
 8003306:	4a09      	ldr	r2, [pc, #36]	; (800332c <HAL_RCC_ClockConfig+0x1cc>)
 8003308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_RCC_ClockConfig+0x1d0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd f970 	bl	80005f4 <HAL_InitTick>

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40022000 	.word	0x40022000
 8003324:	40021000 	.word	0x40021000
 8003328:	08003894 	.word	0x08003894
 800332c:	20000008 	.word	0x20000008
 8003330:	2000000c 	.word	0x2000000c

08003334 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003334:	b490      	push	{r4, r7}
 8003336:	b08a      	sub	sp, #40	; 0x28
 8003338:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800333a:	4b2a      	ldr	r3, [pc, #168]	; (80033e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800333c:	1d3c      	adds	r4, r7, #4
 800333e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003344:	4b28      	ldr	r3, [pc, #160]	; (80033e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
 800334e:	2300      	movs	r3, #0
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	2300      	movs	r3, #0
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800335e:	4b23      	ldr	r3, [pc, #140]	; (80033ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b04      	cmp	r3, #4
 800336c:	d002      	beq.n	8003374 <HAL_RCC_GetSysClockFreq+0x40>
 800336e:	2b08      	cmp	r3, #8
 8003370:	d003      	beq.n	800337a <HAL_RCC_GetSysClockFreq+0x46>
 8003372:	e02d      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003374:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003376:	623b      	str	r3, [r7, #32]
      break;
 8003378:	e02d      	b.n	80033d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	0c9b      	lsrs	r3, r3, #18
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003386:	4413      	add	r3, r2
 8003388:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800338c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d013      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003398:	4b14      	ldr	r3, [pc, #80]	; (80033ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	0c5b      	lsrs	r3, r3, #17
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033a6:	4413      	add	r3, r2
 80033a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	4a0f      	ldr	r2, [pc, #60]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033b2:	fb02 f203 	mul.w	r2, r2, r3
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
 80033be:	e004      	b.n	80033ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	4a0c      	ldr	r2, [pc, #48]	; (80033f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033c4:	fb02 f303 	mul.w	r3, r2, r3
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	623b      	str	r3, [r7, #32]
      break;
 80033ce:	e002      	b.n	80033d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033d2:	623b      	str	r3, [r7, #32]
      break;
 80033d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d6:	6a3b      	ldr	r3, [r7, #32]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3728      	adds	r7, #40	; 0x28
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc90      	pop	{r4, r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	08003880 	.word	0x08003880
 80033e8:	08003890 	.word	0x08003890
 80033ec:	40021000 	.word	0x40021000
 80033f0:	007a1200 	.word	0x007a1200
 80033f4:	003d0900 	.word	0x003d0900

080033f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033fc:	4b02      	ldr	r3, [pc, #8]	; (8003408 <HAL_RCC_GetHCLKFreq+0x10>)
 80033fe:	681b      	ldr	r3, [r3, #0]
}
 8003400:	4618      	mov	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	20000008 	.word	0x20000008

0800340c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003410:	f7ff fff2 	bl	80033f8 <HAL_RCC_GetHCLKFreq>
 8003414:	4601      	mov	r1, r0
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	4a03      	ldr	r2, [pc, #12]	; (8003430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003422:	5cd3      	ldrb	r3, [r2, r3]
 8003424:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40021000 	.word	0x40021000
 8003430:	080038a4 	.word	0x080038a4

08003434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003438:	f7ff ffde 	bl	80033f8 <HAL_RCC_GetHCLKFreq>
 800343c:	4601      	mov	r1, r0
 800343e:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	0adb      	lsrs	r3, r3, #11
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4a03      	ldr	r2, [pc, #12]	; (8003458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800344a:	5cd3      	ldrb	r3, [r2, r3]
 800344c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40021000 	.word	0x40021000
 8003458:	080038a4 	.word	0x080038a4

0800345c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003464:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <RCC_Delay+0x34>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <RCC_Delay+0x38>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	0a5b      	lsrs	r3, r3, #9
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003478:	bf00      	nop
  }
  while (Delay --);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1e5a      	subs	r2, r3, #1
 800347e:	60fa      	str	r2, [r7, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f9      	bne.n	8003478 <RCC_Delay+0x1c>
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20000008 	.word	0x20000008
 8003494:	10624dd3 	.word	0x10624dd3

08003498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e03f      	b.n	800352a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fc ffd6 	bl	8000470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2224      	movs	r2, #36	; 0x24
 80034c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f905 	bl	80036ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b08a      	sub	sp, #40	; 0x28
 8003536:	af02      	add	r7, sp, #8
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	4613      	mov	r3, r2
 8003540:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b20      	cmp	r3, #32
 8003550:	d17c      	bne.n	800364c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_UART_Transmit+0x2c>
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e075      	b.n	800364e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_UART_Transmit+0x3e>
 800356c:	2302      	movs	r3, #2
 800356e:	e06e      	b.n	800364e <HAL_UART_Transmit+0x11c>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2221      	movs	r2, #33	; 0x21
 8003582:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003586:	f7fd f877 	bl	8000678 <HAL_GetTick>
 800358a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	88fa      	ldrh	r2, [r7, #6]
 8003590:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	88fa      	ldrh	r2, [r7, #6]
 8003596:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a0:	d108      	bne.n	80035b4 <HAL_UART_Transmit+0x82>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d104      	bne.n	80035b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	e003      	b.n	80035bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80035c4:	e02a      	b.n	800361c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2200      	movs	r2, #0
 80035ce:	2180      	movs	r1, #128	; 0x80
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f840 	bl	8003656 <UART_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e036      	b.n	800364e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	3302      	adds	r3, #2
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	e007      	b.n	800360e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	3301      	adds	r3, #1
 800360c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1cf      	bne.n	80035c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2200      	movs	r2, #0
 800362e:	2140      	movs	r1, #64	; 0x40
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f810 	bl	8003656 <UART_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e006      	b.n	800364e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	e000      	b.n	800364e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
  }
}
 800364e:	4618      	mov	r0, r3
 8003650:	3720      	adds	r7, #32
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	603b      	str	r3, [r7, #0]
 8003662:	4613      	mov	r3, r2
 8003664:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003666:	e02c      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d028      	beq.n	80036c2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <UART_WaitOnFlagUntilTimeout+0x30>
 8003676:	f7fc ffff 	bl	8000678 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	429a      	cmp	r2, r3
 8003684:	d21d      	bcs.n	80036c2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003694:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695a      	ldr	r2, [r3, #20]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0201 	bic.w	r2, r2, #1
 80036a4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e00f      	b.n	80036e2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4013      	ands	r3, r2
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	bf0c      	ite	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	2300      	movne	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d0c3      	beq.n	8003668 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003726:	f023 030c 	bic.w	r3, r3, #12
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	430b      	orrs	r3, r1
 8003732:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a2c      	ldr	r2, [pc, #176]	; (8003800 <UART_SetConfig+0x114>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d103      	bne.n	800375c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003754:	f7ff fe6e 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	e002      	b.n	8003762 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800375c:	f7ff fe56 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 8003760:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	009a      	lsls	r2, r3, #2
 800376c:	441a      	add	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	4a22      	ldr	r2, [pc, #136]	; (8003804 <UART_SetConfig+0x118>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	0119      	lsls	r1, r3, #4
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	009a      	lsls	r2, r3, #2
 800378c:	441a      	add	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	fbb2 f2f3 	udiv	r2, r2, r3
 8003798:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <UART_SetConfig+0x118>)
 800379a:	fba3 0302 	umull	r0, r3, r3, r2
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	2064      	movs	r0, #100	; 0x64
 80037a2:	fb00 f303 	mul.w	r3, r0, r3
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	3332      	adds	r3, #50	; 0x32
 80037ac:	4a15      	ldr	r2, [pc, #84]	; (8003804 <UART_SetConfig+0x118>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037b8:	4419      	add	r1, r3
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	009a      	lsls	r2, r3, #2
 80037c4:	441a      	add	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <UART_SetConfig+0x118>)
 80037d2:	fba3 0302 	umull	r0, r3, r3, r2
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	2064      	movs	r0, #100	; 0x64
 80037da:	fb00 f303 	mul.w	r3, r0, r3
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	3332      	adds	r3, #50	; 0x32
 80037e4:	4a07      	ldr	r2, [pc, #28]	; (8003804 <UART_SetConfig+0x118>)
 80037e6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	f003 020f 	and.w	r2, r3, #15
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	440a      	add	r2, r1
 80037f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40013800 	.word	0x40013800
 8003804:	51eb851f 	.word	0x51eb851f

08003808 <__libc_init_array>:
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	2500      	movs	r5, #0
 800380c:	4e0c      	ldr	r6, [pc, #48]	; (8003840 <__libc_init_array+0x38>)
 800380e:	4c0d      	ldr	r4, [pc, #52]	; (8003844 <__libc_init_array+0x3c>)
 8003810:	1ba4      	subs	r4, r4, r6
 8003812:	10a4      	asrs	r4, r4, #2
 8003814:	42a5      	cmp	r5, r4
 8003816:	d109      	bne.n	800382c <__libc_init_array+0x24>
 8003818:	f000 f822 	bl	8003860 <_init>
 800381c:	2500      	movs	r5, #0
 800381e:	4e0a      	ldr	r6, [pc, #40]	; (8003848 <__libc_init_array+0x40>)
 8003820:	4c0a      	ldr	r4, [pc, #40]	; (800384c <__libc_init_array+0x44>)
 8003822:	1ba4      	subs	r4, r4, r6
 8003824:	10a4      	asrs	r4, r4, #2
 8003826:	42a5      	cmp	r5, r4
 8003828:	d105      	bne.n	8003836 <__libc_init_array+0x2e>
 800382a:	bd70      	pop	{r4, r5, r6, pc}
 800382c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003830:	4798      	blx	r3
 8003832:	3501      	adds	r5, #1
 8003834:	e7ee      	b.n	8003814 <__libc_init_array+0xc>
 8003836:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800383a:	4798      	blx	r3
 800383c:	3501      	adds	r5, #1
 800383e:	e7f2      	b.n	8003826 <__libc_init_array+0x1e>
 8003840:	080038ac 	.word	0x080038ac
 8003844:	080038ac 	.word	0x080038ac
 8003848:	080038ac 	.word	0x080038ac
 800384c:	080038b0 	.word	0x080038b0

08003850 <memset>:
 8003850:	4603      	mov	r3, r0
 8003852:	4402      	add	r2, r0
 8003854:	4293      	cmp	r3, r2
 8003856:	d100      	bne.n	800385a <memset+0xa>
 8003858:	4770      	bx	lr
 800385a:	f803 1b01 	strb.w	r1, [r3], #1
 800385e:	e7f9      	b.n	8003854 <memset+0x4>

08003860 <_init>:
 8003860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003862:	bf00      	nop
 8003864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003866:	bc08      	pop	{r3}
 8003868:	469e      	mov	lr, r3
 800386a:	4770      	bx	lr

0800386c <_fini>:
 800386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386e:	bf00      	nop
 8003870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003872:	bc08      	pop	{r3}
 8003874:	469e      	mov	lr, r3
 8003876:	4770      	bx	lr
