
4.4-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001b24  08001b24  00011b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b48  08001b48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b48  08001b48  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b48  08001b48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b48  08001b48  00011b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b4c  08001b4c  00011b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  08001b5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08001b5c  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0dc  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018b3  00000000  00000000  0002c111  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000888  00000000  00000000  0002d9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007e0  00000000  00000000  0002e250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000147d3  00000000  00000000  0002ea30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006e02  00000000  00000000  00043203  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d48d  00000000  00000000  0004a005  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b7492  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022b4  00000000  00000000  000b7510  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001b0c 	.word	0x08001b0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001b0c 	.word	0x08001b0c

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f91f 	bl	80003a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fbbe 	bl	80018e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f937 	bl	800040a <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f8ff 	bl	80003b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000002c 	.word	0x2000002c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000002c 	.word	0x2000002c

08000210 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	f003 021f 	and.w	r2, r3, #31
 8000284:	4906      	ldr	r1, [pc, #24]	; (80002a0 <NVIC_EnableIRQ+0x2c>)
 8000286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028a:	095b      	lsrs	r3, r3, #5
 800028c:	2001      	movs	r0, #1
 800028e:	fa00 f202 	lsl.w	r2, r0, r2
 8000292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	6039      	str	r1, [r7, #0]
 80002ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da0b      	bge.n	80002d0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	490c      	ldr	r1, [pc, #48]	; (80002f0 <NVIC_SetPriority+0x4c>)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f003 030f 	and.w	r3, r3, #15
 80002c4:	3b04      	subs	r3, #4
 80002c6:	0112      	lsls	r2, r2, #4
 80002c8:	b2d2      	uxtb	r2, r2
 80002ca:	440b      	add	r3, r1
 80002cc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002ce:	e009      	b.n	80002e4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	4907      	ldr	r1, [pc, #28]	; (80002f4 <NVIC_SetPriority+0x50>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00
 80002f4:	e000e100 	.word	0xe000e100

080002f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b089      	sub	sp, #36	; 0x24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f003 0307 	and.w	r3, r3, #7
 800030a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800030c:	69fb      	ldr	r3, [r7, #28]
 800030e:	f1c3 0307 	rsb	r3, r3, #7
 8000312:	2b04      	cmp	r3, #4
 8000314:	bf28      	it	cs
 8000316:	2304      	movcs	r3, #4
 8000318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800031a:	69fb      	ldr	r3, [r7, #28]
 800031c:	3304      	adds	r3, #4
 800031e:	2b06      	cmp	r3, #6
 8000320:	d902      	bls.n	8000328 <NVIC_EncodePriority+0x30>
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3b03      	subs	r3, #3
 8000326:	e000      	b.n	800032a <NVIC_EncodePriority+0x32>
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800032c:	f04f 32ff 	mov.w	r2, #4294967295
 8000330:	69bb      	ldr	r3, [r7, #24]
 8000332:	fa02 f303 	lsl.w	r3, r2, r3
 8000336:	43da      	mvns	r2, r3
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	401a      	ands	r2, r3
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000340:	f04f 31ff 	mov.w	r1, #4294967295
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	43d9      	mvns	r1, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	4313      	orrs	r3, r2
         );
}
 8000352:	4618      	mov	r0, r3
 8000354:	3724      	adds	r7, #36	; 0x24
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3b01      	subs	r3, #1
 8000368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800036c:	d301      	bcc.n	8000372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800036e:	2301      	movs	r3, #1
 8000370:	e00f      	b.n	8000392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <SysTick_Config+0x40>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3b01      	subs	r3, #1
 8000378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800037a:	210f      	movs	r1, #15
 800037c:	f04f 30ff 	mov.w	r0, #4294967295
 8000380:	f7ff ff90 	bl	80002a4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <SysTick_Config+0x40>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <SysTick_Config+0x40>)
 800038c:	2207      	movs	r2, #7
 800038e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000390:	2300      	movs	r3, #0
}
 8000392:	4618      	mov	r0, r3
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	e000e010 	.word	0xe000e010

080003a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f7ff ff31 	bl	8000210 <NVIC_SetPriorityGrouping>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b086      	sub	sp, #24
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	4603      	mov	r3, r0
 80003be:	60b9      	str	r1, [r7, #8]
 80003c0:	607a      	str	r2, [r7, #4]
 80003c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003c8:	f7ff ff46 	bl	8000258 <NVIC_GetPriorityGrouping>
 80003cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	68b9      	ldr	r1, [r7, #8]
 80003d2:	6978      	ldr	r0, [r7, #20]
 80003d4:	f7ff ff90 	bl	80002f8 <NVIC_EncodePriority>
 80003d8:	4602      	mov	r2, r0
 80003da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003de:	4611      	mov	r1, r2
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ff5f 	bl	80002a4 <NVIC_SetPriority>
}
 80003e6:	bf00      	nop
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	4603      	mov	r3, r0
 80003f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80003f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ff39 	bl	8000274 <NVIC_EnableIRQ>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f7ff ffa2 	bl	800035c <SysTick_Config>
 8000418:	4603      	mov	r3, r0
}
 800041a:	4618      	mov	r0, r3
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000424:	b480      	push	{r7}
 8000426:	b08b      	sub	sp, #44	; 0x2c
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000432:	2300      	movs	r3, #0
 8000434:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000436:	2300      	movs	r3, #0
 8000438:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800043a:	2300      	movs	r3, #0
 800043c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800043e:	2300      	movs	r3, #0
 8000440:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000442:	2300      	movs	r3, #0
 8000444:	627b      	str	r3, [r7, #36]	; 0x24
 8000446:	e121      	b.n	800068c <HAL_GPIO_Init+0x268>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000448:	2201      	movs	r2, #1
 800044a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800044c:	fa02 f303 	lsl.w	r3, r2, r3
 8000450:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	69fa      	ldr	r2, [r7, #28]
 8000458:	4013      	ands	r3, r2
 800045a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800045c:	69ba      	ldr	r2, [r7, #24]
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	429a      	cmp	r2, r3
 8000462:	f040 8110 	bne.w	8000686 <HAL_GPIO_Init+0x262>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	2b12      	cmp	r3, #18
 800046c:	d034      	beq.n	80004d8 <HAL_GPIO_Init+0xb4>
 800046e:	2b12      	cmp	r3, #18
 8000470:	d80d      	bhi.n	800048e <HAL_GPIO_Init+0x6a>
 8000472:	2b02      	cmp	r3, #2
 8000474:	d02b      	beq.n	80004ce <HAL_GPIO_Init+0xaa>
 8000476:	2b02      	cmp	r3, #2
 8000478:	d804      	bhi.n	8000484 <HAL_GPIO_Init+0x60>
 800047a:	2b00      	cmp	r3, #0
 800047c:	d031      	beq.n	80004e2 <HAL_GPIO_Init+0xbe>
 800047e:	2b01      	cmp	r3, #1
 8000480:	d01c      	beq.n	80004bc <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000482:	e048      	b.n	8000516 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000484:	2b03      	cmp	r3, #3
 8000486:	d043      	beq.n	8000510 <HAL_GPIO_Init+0xec>
 8000488:	2b11      	cmp	r3, #17
 800048a:	d01b      	beq.n	80004c4 <HAL_GPIO_Init+0xa0>
          break;
 800048c:	e043      	b.n	8000516 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800048e:	4a84      	ldr	r2, [pc, #528]	; (80006a0 <HAL_GPIO_Init+0x27c>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d026      	beq.n	80004e2 <HAL_GPIO_Init+0xbe>
 8000494:	4a82      	ldr	r2, [pc, #520]	; (80006a0 <HAL_GPIO_Init+0x27c>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d806      	bhi.n	80004a8 <HAL_GPIO_Init+0x84>
 800049a:	4a82      	ldr	r2, [pc, #520]	; (80006a4 <HAL_GPIO_Init+0x280>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d020      	beq.n	80004e2 <HAL_GPIO_Init+0xbe>
 80004a0:	4a81      	ldr	r2, [pc, #516]	; (80006a8 <HAL_GPIO_Init+0x284>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d01d      	beq.n	80004e2 <HAL_GPIO_Init+0xbe>
          break;
 80004a6:	e036      	b.n	8000516 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80004a8:	4a80      	ldr	r2, [pc, #512]	; (80006ac <HAL_GPIO_Init+0x288>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d019      	beq.n	80004e2 <HAL_GPIO_Init+0xbe>
 80004ae:	4a80      	ldr	r2, [pc, #512]	; (80006b0 <HAL_GPIO_Init+0x28c>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d016      	beq.n	80004e2 <HAL_GPIO_Init+0xbe>
 80004b4:	4a7f      	ldr	r2, [pc, #508]	; (80006b4 <HAL_GPIO_Init+0x290>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d013      	beq.n	80004e2 <HAL_GPIO_Init+0xbe>
          break;
 80004ba:	e02c      	b.n	8000516 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	623b      	str	r3, [r7, #32]
          break;
 80004c2:	e028      	b.n	8000516 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	3304      	adds	r3, #4
 80004ca:	623b      	str	r3, [r7, #32]
          break;
 80004cc:	e023      	b.n	8000516 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	3308      	adds	r3, #8
 80004d4:	623b      	str	r3, [r7, #32]
          break;
 80004d6:	e01e      	b.n	8000516 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	330c      	adds	r3, #12
 80004de:	623b      	str	r3, [r7, #32]
          break;
 80004e0:	e019      	b.n	8000516 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	689b      	ldr	r3, [r3, #8]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d102      	bne.n	80004f0 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004ea:	2304      	movs	r3, #4
 80004ec:	623b      	str	r3, [r7, #32]
          break;
 80004ee:	e012      	b.n	8000516 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d105      	bne.n	8000504 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004f8:	2308      	movs	r3, #8
 80004fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	69fa      	ldr	r2, [r7, #28]
 8000500:	611a      	str	r2, [r3, #16]
          break;
 8000502:	e008      	b.n	8000516 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000504:	2308      	movs	r3, #8
 8000506:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	69fa      	ldr	r2, [r7, #28]
 800050c:	615a      	str	r2, [r3, #20]
          break;
 800050e:	e002      	b.n	8000516 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000510:	2300      	movs	r3, #0
 8000512:	623b      	str	r3, [r7, #32]
          break;
 8000514:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000516:	69bb      	ldr	r3, [r7, #24]
 8000518:	2bff      	cmp	r3, #255	; 0xff
 800051a:	d801      	bhi.n	8000520 <HAL_GPIO_Init+0xfc>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	e001      	b.n	8000524 <HAL_GPIO_Init+0x100>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	3304      	adds	r3, #4
 8000524:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000526:	69bb      	ldr	r3, [r7, #24]
 8000528:	2bff      	cmp	r3, #255	; 0xff
 800052a:	d802      	bhi.n	8000532 <HAL_GPIO_Init+0x10e>
 800052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	e002      	b.n	8000538 <HAL_GPIO_Init+0x114>
 8000532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000534:	3b08      	subs	r3, #8
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	210f      	movs	r1, #15
 8000540:	693b      	ldr	r3, [r7, #16]
 8000542:	fa01 f303 	lsl.w	r3, r1, r3
 8000546:	43db      	mvns	r3, r3
 8000548:	401a      	ands	r2, r3
 800054a:	6a39      	ldr	r1, [r7, #32]
 800054c:	693b      	ldr	r3, [r7, #16]
 800054e:	fa01 f303 	lsl.w	r3, r1, r3
 8000552:	431a      	orrs	r2, r3
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	2b00      	cmp	r3, #0
 8000562:	f000 8090 	beq.w	8000686 <HAL_GPIO_Init+0x262>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000566:	4b54      	ldr	r3, [pc, #336]	; (80006b8 <HAL_GPIO_Init+0x294>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	4a53      	ldr	r2, [pc, #332]	; (80006b8 <HAL_GPIO_Init+0x294>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6193      	str	r3, [r2, #24]
 8000572:	4b51      	ldr	r3, [pc, #324]	; (80006b8 <HAL_GPIO_Init+0x294>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800057e:	4a4f      	ldr	r2, [pc, #316]	; (80006bc <HAL_GPIO_Init+0x298>)
 8000580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000582:	089b      	lsrs	r3, r3, #2
 8000584:	3302      	adds	r3, #2
 8000586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800058a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058e:	f003 0303 	and.w	r3, r3, #3
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	220f      	movs	r2, #15
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	43db      	mvns	r3, r3
 800059c:	697a      	ldr	r2, [r7, #20]
 800059e:	4013      	ands	r3, r2
 80005a0:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a46      	ldr	r2, [pc, #280]	; (80006c0 <HAL_GPIO_Init+0x29c>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d00d      	beq.n	80005c6 <HAL_GPIO_Init+0x1a2>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a45      	ldr	r2, [pc, #276]	; (80006c4 <HAL_GPIO_Init+0x2a0>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d007      	beq.n	80005c2 <HAL_GPIO_Init+0x19e>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a44      	ldr	r2, [pc, #272]	; (80006c8 <HAL_GPIO_Init+0x2a4>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d101      	bne.n	80005be <HAL_GPIO_Init+0x19a>
 80005ba:	2302      	movs	r3, #2
 80005bc:	e004      	b.n	80005c8 <HAL_GPIO_Init+0x1a4>
 80005be:	2303      	movs	r3, #3
 80005c0:	e002      	b.n	80005c8 <HAL_GPIO_Init+0x1a4>
 80005c2:	2301      	movs	r3, #1
 80005c4:	e000      	b.n	80005c8 <HAL_GPIO_Init+0x1a4>
 80005c6:	2300      	movs	r3, #0
 80005c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ca:	f002 0203 	and.w	r2, r2, #3
 80005ce:	0092      	lsls	r2, r2, #2
 80005d0:	4093      	lsls	r3, r2
 80005d2:	697a      	ldr	r2, [r7, #20]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80005d8:	4938      	ldr	r1, [pc, #224]	; (80006bc <HAL_GPIO_Init+0x298>)
 80005da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005dc:	089b      	lsrs	r3, r3, #2
 80005de:	3302      	adds	r3, #2
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d006      	beq.n	8000600 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005f2:	4b36      	ldr	r3, [pc, #216]	; (80006cc <HAL_GPIO_Init+0x2a8>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	4935      	ldr	r1, [pc, #212]	; (80006cc <HAL_GPIO_Init+0x2a8>)
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	600b      	str	r3, [r1, #0]
 80005fe:	e006      	b.n	800060e <HAL_GPIO_Init+0x1ea>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000600:	4b32      	ldr	r3, [pc, #200]	; (80006cc <HAL_GPIO_Init+0x2a8>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	69bb      	ldr	r3, [r7, #24]
 8000606:	43db      	mvns	r3, r3
 8000608:	4930      	ldr	r1, [pc, #192]	; (80006cc <HAL_GPIO_Init+0x2a8>)
 800060a:	4013      	ands	r3, r2
 800060c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000616:	2b00      	cmp	r3, #0
 8000618:	d006      	beq.n	8000628 <HAL_GPIO_Init+0x204>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800061a:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <HAL_GPIO_Init+0x2a8>)
 800061c:	685a      	ldr	r2, [r3, #4]
 800061e:	492b      	ldr	r1, [pc, #172]	; (80006cc <HAL_GPIO_Init+0x2a8>)
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	4313      	orrs	r3, r2
 8000624:	604b      	str	r3, [r1, #4]
 8000626:	e006      	b.n	8000636 <HAL_GPIO_Init+0x212>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <HAL_GPIO_Init+0x2a8>)
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	43db      	mvns	r3, r3
 8000630:	4926      	ldr	r1, [pc, #152]	; (80006cc <HAL_GPIO_Init+0x2a8>)
 8000632:	4013      	ands	r3, r2
 8000634:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800063e:	2b00      	cmp	r3, #0
 8000640:	d006      	beq.n	8000650 <HAL_GPIO_Init+0x22c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <HAL_GPIO_Init+0x2a8>)
 8000644:	689a      	ldr	r2, [r3, #8]
 8000646:	4921      	ldr	r1, [pc, #132]	; (80006cc <HAL_GPIO_Init+0x2a8>)
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	4313      	orrs	r3, r2
 800064c:	608b      	str	r3, [r1, #8]
 800064e:	e006      	b.n	800065e <HAL_GPIO_Init+0x23a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <HAL_GPIO_Init+0x2a8>)
 8000652:	689a      	ldr	r2, [r3, #8]
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	43db      	mvns	r3, r3
 8000658:	491c      	ldr	r1, [pc, #112]	; (80006cc <HAL_GPIO_Init+0x2a8>)
 800065a:	4013      	ands	r3, r2
 800065c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <HAL_GPIO_Init+0x254>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <HAL_GPIO_Init+0x2a8>)
 800066c:	68da      	ldr	r2, [r3, #12]
 800066e:	4917      	ldr	r1, [pc, #92]	; (80006cc <HAL_GPIO_Init+0x2a8>)
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	4313      	orrs	r3, r2
 8000674:	60cb      	str	r3, [r1, #12]
 8000676:	e006      	b.n	8000686 <HAL_GPIO_Init+0x262>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <HAL_GPIO_Init+0x2a8>)
 800067a:	68da      	ldr	r2, [r3, #12]
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	43db      	mvns	r3, r3
 8000680:	4912      	ldr	r1, [pc, #72]	; (80006cc <HAL_GPIO_Init+0x2a8>)
 8000682:	4013      	ands	r3, r2
 8000684:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000688:	3301      	adds	r3, #1
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
 800068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068e:	2b0f      	cmp	r3, #15
 8000690:	f67f aeda 	bls.w	8000448 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000694:	bf00      	nop
 8000696:	372c      	adds	r7, #44	; 0x2c
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	10210000 	.word	0x10210000
 80006a4:	10110000 	.word	0x10110000
 80006a8:	10120000 	.word	0x10120000
 80006ac:	10310000 	.word	0x10310000
 80006b0:	10320000 	.word	0x10320000
 80006b4:	10220000 	.word	0x10220000
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010000 	.word	0x40010000
 80006c0:	40010800 	.word	0x40010800
 80006c4:	40010c00 	.word	0x40010c00
 80006c8:	40011000 	.word	0x40011000
 80006cc:	40010400 	.word	0x40010400

080006d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	689a      	ldr	r2, [r3, #8]
 80006e0:	887b      	ldrh	r3, [r7, #2]
 80006e2:	4013      	ands	r3, r2
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d002      	beq.n	80006ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80006e8:	2301      	movs	r3, #1
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e001      	b.n	80006f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr

080006fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006fe:	b480      	push	{r7}
 8000700:	b083      	sub	sp, #12
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
 8000706:	460b      	mov	r3, r1
 8000708:	807b      	strh	r3, [r7, #2]
 800070a:	4613      	mov	r3, r2
 800070c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800070e:	787b      	ldrb	r3, [r7, #1]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d003      	beq.n	800071c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000714:	887a      	ldrh	r2, [r7, #2]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800071a:	e003      	b.n	8000724 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800071c:	887b      	ldrh	r3, [r7, #2]
 800071e:	041a      	lsls	r2, r3, #16
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	611a      	str	r2, [r3, #16]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
	...

08000730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f003 0301 	and.w	r3, r3, #1
 8000744:	2b00      	cmp	r3, #0
 8000746:	f000 8087 	beq.w	8000858 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800074a:	4b92      	ldr	r3, [pc, #584]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	f003 030c 	and.w	r3, r3, #12
 8000752:	2b04      	cmp	r3, #4
 8000754:	d00c      	beq.n	8000770 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000756:	4b8f      	ldr	r3, [pc, #572]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	f003 030c 	and.w	r3, r3, #12
 800075e:	2b08      	cmp	r3, #8
 8000760:	d112      	bne.n	8000788 <HAL_RCC_OscConfig+0x58>
 8000762:	4b8c      	ldr	r3, [pc, #560]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800076a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800076e:	d10b      	bne.n	8000788 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000770:	4b88      	ldr	r3, [pc, #544]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000778:	2b00      	cmp	r3, #0
 800077a:	d06c      	beq.n	8000856 <HAL_RCC_OscConfig+0x126>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d168      	bne.n	8000856 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000784:	2301      	movs	r3, #1
 8000786:	e22d      	b.n	8000be4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000790:	d106      	bne.n	80007a0 <HAL_RCC_OscConfig+0x70>
 8000792:	4b80      	ldr	r3, [pc, #512]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a7f      	ldr	r2, [pc, #508]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 8000798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	e02e      	b.n	80007fe <HAL_RCC_OscConfig+0xce>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d10c      	bne.n	80007c2 <HAL_RCC_OscConfig+0x92>
 80007a8:	4b7a      	ldr	r3, [pc, #488]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a79      	ldr	r2, [pc, #484]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 80007ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b77      	ldr	r3, [pc, #476]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a76      	ldr	r2, [pc, #472]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 80007ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	e01d      	b.n	80007fe <HAL_RCC_OscConfig+0xce>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007ca:	d10c      	bne.n	80007e6 <HAL_RCC_OscConfig+0xb6>
 80007cc:	4b71      	ldr	r3, [pc, #452]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a70      	ldr	r2, [pc, #448]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 80007d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b6e      	ldr	r3, [pc, #440]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a6d      	ldr	r2, [pc, #436]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 80007de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	e00b      	b.n	80007fe <HAL_RCC_OscConfig+0xce>
 80007e6:	4b6b      	ldr	r3, [pc, #428]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a6a      	ldr	r2, [pc, #424]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 80007ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007f0:	6013      	str	r3, [r2, #0]
 80007f2:	4b68      	ldr	r3, [pc, #416]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a67      	ldr	r2, [pc, #412]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 80007f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007fc:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d013      	beq.n	800082e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000806:	f7ff fcf9 	bl	80001fc <HAL_GetTick>
 800080a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800080c:	e008      	b.n	8000820 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800080e:	f7ff fcf5 	bl	80001fc <HAL_GetTick>
 8000812:	4602      	mov	r2, r0
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	2b64      	cmp	r3, #100	; 0x64
 800081a:	d901      	bls.n	8000820 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 800081c:	2303      	movs	r3, #3
 800081e:	e1e1      	b.n	8000be4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000820:	4b5c      	ldr	r3, [pc, #368]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0f0      	beq.n	800080e <HAL_RCC_OscConfig+0xde>
 800082c:	e014      	b.n	8000858 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800082e:	f7ff fce5 	bl	80001fc <HAL_GetTick>
 8000832:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000834:	e008      	b.n	8000848 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000836:	f7ff fce1 	bl	80001fc <HAL_GetTick>
 800083a:	4602      	mov	r2, r0
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	2b64      	cmp	r3, #100	; 0x64
 8000842:	d901      	bls.n	8000848 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000844:	2303      	movs	r3, #3
 8000846:	e1cd      	b.n	8000be4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000848:	4b52      	ldr	r3, [pc, #328]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1f0      	bne.n	8000836 <HAL_RCC_OscConfig+0x106>
 8000854:	e000      	b.n	8000858 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000856:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f003 0302 	and.w	r3, r3, #2
 8000860:	2b00      	cmp	r3, #0
 8000862:	d063      	beq.n	800092c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000864:	4b4b      	ldr	r3, [pc, #300]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	f003 030c 	and.w	r3, r3, #12
 800086c:	2b00      	cmp	r3, #0
 800086e:	d00b      	beq.n	8000888 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000870:	4b48      	ldr	r3, [pc, #288]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	f003 030c 	and.w	r3, r3, #12
 8000878:	2b08      	cmp	r3, #8
 800087a:	d11c      	bne.n	80008b6 <HAL_RCC_OscConfig+0x186>
 800087c:	4b45      	ldr	r3, [pc, #276]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000884:	2b00      	cmp	r3, #0
 8000886:	d116      	bne.n	80008b6 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000888:	4b42      	ldr	r3, [pc, #264]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f003 0302 	and.w	r3, r3, #2
 8000890:	2b00      	cmp	r3, #0
 8000892:	d005      	beq.n	80008a0 <HAL_RCC_OscConfig+0x170>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	691b      	ldr	r3, [r3, #16]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d001      	beq.n	80008a0 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800089c:	2301      	movs	r3, #1
 800089e:	e1a1      	b.n	8000be4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008a0:	4b3c      	ldr	r3, [pc, #240]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	4939      	ldr	r1, [pc, #228]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 80008b0:	4313      	orrs	r3, r2
 80008b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008b4:	e03a      	b.n	800092c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	691b      	ldr	r3, [r3, #16]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d020      	beq.n	8000900 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008be:	4b36      	ldr	r3, [pc, #216]	; (8000998 <HAL_RCC_OscConfig+0x268>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008c4:	f7ff fc9a 	bl	80001fc <HAL_GetTick>
 80008c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ca:	e008      	b.n	80008de <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008cc:	f7ff fc96 	bl	80001fc <HAL_GetTick>
 80008d0:	4602      	mov	r2, r0
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d901      	bls.n	80008de <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80008da:	2303      	movs	r3, #3
 80008dc:	e182      	b.n	8000be4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008de:	4b2d      	ldr	r3, [pc, #180]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d0f0      	beq.n	80008cc <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ea:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	4926      	ldr	r1, [pc, #152]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 80008fa:	4313      	orrs	r3, r2
 80008fc:	600b      	str	r3, [r1, #0]
 80008fe:	e015      	b.n	800092c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000900:	4b25      	ldr	r3, [pc, #148]	; (8000998 <HAL_RCC_OscConfig+0x268>)
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000906:	f7ff fc79 	bl	80001fc <HAL_GetTick>
 800090a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800090c:	e008      	b.n	8000920 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800090e:	f7ff fc75 	bl	80001fc <HAL_GetTick>
 8000912:	4602      	mov	r2, r0
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	2b02      	cmp	r3, #2
 800091a:	d901      	bls.n	8000920 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 800091c:	2303      	movs	r3, #3
 800091e:	e161      	b.n	8000be4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f003 0302 	and.w	r3, r3, #2
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1f0      	bne.n	800090e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f003 0308 	and.w	r3, r3, #8
 8000934:	2b00      	cmp	r3, #0
 8000936:	d039      	beq.n	80009ac <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d019      	beq.n	8000974 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_RCC_OscConfig+0x26c>)
 8000942:	2201      	movs	r2, #1
 8000944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000946:	f7ff fc59 	bl	80001fc <HAL_GetTick>
 800094a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800094c:	e008      	b.n	8000960 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800094e:	f7ff fc55 	bl	80001fc <HAL_GetTick>
 8000952:	4602      	mov	r2, r0
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	2b02      	cmp	r3, #2
 800095a:	d901      	bls.n	8000960 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 800095c:	2303      	movs	r3, #3
 800095e:	e141      	b.n	8000be4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_RCC_OscConfig+0x264>)
 8000962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000964:	f003 0302 	and.w	r3, r3, #2
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0f0      	beq.n	800094e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 800096c:	2001      	movs	r0, #1
 800096e:	f000 fab1 	bl	8000ed4 <RCC_Delay>
 8000972:	e01b      	b.n	80009ac <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_RCC_OscConfig+0x26c>)
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800097a:	f7ff fc3f 	bl	80001fc <HAL_GetTick>
 800097e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000980:	e00e      	b.n	80009a0 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000982:	f7ff fc3b 	bl	80001fc <HAL_GetTick>
 8000986:	4602      	mov	r2, r0
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	2b02      	cmp	r3, #2
 800098e:	d907      	bls.n	80009a0 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000990:	2303      	movs	r3, #3
 8000992:	e127      	b.n	8000be4 <HAL_RCC_OscConfig+0x4b4>
 8000994:	40021000 	.word	0x40021000
 8000998:	42420000 	.word	0x42420000
 800099c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009a0:	4b92      	ldr	r3, [pc, #584]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 80009a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1ea      	bne.n	8000982 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f003 0304 	and.w	r3, r3, #4
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	f000 80a6 	beq.w	8000b06 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009be:	4b8b      	ldr	r3, [pc, #556]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d10d      	bne.n	80009e6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b88      	ldr	r3, [pc, #544]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	4a87      	ldr	r2, [pc, #540]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	61d3      	str	r3, [r2, #28]
 80009d6:	4b85      	ldr	r3, [pc, #532]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80009e2:	2301      	movs	r3, #1
 80009e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009e6:	4b82      	ldr	r3, [pc, #520]	; (8000bf0 <HAL_RCC_OscConfig+0x4c0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d118      	bne.n	8000a24 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009f2:	4b7f      	ldr	r3, [pc, #508]	; (8000bf0 <HAL_RCC_OscConfig+0x4c0>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a7e      	ldr	r2, [pc, #504]	; (8000bf0 <HAL_RCC_OscConfig+0x4c0>)
 80009f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009fe:	f7ff fbfd 	bl	80001fc <HAL_GetTick>
 8000a02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a04:	e008      	b.n	8000a18 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a06:	f7ff fbf9 	bl	80001fc <HAL_GetTick>
 8000a0a:	4602      	mov	r2, r0
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	2b64      	cmp	r3, #100	; 0x64
 8000a12:	d901      	bls.n	8000a18 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000a14:	2303      	movs	r3, #3
 8000a16:	e0e5      	b.n	8000be4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a18:	4b75      	ldr	r3, [pc, #468]	; (8000bf0 <HAL_RCC_OscConfig+0x4c0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0f0      	beq.n	8000a06 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d106      	bne.n	8000a3a <HAL_RCC_OscConfig+0x30a>
 8000a2c:	4b6f      	ldr	r3, [pc, #444]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000a2e:	6a1b      	ldr	r3, [r3, #32]
 8000a30:	4a6e      	ldr	r2, [pc, #440]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6213      	str	r3, [r2, #32]
 8000a38:	e02d      	b.n	8000a96 <HAL_RCC_OscConfig+0x366>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d10c      	bne.n	8000a5c <HAL_RCC_OscConfig+0x32c>
 8000a42:	4b6a      	ldr	r3, [pc, #424]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000a44:	6a1b      	ldr	r3, [r3, #32]
 8000a46:	4a69      	ldr	r2, [pc, #420]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000a48:	f023 0301 	bic.w	r3, r3, #1
 8000a4c:	6213      	str	r3, [r2, #32]
 8000a4e:	4b67      	ldr	r3, [pc, #412]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000a50:	6a1b      	ldr	r3, [r3, #32]
 8000a52:	4a66      	ldr	r2, [pc, #408]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000a54:	f023 0304 	bic.w	r3, r3, #4
 8000a58:	6213      	str	r3, [r2, #32]
 8000a5a:	e01c      	b.n	8000a96 <HAL_RCC_OscConfig+0x366>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	2b05      	cmp	r3, #5
 8000a62:	d10c      	bne.n	8000a7e <HAL_RCC_OscConfig+0x34e>
 8000a64:	4b61      	ldr	r3, [pc, #388]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000a66:	6a1b      	ldr	r3, [r3, #32]
 8000a68:	4a60      	ldr	r2, [pc, #384]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000a6a:	f043 0304 	orr.w	r3, r3, #4
 8000a6e:	6213      	str	r3, [r2, #32]
 8000a70:	4b5e      	ldr	r3, [pc, #376]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000a72:	6a1b      	ldr	r3, [r3, #32]
 8000a74:	4a5d      	ldr	r2, [pc, #372]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6213      	str	r3, [r2, #32]
 8000a7c:	e00b      	b.n	8000a96 <HAL_RCC_OscConfig+0x366>
 8000a7e:	4b5b      	ldr	r3, [pc, #364]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000a80:	6a1b      	ldr	r3, [r3, #32]
 8000a82:	4a5a      	ldr	r2, [pc, #360]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000a84:	f023 0301 	bic.w	r3, r3, #1
 8000a88:	6213      	str	r3, [r2, #32]
 8000a8a:	4b58      	ldr	r3, [pc, #352]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000a8c:	6a1b      	ldr	r3, [r3, #32]
 8000a8e:	4a57      	ldr	r2, [pc, #348]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000a90:	f023 0304 	bic.w	r3, r3, #4
 8000a94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d015      	beq.n	8000aca <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a9e:	f7ff fbad 	bl	80001fc <HAL_GetTick>
 8000aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aa4:	e00a      	b.n	8000abc <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aa6:	f7ff fba9 	bl	80001fc <HAL_GetTick>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d901      	bls.n	8000abc <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	e093      	b.n	8000be4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000abc:	4b4b      	ldr	r3, [pc, #300]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000abe:	6a1b      	ldr	r3, [r3, #32]
 8000ac0:	f003 0302 	and.w	r3, r3, #2
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d0ee      	beq.n	8000aa6 <HAL_RCC_OscConfig+0x376>
 8000ac8:	e014      	b.n	8000af4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aca:	f7ff fb97 	bl	80001fc <HAL_GetTick>
 8000ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ad0:	e00a      	b.n	8000ae8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad2:	f7ff fb93 	bl	80001fc <HAL_GetTick>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d901      	bls.n	8000ae8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	e07d      	b.n	8000be4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ae8:	4b40      	ldr	r3, [pc, #256]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000aea:	6a1b      	ldr	r3, [r3, #32]
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1ee      	bne.n	8000ad2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000af4:	7dfb      	ldrb	r3, [r7, #23]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d105      	bne.n	8000b06 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000afa:	4b3c      	ldr	r3, [pc, #240]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	4a3b      	ldr	r2, [pc, #236]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d069      	beq.n	8000be2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b0e:	4b37      	ldr	r3, [pc, #220]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 030c 	and.w	r3, r3, #12
 8000b16:	2b08      	cmp	r3, #8
 8000b18:	d061      	beq.n	8000bde <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d146      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b22:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <HAL_RCC_OscConfig+0x4c4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b28:	f7ff fb68 	bl	80001fc <HAL_GetTick>
 8000b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b2e:	e008      	b.n	8000b42 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b30:	f7ff fb64 	bl	80001fc <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d901      	bls.n	8000b42 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e050      	b.n	8000be4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b42:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f0      	bne.n	8000b30 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a1b      	ldr	r3, [r3, #32]
 8000b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b56:	d108      	bne.n	8000b6a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b58:	4b24      	ldr	r3, [pc, #144]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	4921      	ldr	r1, [pc, #132]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000b66:	4313      	orrs	r3, r2
 8000b68:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6a19      	ldr	r1, [r3, #32]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7a:	430b      	orrs	r3, r1
 8000b7c:	491b      	ldr	r1, [pc, #108]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b82:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <HAL_RCC_OscConfig+0x4c4>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b88:	f7ff fb38 	bl	80001fc <HAL_GetTick>
 8000b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b8e:	e008      	b.n	8000ba2 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b90:	f7ff fb34 	bl	80001fc <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d901      	bls.n	8000ba2 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e020      	b.n	8000be4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0f0      	beq.n	8000b90 <HAL_RCC_OscConfig+0x460>
 8000bae:	e018      	b.n	8000be2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_RCC_OscConfig+0x4c4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb6:	f7ff fb21 	bl	80001fc <HAL_GetTick>
 8000bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bbc:	e008      	b.n	8000bd0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bbe:	f7ff fb1d 	bl	80001fc <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d901      	bls.n	8000bd0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	e009      	b.n	8000be4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_RCC_OscConfig+0x4bc>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1f0      	bne.n	8000bbe <HAL_RCC_OscConfig+0x48e>
 8000bdc:	e001      	b.n	8000be2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e000      	b.n	8000be4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40007000 	.word	0x40007000
 8000bf4:	42420060 	.word	0x42420060

08000bf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c06:	4b7e      	ldr	r3, [pc, #504]	; (8000e00 <HAL_RCC_ClockConfig+0x208>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	683a      	ldr	r2, [r7, #0]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d910      	bls.n	8000c36 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c14:	4b7a      	ldr	r3, [pc, #488]	; (8000e00 <HAL_RCC_ClockConfig+0x208>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f023 0207 	bic.w	r2, r3, #7
 8000c1c:	4978      	ldr	r1, [pc, #480]	; (8000e00 <HAL_RCC_ClockConfig+0x208>)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c24:	4b76      	ldr	r3, [pc, #472]	; (8000e00 <HAL_RCC_ClockConfig+0x208>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 0307 	and.w	r3, r3, #7
 8000c2c:	683a      	ldr	r2, [r7, #0]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d001      	beq.n	8000c36 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e0e0      	b.n	8000df8 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d020      	beq.n	8000c84 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d005      	beq.n	8000c5a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c4e:	4b6d      	ldr	r3, [pc, #436]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	4a6c      	ldr	r2, [pc, #432]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000c54:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c58:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d005      	beq.n	8000c72 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c66:	4b67      	ldr	r3, [pc, #412]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	4a66      	ldr	r2, [pc, #408]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000c6c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000c70:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c72:	4b64      	ldr	r3, [pc, #400]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	4961      	ldr	r1, [pc, #388]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000c80:	4313      	orrs	r3, r2
 8000c82:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d06a      	beq.n	8000d66 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d107      	bne.n	8000ca8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c98:	4b5a      	ldr	r3, [pc, #360]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d115      	bne.n	8000cd0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e0a7      	b.n	8000df8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d107      	bne.n	8000cc0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cb0:	4b54      	ldr	r3, [pc, #336]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d109      	bne.n	8000cd0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e09b      	b.n	8000df8 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc0:	4b50      	ldr	r3, [pc, #320]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d101      	bne.n	8000cd0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e093      	b.n	8000df8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cd0:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f023 0203 	bic.w	r2, r3, #3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	4949      	ldr	r1, [pc, #292]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ce2:	f7ff fa8b 	bl	80001fc <HAL_GetTick>
 8000ce6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d112      	bne.n	8000d16 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cf0:	e00a      	b.n	8000d08 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cf2:	f7ff fa83 	bl	80001fc <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d901      	bls.n	8000d08 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000d04:	2303      	movs	r3, #3
 8000d06:	e077      	b.n	8000df8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d08:	4b3e      	ldr	r3, [pc, #248]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 030c 	and.w	r3, r3, #12
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d1ee      	bne.n	8000cf2 <HAL_RCC_ClockConfig+0xfa>
 8000d14:	e027      	b.n	8000d66 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d11d      	bne.n	8000d5a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d1e:	e00a      	b.n	8000d36 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d20:	f7ff fa6c 	bl	80001fc <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e060      	b.n	8000df8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d36:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 030c 	and.w	r3, r3, #12
 8000d3e:	2b08      	cmp	r3, #8
 8000d40:	d1ee      	bne.n	8000d20 <HAL_RCC_ClockConfig+0x128>
 8000d42:	e010      	b.n	8000d66 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d44:	f7ff fa5a 	bl	80001fc <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d901      	bls.n	8000d5a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e04e      	b.n	8000df8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 030c 	and.w	r3, r3, #12
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1ee      	bne.n	8000d44 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d66:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <HAL_RCC_ClockConfig+0x208>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d210      	bcs.n	8000d96 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d74:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <HAL_RCC_ClockConfig+0x208>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f023 0207 	bic.w	r2, r3, #7
 8000d7c:	4920      	ldr	r1, [pc, #128]	; (8000e00 <HAL_RCC_ClockConfig+0x208>)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <HAL_RCC_ClockConfig+0x208>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d001      	beq.n	8000d96 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e030      	b.n	8000df8 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d008      	beq.n	8000db4 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	4915      	ldr	r1, [pc, #84]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000db0:	4313      	orrs	r3, r2
 8000db2:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0308 	and.w	r3, r3, #8
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d009      	beq.n	8000dd4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	490d      	ldr	r1, [pc, #52]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000dd4:	f000 f81c 	bl	8000e10 <HAL_RCC_GetSysClockFreq>
 8000dd8:	4601      	mov	r1, r0
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_RCC_ClockConfig+0x20c>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	091b      	lsrs	r3, r3, #4
 8000de0:	f003 030f 	and.w	r3, r3, #15
 8000de4:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <HAL_RCC_ClockConfig+0x210>)
 8000de6:	5cd3      	ldrb	r3, [r2, r3]
 8000de8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_RCC_ClockConfig+0x214>)
 8000dee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff f9c1 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40022000 	.word	0x40022000
 8000e04:	40021000 	.word	0x40021000
 8000e08:	08001b38 	.word	0x08001b38
 8000e0c:	20000008 	.word	0x20000008

08000e10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e10:	b490      	push	{r4, r7}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e16:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e18:	1d3c      	adds	r4, r7, #4
 8000e1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e3a:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f003 030c 	and.w	r3, r3, #12
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	d002      	beq.n	8000e50 <HAL_RCC_GetSysClockFreq+0x40>
 8000e4a:	2b08      	cmp	r3, #8
 8000e4c:	d003      	beq.n	8000e56 <HAL_RCC_GetSysClockFreq+0x46>
 8000e4e:	e02d      	b.n	8000eac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e52:	623b      	str	r3, [r7, #32]
      break;
 8000e54:	e02d      	b.n	8000eb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	0c9b      	lsrs	r3, r3, #18
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e62:	4413      	add	r3, r2
 8000e64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e68:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d013      	beq.n	8000e9c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	0c5b      	lsrs	r3, r3, #17
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e82:	4413      	add	r3, r2
 8000e84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e88:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e8e:	fb02 f203 	mul.w	r2, r2, r3
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
 8000e9a:	e004      	b.n	8000ea6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000ea0:	fb02 f303 	mul.w	r3, r2, r3
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	623b      	str	r3, [r7, #32]
      break;
 8000eaa:	e002      	b.n	8000eb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <HAL_RCC_GetSysClockFreq+0xbc>)
 8000eae:	623b      	str	r3, [r7, #32]
      break;
 8000eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000eb2:	6a3b      	ldr	r3, [r7, #32]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc90      	pop	{r4, r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	08001b24 	.word	0x08001b24
 8000ec4:	08001b34 	.word	0x08001b34
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	007a1200 	.word	0x007a1200
 8000ed0:	003d0900 	.word	0x003d0900

08000ed4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <RCC_Delay+0x34>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <RCC_Delay+0x38>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	0a5b      	lsrs	r3, r3, #9
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000ef0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	1e5a      	subs	r2, r3, #1
 8000ef6:	60fa      	str	r2, [r7, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f9      	bne.n	8000ef0 <RCC_Delay+0x1c>
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	10624dd3 	.word	0x10624dd3

08000f10 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e01d      	b.n	8000f5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d106      	bne.n	8000f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 fd08 	bl	800194c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2202      	movs	r2, #2
 8000f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4610      	mov	r0, r2
 8000f50:	f000 fa2a 	bl	80013a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f042 0201 	orr.w	r2, r2, #1
 8000f7c:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f042 0201 	orr.w	r2, r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d122      	bne.n	8000ff6 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d11b      	bne.n	8000ff6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f06f 0202 	mvn.w	r2, #2
 8000fc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f9c8 	bl	8001372 <HAL_TIM_IC_CaptureCallback>
 8000fe2:	e005      	b.n	8000ff0 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f9bb 	bl	8001360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f9ca 	bl	8001384 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	2b04      	cmp	r3, #4
 8001002:	d122      	bne.n	800104a <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	2b04      	cmp	r3, #4
 8001010:	d11b      	bne.n	800104a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f06f 0204 	mvn.w	r2, #4
 800101a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2202      	movs	r2, #2
 8001020:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f99e 	bl	8001372 <HAL_TIM_IC_CaptureCallback>
 8001036:	e005      	b.n	8001044 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f991 	bl	8001360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 f9a0 	bl	8001384 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	2b08      	cmp	r3, #8
 8001056:	d122      	bne.n	800109e <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	f003 0308 	and.w	r3, r3, #8
 8001062:	2b08      	cmp	r3, #8
 8001064:	d11b      	bne.n	800109e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f06f 0208 	mvn.w	r2, #8
 800106e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2204      	movs	r2, #4
 8001074:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f974 	bl	8001372 <HAL_TIM_IC_CaptureCallback>
 800108a:	e005      	b.n	8001098 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 f967 	bl	8001360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f976 	bl	8001384 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	f003 0310 	and.w	r3, r3, #16
 80010a8:	2b10      	cmp	r3, #16
 80010aa:	d122      	bne.n	80010f2 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	2b10      	cmp	r3, #16
 80010b8:	d11b      	bne.n	80010f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f06f 0210 	mvn.w	r2, #16
 80010c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2208      	movs	r2, #8
 80010c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f94a 	bl	8001372 <HAL_TIM_IC_CaptureCallback>
 80010de:	e005      	b.n	80010ec <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f93d 	bl	8001360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f94c 	bl	8001384 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d10e      	bne.n	800111e <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b01      	cmp	r3, #1
 800110c:	d107      	bne.n	800111e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f06f 0201 	mvn.w	r2, #1
 8001116:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 fb75 	bl	8001808 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001128:	2b80      	cmp	r3, #128	; 0x80
 800112a:	d10e      	bne.n	800114a <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001136:	2b80      	cmp	r3, #128	; 0x80
 8001138:	d107      	bne.n	800114a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001142:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 fa7d 	bl	8001644 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001154:	2b40      	cmp	r3, #64	; 0x40
 8001156:	d10e      	bne.n	8001176 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001162:	2b40      	cmp	r3, #64	; 0x40
 8001164:	d107      	bne.n	8001176 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800116e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f910 	bl	8001396 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	f003 0320 	and.w	r3, r3, #32
 8001180:	2b20      	cmp	r3, #32
 8001182:	d10e      	bne.n	80011a2 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	f003 0320 	and.w	r3, r3, #32
 800118e:	2b20      	cmp	r3, #32
 8001190:	d107      	bne.n	80011a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f06f 0220 	mvn.w	r2, #32
 800119a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 fa48 	bl	8001632 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <HAL_TIM_ConfigClockSource+0x1c>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e0c8      	b.n	8001358 <HAL_TIM_ConfigClockSource+0x1ae>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2202      	movs	r2, #2
 80011d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80011e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80011ec:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b40      	cmp	r3, #64	; 0x40
 80011fc:	d077      	beq.n	80012ee <HAL_TIM_ConfigClockSource+0x144>
 80011fe:	2b40      	cmp	r3, #64	; 0x40
 8001200:	d80e      	bhi.n	8001220 <HAL_TIM_ConfigClockSource+0x76>
 8001202:	2b10      	cmp	r3, #16
 8001204:	f000 808a 	beq.w	800131c <HAL_TIM_ConfigClockSource+0x172>
 8001208:	2b10      	cmp	r3, #16
 800120a:	d802      	bhi.n	8001212 <HAL_TIM_ConfigClockSource+0x68>
 800120c:	2b00      	cmp	r3, #0
 800120e:	d07e      	beq.n	800130e <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001210:	e099      	b.n	8001346 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001212:	2b20      	cmp	r3, #32
 8001214:	f000 8089 	beq.w	800132a <HAL_TIM_ConfigClockSource+0x180>
 8001218:	2b30      	cmp	r3, #48	; 0x30
 800121a:	f000 808d 	beq.w	8001338 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 800121e:	e092      	b.n	8001346 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001220:	2b70      	cmp	r3, #112	; 0x70
 8001222:	d016      	beq.n	8001252 <HAL_TIM_ConfigClockSource+0xa8>
 8001224:	2b70      	cmp	r3, #112	; 0x70
 8001226:	d804      	bhi.n	8001232 <HAL_TIM_ConfigClockSource+0x88>
 8001228:	2b50      	cmp	r3, #80	; 0x50
 800122a:	d040      	beq.n	80012ae <HAL_TIM_ConfigClockSource+0x104>
 800122c:	2b60      	cmp	r3, #96	; 0x60
 800122e:	d04e      	beq.n	80012ce <HAL_TIM_ConfigClockSource+0x124>
    break;
 8001230:	e089      	b.n	8001346 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001236:	d003      	beq.n	8001240 <HAL_TIM_ConfigClockSource+0x96>
 8001238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800123c:	d024      	beq.n	8001288 <HAL_TIM_ConfigClockSource+0xde>
    break;
 800123e:	e082      	b.n	8001346 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0207 	bic.w	r2, r2, #7
 800124e:	609a      	str	r2, [r3, #8]
    break;
 8001250:	e079      	b.n	8001346 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	6899      	ldr	r1, [r3, #8]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	f000 f981 	bl	8001568 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001274:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800127c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	609a      	str	r2, [r3, #8]
    break;
 8001286:	e05e      	b.n	8001346 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	6899      	ldr	r1, [r3, #8]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f000 f966 	bl	8001568 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012aa:	609a      	str	r2, [r3, #8]
    break;
 80012ac:	e04b      	b.n	8001346 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	6859      	ldr	r1, [r3, #4]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	461a      	mov	r2, r3
 80012bc:	f000 f8d0 	bl	8001460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2150      	movs	r1, #80	; 0x50
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f92f 	bl	800152a <TIM_ITRx_SetConfig>
    break;
 80012cc:	e03b      	b.n	8001346 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	6859      	ldr	r1, [r3, #4]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	461a      	mov	r2, r3
 80012dc:	f000 f8f2 	bl	80014c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2160      	movs	r1, #96	; 0x60
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f91f 	bl	800152a <TIM_ITRx_SetConfig>
    break;
 80012ec:	e02b      	b.n	8001346 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	6859      	ldr	r1, [r3, #4]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	461a      	mov	r2, r3
 80012fc:	f000 f8b0 	bl	8001460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2140      	movs	r1, #64	; 0x40
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f90f 	bl	800152a <TIM_ITRx_SetConfig>
    break;
 800130c:	e01b      	b.n	8001346 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f908 	bl	800152a <TIM_ITRx_SetConfig>
    break;
 800131a:	e014      	b.n	8001346 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2110      	movs	r1, #16
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f901 	bl	800152a <TIM_ITRx_SetConfig>
    break;
 8001328:	e00d      	b.n	8001346 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2120      	movs	r1, #32
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f8fa 	bl	800152a <TIM_ITRx_SetConfig>
    break;
 8001336:	e006      	b.n	8001346 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2130      	movs	r1, #48	; 0x30
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f8f3 	bl	800152a <TIM_ITRx_SetConfig>
    break;
 8001344:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a26      	ldr	r2, [pc, #152]	; (8001458 <TIM_Base_SetConfig+0xb0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d007      	beq.n	80013d4 <TIM_Base_SetConfig+0x2c>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013ca:	d003      	beq.n	80013d4 <TIM_Base_SetConfig+0x2c>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a23      	ldr	r2, [pc, #140]	; (800145c <TIM_Base_SetConfig+0xb4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d108      	bne.n	80013e6 <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <TIM_Base_SetConfig+0xb0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d007      	beq.n	80013fe <TIM_Base_SetConfig+0x56>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f4:	d003      	beq.n	80013fe <TIM_Base_SetConfig+0x56>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a18      	ldr	r2, [pc, #96]	; (800145c <TIM_Base_SetConfig+0xb4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d108      	bne.n	8001410 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001416:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a07      	ldr	r2, [pc, #28]	; (8001458 <TIM_Base_SetConfig+0xb0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d103      	bne.n	8001448 <TIM_Base_SetConfig+0xa0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	615a      	str	r2, [r3, #20]
}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40012c00 	.word	0x40012c00
 800145c:	40000400 	.word	0x40000400

08001460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001460:	b480      	push	{r7}
 8001462:	b087      	sub	sp, #28
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	f023 0201 	bic.w	r2, r3, #1
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001492:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	4313      	orrs	r3, r2
 800149c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	f023 030a 	bic.w	r3, r3, #10
 80014a4:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	621a      	str	r2, [r3, #32]
}
 80014ba:	bf00      	nop
 80014bc:	371c      	adds	r7, #28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b087      	sub	sp, #28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	f023 0210 	bic.w	r2, r3, #16
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80014f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	031b      	lsls	r3, r3, #12
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	4313      	orrs	r3, r2
 8001500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001508:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	621a      	str	r2, [r3, #32]
}
 8001520:	bf00      	nop
 8001522:	371c      	adds	r7, #28
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800152a:	b480      	push	{r7}
 800152c:	b085      	sub	sp, #20
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	460b      	mov	r3, r1
 8001534:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001546:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	f043 0307 	orr.w	r3, r3, #7
 800154e:	b29b      	uxth	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	609a      	str	r2, [r3, #8]
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001568:	b480      	push	{r7}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	021a      	lsls	r2, r3, #8
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	431a      	orrs	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4313      	orrs	r3, r2
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	4313      	orrs	r3, r2
 8001598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	609a      	str	r2, [r3, #8]
}
 80015a0:	bf00      	nop
 80015a2:	371c      	adds	r7, #28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80015be:	2302      	movs	r3, #2
 80015c0:	e032      	b.n	8001628 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2202      	movs	r2, #2
 80015ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015e0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001602:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6899      	ldr	r1, [r3, #8]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
	...

08001658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800165c:	f7fe fd76 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001660:	f000 f80a 	bl	8001678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001664:	f000 f892 	bl	800178c <MX_GPIO_Init>
  MX_TIM3_Init();
 8001668:	f000 f842 	bl	80016f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800166c:	4801      	ldr	r0, [pc, #4]	; (8001674 <main+0x1c>)
 800166e:	f7ff fc7a 	bl	8000f66 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001672:	e7fe      	b.n	8001672 <main+0x1a>
 8001674:	20000030 	.word	0x20000030

08001678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b090      	sub	sp, #64	; 0x40
 800167c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 0318 	add.w	r3, r7, #24
 8001682:	2228      	movs	r2, #40	; 0x28
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f000 fa38 	bl	8001afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800169e:	2301      	movs	r3, #1
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016a2:	2310      	movs	r3, #16
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016aa:	f107 0318 	add.w	r3, r7, #24
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff f83e 	bl	8000730 <HAL_RCC_OscConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80016ba:	f000 f90f 	bl	80018dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016be:	230f      	movs	r3, #15
 80016c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fa8e 	bl	8000bf8 <HAL_RCC_ClockConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80016e2:	f000 f8fb 	bl	80018dc <Error_Handler>
  }
}
 80016e6:	bf00      	nop
 80016e8:	3740      	adds	r7, #64	; 0x40
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001704:	463b      	mov	r3, r7
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <MX_TIM3_Init+0x94>)
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <MX_TIM3_Init+0x98>)
 8001710:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 249;
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <MX_TIM3_Init+0x94>)
 8001714:	22f9      	movs	r2, #249	; 0xf9
 8001716:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_TIM3_Init+0x94>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 799;
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <MX_TIM3_Init+0x94>)
 8001720:	f240 321f 	movw	r2, #799	; 0x31f
 8001724:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_TIM3_Init+0x94>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <MX_TIM3_Init+0x94>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001732:	4814      	ldr	r0, [pc, #80]	; (8001784 <MX_TIM3_Init+0x94>)
 8001734:	f7ff fbec 	bl	8000f10 <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800173e:	f000 f8cd 	bl	80018dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	4619      	mov	r1, r3
 800174e:	480d      	ldr	r0, [pc, #52]	; (8001784 <MX_TIM3_Init+0x94>)
 8001750:	f7ff fd2b 	bl	80011aa <HAL_TIM_ConfigClockSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800175a:	f000 f8bf 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001766:	463b      	mov	r3, r7
 8001768:	4619      	mov	r1, r3
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <MX_TIM3_Init+0x94>)
 800176c:	f7ff ff1d 	bl	80015aa <HAL_TIMEx_MasterConfigSynchronization>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001776:	f000 f8b1 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000030 	.word	0x20000030
 8001788:	40000400 	.word	0x40000400

0800178c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <MX_GPIO_Init+0x74>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a16      	ldr	r2, [pc, #88]	; (8001800 <MX_GPIO_Init+0x74>)
 80017a6:	f043 0310 	orr.w	r3, r3, #16
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <MX_GPIO_Init+0x74>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 80017b8:	2201      	movs	r2, #1
 80017ba:	2103      	movs	r1, #3
 80017bc:	4811      	ldr	r0, [pc, #68]	; (8001804 <MX_GPIO_Init+0x78>)
 80017be:	f7fe ff9e 	bl	80006fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017c2:	2303      	movs	r3, #3
 80017c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2302      	movs	r3, #2
 80017d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	4619      	mov	r1, r3
 80017d8:	480a      	ldr	r0, [pc, #40]	; (8001804 <MX_GPIO_Init+0x78>)
 80017da:	f7fe fe23 	bl	8000424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017de:	230c      	movs	r3, #12
 80017e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	4619      	mov	r1, r3
 80017f0:	4804      	ldr	r0, [pc, #16]	; (8001804 <MX_GPIO_Init+0x78>)
 80017f2:	f7fe fe17 	bl	8000424 <HAL_GPIO_Init>

}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40021000 	.word	0x40021000
 8001804:	40011000 	.word	0x40011000

08001808 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	static uint16_t count1=0,count2=0;
	if(htim==&htim3)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a2e      	ldr	r2, [pc, #184]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d155      	bne.n	80018c4 <HAL_TIM_PeriodElapsedCallback+0xbc>
	{
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)==GPIO_PIN_RESET)
 8001818:	2104      	movs	r1, #4
 800181a:	482d      	ldr	r0, [pc, #180]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800181c:	f7fe ff58 	bl	80006d0 <HAL_GPIO_ReadPin>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d105      	bne.n	8001832 <HAL_TIM_PeriodElapsedCallback+0x2a>
		{
			count1++;
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	4b29      	ldr	r3, [pc, #164]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001830:	801a      	strh	r2, [r3, #0]
		{
			count1=0;
		}
		*/

		if(count1>=40)
 8001832:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	2b27      	cmp	r3, #39	; 0x27
 8001838:	d905      	bls.n	8001846 <HAL_TIM_PeriodElapsedCallback+0x3e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	2102      	movs	r1, #2
 800183e:	4824      	ldr	r0, [pc, #144]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001840:	f7fe ff5d 	bl	80006fe <HAL_GPIO_WritePin>
 8001844:	e013      	b.n	800186e <HAL_TIM_PeriodElapsedCallback+0x66>
		}
		else if(count1>1 && count1<40 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)==GPIO_PIN_SET)
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d90f      	bls.n	800186e <HAL_TIM_PeriodElapsedCallback+0x66>
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	2b27      	cmp	r3, #39	; 0x27
 8001854:	d80b      	bhi.n	800186e <HAL_TIM_PeriodElapsedCallback+0x66>
 8001856:	2104      	movs	r1, #4
 8001858:	481d      	ldr	r0, [pc, #116]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800185a:	f7fe ff39 	bl	80006d0 <HAL_GPIO_ReadPin>
 800185e:	4603      	mov	r3, r0
 8001860:	2b01      	cmp	r3, #1
 8001862:	d104      	bne.n	800186e <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	4819      	ldr	r0, [pc, #100]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800186a:	f7fe ff48 	bl	80006fe <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)==GPIO_PIN_SET)
 800186e:	2104      	movs	r1, #4
 8001870:	4817      	ldr	r0, [pc, #92]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001872:	f7fe ff2d 	bl	80006d0 <HAL_GPIO_ReadPin>
 8001876:	4603      	mov	r3, r0
 8001878:	2b01      	cmp	r3, #1
 800187a:	d102      	bne.n	8001882 <HAL_TIM_PeriodElapsedCallback+0x7a>
		{
			//if(count1>0)count1--;
			count1=0;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800187e:	2200      	movs	r2, #0
 8001880:	801a      	strh	r2, [r3, #0]
		}
		//

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)==0)
 8001882:	2108      	movs	r1, #8
 8001884:	4812      	ldr	r0, [pc, #72]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001886:	f7fe ff23 	bl	80006d0 <HAL_GPIO_ReadPin>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d106      	bne.n	800189e <HAL_TIM_PeriodElapsedCallback+0x96>
		{
			count2++;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	b29a      	uxth	r2, r3
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800189a:	801a      	strh	r2, [r3, #0]
 800189c:	e009      	b.n	80018b2 <HAL_TIM_PeriodElapsedCallback+0xaa>
		}
		else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)==1)
 800189e:	2108      	movs	r1, #8
 80018a0:	480b      	ldr	r0, [pc, #44]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80018a2:	f7fe ff15 	bl	80006d0 <HAL_GPIO_ReadPin>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d102      	bne.n	80018b2 <HAL_TIM_PeriodElapsedCallback+0xaa>
		{
			count2=0;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	801a      	strh	r2, [r3, #0]
		}
		if(count2>1)
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d904      	bls.n	80018c4 <HAL_TIM_PeriodElapsedCallback+0xbc>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1,GPIO_PIN_SET);
 80018ba:	2201      	movs	r2, #1
 80018bc:	2103      	movs	r1, #3
 80018be:	4804      	ldr	r0, [pc, #16]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80018c0:	f7fe ff1d 	bl	80006fe <HAL_GPIO_WritePin>
			//count1=0;
		}
	}
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000030 	.word	0x20000030
 80018d0:	40011000 	.word	0x40011000
 80018d4:	20000028 	.word	0x20000028
 80018d8:	2000002a 	.word	0x2000002a

080018dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_MspInit+0x5c>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	4a14      	ldr	r2, [pc, #80]	; (8001944 <HAL_MspInit+0x5c>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6193      	str	r3, [r2, #24]
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_MspInit+0x5c>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_MspInit+0x5c>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <HAL_MspInit+0x5c>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001910:	61d3      	str	r3, [r2, #28]
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_MspInit+0x5c>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_MspInit+0x60>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_MspInit+0x60>)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	40021000 	.word	0x40021000
 8001948:	40010000 	.word	0x40010000

0800194c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <HAL_TIM_Base_MspInit+0x44>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d113      	bne.n	8001986 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_TIM_Base_MspInit+0x48>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <HAL_TIM_Base_MspInit+0x48>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	61d3      	str	r3, [r2, #28]
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_TIM_Base_MspInit+0x48>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	201d      	movs	r0, #29
 800197c:	f7fe fd1b 	bl	80003b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001980:	201d      	movs	r0, #29
 8001982:	f7fe fd34 	bl	80003ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40000400 	.word	0x40000400
 8001994:	40021000 	.word	0x40021000

08001998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <HardFault_Handler+0x4>

080019aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <MemManage_Handler+0x4>

080019b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <BusFault_Handler+0x4>

080019b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <UsageFault_Handler+0x4>

080019bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e4:	f7fe fbf8 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}

080019ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <TIM3_IRQHandler+0x10>)
 80019f2:	f7ff fad2 	bl	8000f9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000030 	.word	0x20000030

08001a00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <SystemInit+0x5c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <SystemInit+0x5c>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <SystemInit+0x5c>)
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	4911      	ldr	r1, [pc, #68]	; (8001a5c <SystemInit+0x5c>)
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <SystemInit+0x60>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <SystemInit+0x5c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <SystemInit+0x5c>)
 8001a22:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <SystemInit+0x5c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <SystemInit+0x5c>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a36:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <SystemInit+0x5c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <SystemInit+0x5c>)
 8001a3e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001a42:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <SystemInit+0x5c>)
 8001a46:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001a4a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SystemInit+0x64>)
 8001a4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a52:	609a      	str	r2, [r3, #8]
#endif 
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	f8ff0000 	.word	0xf8ff0000
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a68:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a6a:	e003      	b.n	8001a74 <LoopCopyDataInit>

08001a6c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a6e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a70:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a72:	3104      	adds	r1, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a74:	480a      	ldr	r0, [pc, #40]	; (8001aa0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a78:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a7a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a7c:	d3f6      	bcc.n	8001a6c <CopyDataInit>
  ldr r2, =_sbss
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a80:	e002      	b.n	8001a88 <LoopFillZerobss>

08001a82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a84:	f842 3b04 	str.w	r3, [r2], #4

08001a88 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a8a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a8c:	d3f9      	bcc.n	8001a82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a8e:	f7ff ffb7 	bl	8001a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a92:	f000 f80f 	bl	8001ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a96:	f7ff fddf 	bl	8001658 <main>
  bx lr
 8001a9a:	4770      	bx	lr
  ldr r3, =_sidata
 8001a9c:	08001b50 	.word	0x08001b50
  ldr r0, =_sdata
 8001aa0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001aa4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001aa8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001aac:	20000070 	.word	0x20000070

08001ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC1_2_IRQHandler>
	...

08001ab4 <__libc_init_array>:
 8001ab4:	b570      	push	{r4, r5, r6, lr}
 8001ab6:	2500      	movs	r5, #0
 8001ab8:	4e0c      	ldr	r6, [pc, #48]	; (8001aec <__libc_init_array+0x38>)
 8001aba:	4c0d      	ldr	r4, [pc, #52]	; (8001af0 <__libc_init_array+0x3c>)
 8001abc:	1ba4      	subs	r4, r4, r6
 8001abe:	10a4      	asrs	r4, r4, #2
 8001ac0:	42a5      	cmp	r5, r4
 8001ac2:	d109      	bne.n	8001ad8 <__libc_init_array+0x24>
 8001ac4:	f000 f822 	bl	8001b0c <_init>
 8001ac8:	2500      	movs	r5, #0
 8001aca:	4e0a      	ldr	r6, [pc, #40]	; (8001af4 <__libc_init_array+0x40>)
 8001acc:	4c0a      	ldr	r4, [pc, #40]	; (8001af8 <__libc_init_array+0x44>)
 8001ace:	1ba4      	subs	r4, r4, r6
 8001ad0:	10a4      	asrs	r4, r4, #2
 8001ad2:	42a5      	cmp	r5, r4
 8001ad4:	d105      	bne.n	8001ae2 <__libc_init_array+0x2e>
 8001ad6:	bd70      	pop	{r4, r5, r6, pc}
 8001ad8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001adc:	4798      	blx	r3
 8001ade:	3501      	adds	r5, #1
 8001ae0:	e7ee      	b.n	8001ac0 <__libc_init_array+0xc>
 8001ae2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ae6:	4798      	blx	r3
 8001ae8:	3501      	adds	r5, #1
 8001aea:	e7f2      	b.n	8001ad2 <__libc_init_array+0x1e>
 8001aec:	08001b48 	.word	0x08001b48
 8001af0:	08001b48 	.word	0x08001b48
 8001af4:	08001b48 	.word	0x08001b48
 8001af8:	08001b4c 	.word	0x08001b4c

08001afc <memset>:
 8001afc:	4603      	mov	r3, r0
 8001afe:	4402      	add	r2, r0
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d100      	bne.n	8001b06 <memset+0xa>
 8001b04:	4770      	bx	lr
 8001b06:	f803 1b01 	strb.w	r1, [r3], #1
 8001b0a:	e7f9      	b.n	8001b00 <memset+0x4>

08001b0c <_init>:
 8001b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0e:	bf00      	nop
 8001b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b12:	bc08      	pop	{r3}
 8001b14:	469e      	mov	lr, r3
 8001b16:	4770      	bx	lr

08001b18 <_fini>:
 8001b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1a:	bf00      	nop
 8001b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b1e:	bc08      	pop	{r3}
 8001b20:	469e      	mov	lr, r3
 8001b22:	4770      	bx	lr
