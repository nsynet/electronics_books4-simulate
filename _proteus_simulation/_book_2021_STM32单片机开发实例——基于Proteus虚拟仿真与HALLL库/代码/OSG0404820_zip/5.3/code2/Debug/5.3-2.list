
5.3-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002f78  08002f78  00012f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fdc  08002fdc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002fdc  08002fdc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fdc  08002fdc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fdc  08002fdc  00012fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fe0  08002fe0  00012fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  08003054  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003054  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007499  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014a1  00000000  00000000  00027532  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c0  00000000  00000000  000289d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000708  00000000  00000000  00029198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016be5  00000000  00000000  000298a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006481  00000000  00000000  00040485  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081625  00000000  00000000  00046906  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7f2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000228c  00000000  00000000  000c7fa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f60 	.word	0x08002f60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002f60 	.word	0x08002f60

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char str[10];
	uint16_t Dat=0;
 800060e:	2300      	movs	r3, #0
 8000610:	82fb      	strh	r3, [r7, #22]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fa67 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f859 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f8f3 	bl	8000804 <MX_GPIO_Init>
  MX_SPI1_Init();
 800061e:	f000 f891 	bl	8000744 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000622:	f000 f8c5 	bl	80007b0 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SndDat[0]=_TC72_CTRL_W;
 8000626:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <main+0xb0>)
 8000628:	2280      	movs	r2, #128	; 0x80
 800062a:	701a      	strb	r2, [r3, #0]
	  SndDat[1]=_TC72_OnceCnv;
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <main+0xb0>)
 800062e:	2215      	movs	r2, #21
 8000630:	705a      	strb	r2, [r3, #1]
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	  HAL_SPI_Transmit(&hspi1,SndDat,2,100);
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	2202      	movs	r2, #2
 8000636:	4920      	ldr	r1, [pc, #128]	; (80006b8 <main+0xb0>)
 8000638:	4820      	ldr	r0, [pc, #128]	; (80006bc <main+0xb4>)
 800063a:	f001 f9ad 	bl	8001998 <HAL_SPI_Transmit>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

	  HAL_Delay(100);
 800063e:	2064      	movs	r0, #100	; 0x64
 8000640:	f000 fab2 	bl	8000ba8 <HAL_Delay>

	  SndDat[0]=_TC72_Dat_MSB;
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <main+0xb0>)
 8000646:	2202      	movs	r2, #2
 8000648:	701a      	strb	r2, [r3, #0]
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	  HAL_SPI_Transmit(&hspi1,SndDat,1,100);
 800064a:	2364      	movs	r3, #100	; 0x64
 800064c:	2201      	movs	r2, #1
 800064e:	491a      	ldr	r1, [pc, #104]	; (80006b8 <main+0xb0>)
 8000650:	481a      	ldr	r0, [pc, #104]	; (80006bc <main+0xb4>)
 8000652:	f001 f9a1 	bl	8001998 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1,RcvDat,2,100);
 8000656:	2364      	movs	r3, #100	; 0x64
 8000658:	2202      	movs	r2, #2
 800065a:	4919      	ldr	r1, [pc, #100]	; (80006c0 <main+0xb8>)
 800065c:	4817      	ldr	r0, [pc, #92]	; (80006bc <main+0xb4>)
 800065e:	f001 fad7 	bl	8001c10 <HAL_SPI_Receive>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

	  Dat=RcvDat[0];
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <main+0xb8>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	82fb      	strh	r3, [r7, #22]
	  Dat<<=8;
 8000668:	8afb      	ldrh	r3, [r7, #22]
 800066a:	021b      	lsls	r3, r3, #8
 800066c:	82fb      	strh	r3, [r7, #22]
	  Dat+=RcvDat[1];
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <main+0xb8>)
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	b29a      	uxth	r2, r3
 8000674:	8afb      	ldrh	r3, [r7, #22]
 8000676:	4413      	add	r3, r2
 8000678:	82fb      	strh	r3, [r7, #22]
	  t=((float)(Dat))/256;
 800067a:	8afb      	ldrh	r3, [r7, #22]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff fe1b 	bl	80002b8 <__aeabi_ui2f>
 8000682:	4603      	mov	r3, r0
 8000684:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff21 	bl	80004d0 <__aeabi_fdiv>
 800068e:	4603      	mov	r3, r0
 8000690:	613b      	str	r3, [r7, #16]

	  //sprintf(str,"%f",t);
	  sprintf(str,"%d",RcvDat[0]);
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <main+0xb8>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	490a      	ldr	r1, [pc, #40]	; (80006c4 <main+0xbc>)
 800069c:	4618      	mov	r0, r3
 800069e:	f002 f84d 	bl	800273c <siprintf>
	  HAL_UART_Transmit(&huart1,str,7,7);
 80006a2:	1d39      	adds	r1, r7, #4
 80006a4:	2307      	movs	r3, #7
 80006a6:	2207      	movs	r2, #7
 80006a8:	4807      	ldr	r0, [pc, #28]	; (80006c8 <main+0xc0>)
 80006aa:	f001 feaa 	bl	8002402 <HAL_UART_Transmit>

	  HAL_Delay(900);
 80006ae:	f44f 7061 	mov.w	r0, #900	; 0x384
 80006b2:	f000 fa79 	bl	8000ba8 <HAL_Delay>
	  SndDat[0]=_TC72_CTRL_W;
 80006b6:	e7b6      	b.n	8000626 <main+0x1e>
 80006b8:	20000098 	.word	0x20000098
 80006bc:	200000e0 	.word	0x200000e0
 80006c0:	200000dc 	.word	0x200000dc
 80006c4:	08002f78 	.word	0x08002f78
 80006c8:	2000009c 	.word	0x2000009c

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b090      	sub	sp, #64	; 0x40
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0318 	add.w	r3, r7, #24
 80006d6:	2228      	movs	r2, #40	; 0x28
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 f826 	bl	800272c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ee:	2302      	movs	r3, #2
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f2:	2301      	movs	r3, #1
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f6:	2310      	movs	r3, #16
 80006f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fca8 	bl	8001058 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800070e:	f000 f88f 	bl	8000830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f000 ff14 	bl	8001558 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000736:	f000 f87b 	bl	8000830 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3740      	adds	r7, #64	; 0x40
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_SPI1_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_SPI1_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000770:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000778:	2238      	movs	r2, #56	; 0x38
 800077a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000796:	f001 f87b 	bl	8001890 <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f846 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000e0 	.word	0x200000e0
 80007ac:	40013000 	.word	0x40013000

080007b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART1_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007bc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80007c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e8:	f001 fdbe 	bl	8002368 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f81d 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000009c 	.word	0x2000009c
 8000800:	40013800 	.word	0x40013800

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_GPIO_Init+0x28>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a07      	ldr	r2, [pc, #28]	; (800082c <MX_GPIO_Init+0x28>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	6193      	str	r3, [r2, #24]
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <MX_GPIO_Init+0x28>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	40021000 	.word	0x40021000

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_MspInit+0x5c>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a14      	ldr	r2, [pc, #80]	; (8000898 <HAL_MspInit+0x5c>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_MspInit+0x5c>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x5c>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_MspInit+0x5c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_MspInit+0x5c>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_MspInit+0x60>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_MspInit+0x60>)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	40021000 	.word	0x40021000
 800089c:	40010000 	.word	0x40010000

080008a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a1b      	ldr	r2, [pc, #108]	; (8000928 <HAL_SPI_MspInit+0x88>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d12f      	bne.n	8000920 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <HAL_SPI_MspInit+0x8c>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a19      	ldr	r2, [pc, #100]	; (800092c <HAL_SPI_MspInit+0x8c>)
 80008c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <HAL_SPI_MspInit+0x8c>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <HAL_SPI_MspInit+0x8c>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a13      	ldr	r2, [pc, #76]	; (800092c <HAL_SPI_MspInit+0x8c>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_SPI_MspInit+0x8c>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80008f0:	23b0      	movs	r3, #176	; 0xb0
 80008f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	4619      	mov	r1, r3
 8000902:	480b      	ldr	r0, [pc, #44]	; (8000930 <HAL_SPI_MspInit+0x90>)
 8000904:	f000 fa56 	bl	8000db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000908:	2340      	movs	r3, #64	; 0x40
 800090a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	4619      	mov	r1, r3
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <HAL_SPI_MspInit+0x90>)
 800091c:	f000 fa4a 	bl	8000db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000920:	bf00      	nop
 8000922:	3720      	adds	r7, #32
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40013000 	.word	0x40013000
 800092c:	40021000 	.word	0x40021000
 8000930:	40010800 	.word	0x40010800

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a1c      	ldr	r2, [pc, #112]	; (80009c0 <HAL_UART_MspInit+0x8c>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d131      	bne.n	80009b8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <HAL_UART_MspInit+0x90>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a1a      	ldr	r2, [pc, #104]	; (80009c4 <HAL_UART_MspInit+0x90>)
 800095a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_UART_MspInit+0x90>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_UART_MspInit+0x90>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <HAL_UART_MspInit+0x90>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_UART_MspInit+0x90>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000988:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0310 	add.w	r3, r7, #16
 8000996:	4619      	mov	r1, r3
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <HAL_UART_MspInit+0x94>)
 800099a:	f000 fa0b 	bl	8000db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800099e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	4619      	mov	r1, r3
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <HAL_UART_MspInit+0x94>)
 80009b4:	f000 f9fe 	bl	8000db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009b8:	bf00      	nop
 80009ba:	3720      	adds	r7, #32
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40013800 	.word	0x40013800
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40010800 	.word	0x40010800

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <HardFault_Handler+0x4>

080009de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <MemManage_Handler+0x4>

080009e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <BusFault_Handler+0x4>

080009ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <UsageFault_Handler+0x4>

080009f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a18:	f000 f8aa 	bl	8000b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <_sbrk+0x5c>)
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <_sbrk+0x60>)
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <_sbrk+0x64>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <_sbrk+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d207      	bcs.n	8000a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a50:	f001 fe42 	bl	80026d8 <__errno>
 8000a54:	4602      	mov	r2, r0
 8000a56:	230c      	movs	r3, #12
 8000a58:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	e009      	b.n	8000a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <_sbrk+0x64>)
 8000a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20002800 	.word	0x20002800
 8000a80:	00000400 	.word	0x00000400
 8000a84:	2000008c 	.word	0x2000008c
 8000a88:	20000140 	.word	0x20000140

08000a8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a9a:	e003      	b.n	8000aa4 <LoopCopyDataInit>

08000a9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000aa0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aa2:	3104      	adds	r1, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000aa4:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000aa8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000aaa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000aac:	d3f6      	bcc.n	8000a9c <CopyDataInit>
  ldr r2, =_sbss
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ab0:	e002      	b.n	8000ab8 <LoopFillZerobss>

08000ab2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ab4:	f842 3b04 	str.w	r3, [r2], #4

08000ab8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000aba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000abc:	d3f9      	bcc.n	8000ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000abe:	f7ff ffe5 	bl	8000a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f001 fe0f 	bl	80026e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ac6:	f7ff fd9f 	bl	8000608 <main>
  bx lr
 8000aca:	4770      	bx	lr
  ldr r3, =_sidata
 8000acc:	08002fe4 	.word	0x08002fe4
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ad4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000ad8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000adc:	20000140 	.word	0x20000140

08000ae0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC1_2_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_Init+0x28>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_Init+0x28>)
 8000aee:	f043 0310 	orr.w	r3, r3, #16
 8000af2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 f929 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 f808 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b00:	f7ff fe9c 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40022000 	.word	0x40022000

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_InitTick+0x54>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x58>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f933 	bl	8000d9a <HAL_SYSTICK_Config>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00e      	b.n	8000b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d80a      	bhi.n	8000b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f000 f909 	bl	8000d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <HAL_InitTick+0x5c>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000004 	.word	0x20000004

08000b70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_IncTick+0x1c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_IncTick+0x20>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a03      	ldr	r2, [pc, #12]	; (8000b90 <HAL_IncTick+0x20>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000138 	.word	0x20000138

08000b94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b02      	ldr	r3, [pc, #8]	; (8000ba4 <HAL_GetTick+0x10>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	20000138 	.word	0x20000138

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff fff0 	bl	8000b94 <HAL_GetTick>
 8000bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc0:	d005      	beq.n	8000bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_Delay+0x40>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4413      	add	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bce:	bf00      	nop
 8000bd0:	f7ff ffe0 	bl	8000b94 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8f7      	bhi.n	8000bd0 <HAL_Delay+0x28>
  {
  }
}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000008 	.word	0x20000008

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	; (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	; 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d18:	d301      	bcc.n	8000d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00f      	b.n	8000d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <SysTick_Config+0x40>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d26:	210f      	movs	r1, #15
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f7ff ff90 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <SysTick_Config+0x40>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d36:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <SysTick_Config+0x40>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff49 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff5e 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff90 	bl	8000ca4 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5f 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ffb0 	bl	8000d08 <SysTick_Config>
 8000da8:	4603      	mov	r3, r0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b08b      	sub	sp, #44	; 0x2c
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc6:	e121      	b.n	800100c <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	69fa      	ldr	r2, [r7, #28]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	f040 8110 	bne.w	8001006 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b12      	cmp	r3, #18
 8000dec:	d034      	beq.n	8000e58 <HAL_GPIO_Init+0xa4>
 8000dee:	2b12      	cmp	r3, #18
 8000df0:	d80d      	bhi.n	8000e0e <HAL_GPIO_Init+0x5a>
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d02b      	beq.n	8000e4e <HAL_GPIO_Init+0x9a>
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d804      	bhi.n	8000e04 <HAL_GPIO_Init+0x50>
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d031      	beq.n	8000e62 <HAL_GPIO_Init+0xae>
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d01c      	beq.n	8000e3c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e02:	e048      	b.n	8000e96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d043      	beq.n	8000e90 <HAL_GPIO_Init+0xdc>
 8000e08:	2b11      	cmp	r3, #17
 8000e0a:	d01b      	beq.n	8000e44 <HAL_GPIO_Init+0x90>
          break;
 8000e0c:	e043      	b.n	8000e96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e0e:	4a86      	ldr	r2, [pc, #536]	; (8001028 <HAL_GPIO_Init+0x274>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d026      	beq.n	8000e62 <HAL_GPIO_Init+0xae>
 8000e14:	4a84      	ldr	r2, [pc, #528]	; (8001028 <HAL_GPIO_Init+0x274>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d806      	bhi.n	8000e28 <HAL_GPIO_Init+0x74>
 8000e1a:	4a84      	ldr	r2, [pc, #528]	; (800102c <HAL_GPIO_Init+0x278>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d020      	beq.n	8000e62 <HAL_GPIO_Init+0xae>
 8000e20:	4a83      	ldr	r2, [pc, #524]	; (8001030 <HAL_GPIO_Init+0x27c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d01d      	beq.n	8000e62 <HAL_GPIO_Init+0xae>
          break;
 8000e26:	e036      	b.n	8000e96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e28:	4a82      	ldr	r2, [pc, #520]	; (8001034 <HAL_GPIO_Init+0x280>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d019      	beq.n	8000e62 <HAL_GPIO_Init+0xae>
 8000e2e:	4a82      	ldr	r2, [pc, #520]	; (8001038 <HAL_GPIO_Init+0x284>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d016      	beq.n	8000e62 <HAL_GPIO_Init+0xae>
 8000e34:	4a81      	ldr	r2, [pc, #516]	; (800103c <HAL_GPIO_Init+0x288>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d013      	beq.n	8000e62 <HAL_GPIO_Init+0xae>
          break;
 8000e3a:	e02c      	b.n	8000e96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	623b      	str	r3, [r7, #32]
          break;
 8000e42:	e028      	b.n	8000e96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	623b      	str	r3, [r7, #32]
          break;
 8000e4c:	e023      	b.n	8000e96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	3308      	adds	r3, #8
 8000e54:	623b      	str	r3, [r7, #32]
          break;
 8000e56:	e01e      	b.n	8000e96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	330c      	adds	r3, #12
 8000e5e:	623b      	str	r3, [r7, #32]
          break;
 8000e60:	e019      	b.n	8000e96 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d102      	bne.n	8000e70 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	623b      	str	r3, [r7, #32]
          break;
 8000e6e:	e012      	b.n	8000e96 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d105      	bne.n	8000e84 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e78:	2308      	movs	r3, #8
 8000e7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	69fa      	ldr	r2, [r7, #28]
 8000e80:	611a      	str	r2, [r3, #16]
          break;
 8000e82:	e008      	b.n	8000e96 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e84:	2308      	movs	r3, #8
 8000e86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	69fa      	ldr	r2, [r7, #28]
 8000e8c:	615a      	str	r2, [r3, #20]
          break;
 8000e8e:	e002      	b.n	8000e96 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e90:	2300      	movs	r3, #0
 8000e92:	623b      	str	r3, [r7, #32]
          break;
 8000e94:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	2bff      	cmp	r3, #255	; 0xff
 8000e9a:	d801      	bhi.n	8000ea0 <HAL_GPIO_Init+0xec>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	e001      	b.n	8000ea4 <HAL_GPIO_Init+0xf0>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	2bff      	cmp	r3, #255	; 0xff
 8000eaa:	d802      	bhi.n	8000eb2 <HAL_GPIO_Init+0xfe>
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	e002      	b.n	8000eb8 <HAL_GPIO_Init+0x104>
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	3b08      	subs	r3, #8
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	401a      	ands	r2, r3
 8000eca:	6a39      	ldr	r1, [r7, #32]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f000 8090 	beq.w	8001006 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee6:	4b56      	ldr	r3, [pc, #344]	; (8001040 <HAL_GPIO_Init+0x28c>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	4a55      	ldr	r2, [pc, #340]	; (8001040 <HAL_GPIO_Init+0x28c>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6193      	str	r3, [r2, #24]
 8000ef2:	4b53      	ldr	r3, [pc, #332]	; (8001040 <HAL_GPIO_Init+0x28c>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000efe:	4a51      	ldr	r2, [pc, #324]	; (8001044 <HAL_GPIO_Init+0x290>)
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	3302      	adds	r3, #2
 8000f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	220f      	movs	r2, #15
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a48      	ldr	r2, [pc, #288]	; (8001048 <HAL_GPIO_Init+0x294>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d00d      	beq.n	8000f46 <HAL_GPIO_Init+0x192>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a47      	ldr	r2, [pc, #284]	; (800104c <HAL_GPIO_Init+0x298>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d007      	beq.n	8000f42 <HAL_GPIO_Init+0x18e>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a46      	ldr	r2, [pc, #280]	; (8001050 <HAL_GPIO_Init+0x29c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_GPIO_Init+0x18a>
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	e004      	b.n	8000f48 <HAL_GPIO_Init+0x194>
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e002      	b.n	8000f48 <HAL_GPIO_Init+0x194>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <HAL_GPIO_Init+0x194>
 8000f46:	2300      	movs	r3, #0
 8000f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f4a:	f002 0203 	and.w	r2, r2, #3
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	4093      	lsls	r3, r2
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f58:	493a      	ldr	r1, [pc, #232]	; (8001044 <HAL_GPIO_Init+0x290>)
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d006      	beq.n	8000f80 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f72:	4b38      	ldr	r3, [pc, #224]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4937      	ldr	r1, [pc, #220]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	600b      	str	r3, [r1, #0]
 8000f7e:	e006      	b.n	8000f8e <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f80:	4b34      	ldr	r3, [pc, #208]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	4932      	ldr	r1, [pc, #200]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d006      	beq.n	8000fa8 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f9a:	4b2e      	ldr	r3, [pc, #184]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	492d      	ldr	r1, [pc, #180]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	604b      	str	r3, [r1, #4]
 8000fa6:	e006      	b.n	8000fb6 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	4928      	ldr	r1, [pc, #160]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d006      	beq.n	8000fd0 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fc2:	4b24      	ldr	r3, [pc, #144]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	4923      	ldr	r1, [pc, #140]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	608b      	str	r3, [r1, #8]
 8000fce:	e006      	b.n	8000fde <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fd0:	4b20      	ldr	r3, [pc, #128]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	491e      	ldr	r1, [pc, #120]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8000fda:	4013      	ands	r3, r2
 8000fdc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d006      	beq.n	8000ff8 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	4919      	ldr	r1, [pc, #100]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60cb      	str	r3, [r1, #12]
 8000ff6:	e006      	b.n	8001006 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	4914      	ldr	r1, [pc, #80]	; (8001054 <HAL_GPIO_Init+0x2a0>)
 8001002:	4013      	ands	r3, r2
 8001004:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	3301      	adds	r3, #1
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	fa22 f303 	lsr.w	r3, r2, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	f47f aed6 	bne.w	8000dc8 <HAL_GPIO_Init+0x14>
  }
}
 800101c:	bf00      	nop
 800101e:	372c      	adds	r7, #44	; 0x2c
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	10210000 	.word	0x10210000
 800102c:	10110000 	.word	0x10110000
 8001030:	10120000 	.word	0x10120000
 8001034:	10310000 	.word	0x10310000
 8001038:	10320000 	.word	0x10320000
 800103c:	10220000 	.word	0x10220000
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000
 8001048:	40010800 	.word	0x40010800
 800104c:	40010c00 	.word	0x40010c00
 8001050:	40011000 	.word	0x40011000
 8001054:	40010400 	.word	0x40010400

08001058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e26c      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8087 	beq.w	8001186 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001078:	4b92      	ldr	r3, [pc, #584]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 030c 	and.w	r3, r3, #12
 8001080:	2b04      	cmp	r3, #4
 8001082:	d00c      	beq.n	800109e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001084:	4b8f      	ldr	r3, [pc, #572]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b08      	cmp	r3, #8
 800108e:	d112      	bne.n	80010b6 <HAL_RCC_OscConfig+0x5e>
 8001090:	4b8c      	ldr	r3, [pc, #560]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109c:	d10b      	bne.n	80010b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109e:	4b89      	ldr	r3, [pc, #548]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d06c      	beq.n	8001184 <HAL_RCC_OscConfig+0x12c>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d168      	bne.n	8001184 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e246      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x76>
 80010c0:	4b80      	ldr	r3, [pc, #512]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a7f      	ldr	r2, [pc, #508]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e02e      	b.n	800112c <HAL_RCC_OscConfig+0xd4>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x98>
 80010d6:	4b7b      	ldr	r3, [pc, #492]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a7a      	ldr	r2, [pc, #488]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b78      	ldr	r3, [pc, #480]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a77      	ldr	r2, [pc, #476]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e01d      	b.n	800112c <HAL_RCC_OscConfig+0xd4>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0xbc>
 80010fa:	4b72      	ldr	r3, [pc, #456]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a71      	ldr	r2, [pc, #452]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b6f      	ldr	r3, [pc, #444]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a6e      	ldr	r2, [pc, #440]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e00b      	b.n	800112c <HAL_RCC_OscConfig+0xd4>
 8001114:	4b6b      	ldr	r3, [pc, #428]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a6a      	ldr	r2, [pc, #424]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800111a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b68      	ldr	r3, [pc, #416]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a67      	ldr	r2, [pc, #412]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d013      	beq.n	800115c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fd2e 	bl	8000b94 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fd2a 	bl	8000b94 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	; 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e1fa      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	4b5d      	ldr	r3, [pc, #372]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0xe4>
 800115a:	e014      	b.n	8001186 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fd1a 	bl	8000b94 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fd16 	bl	8000b94 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e1e6      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	4b53      	ldr	r3, [pc, #332]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x10c>
 8001182:	e000      	b.n	8001186 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d063      	beq.n	800125a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001192:	4b4c      	ldr	r3, [pc, #304]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800119e:	4b49      	ldr	r3, [pc, #292]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d11c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x18c>
 80011aa:	4b46      	ldr	r3, [pc, #280]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d116      	bne.n	80011e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <HAL_RCC_OscConfig+0x176>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d001      	beq.n	80011ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e1ba      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ce:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4939      	ldr	r1, [pc, #228]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	e03a      	b.n	800125a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d020      	beq.n	800122e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ec:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fccf 	bl	8000b94 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fccb 	bl	8000b94 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e19b      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001218:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4927      	ldr	r1, [pc, #156]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001228:	4313      	orrs	r3, r2
 800122a:	600b      	str	r3, [r1, #0]
 800122c:	e015      	b.n	800125a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fcae 	bl	8000b94 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123c:	f7ff fcaa 	bl	8000b94 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e17a      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f0      	bne.n	800123c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d03a      	beq.n	80012dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d019      	beq.n	80012a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_RCC_OscConfig+0x274>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001274:	f7ff fc8e 	bl	8000b94 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127c:	f7ff fc8a 	bl	8000b94 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e15a      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800129a:	2001      	movs	r0, #1
 800129c:	f000 fada 	bl	8001854 <RCC_Delay>
 80012a0:	e01c      	b.n	80012dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_RCC_OscConfig+0x274>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a8:	f7ff fc74 	bl	8000b94 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ae:	e00f      	b.n	80012d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc70 	bl	8000b94 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d908      	bls.n	80012d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e140      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	42420000 	.word	0x42420000
 80012cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	4b9e      	ldr	r3, [pc, #632]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1e9      	bne.n	80012b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80a6 	beq.w	8001436 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ee:	4b97      	ldr	r3, [pc, #604]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10d      	bne.n	8001316 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	4b94      	ldr	r3, [pc, #592]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a93      	ldr	r2, [pc, #588]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b91      	ldr	r3, [pc, #580]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001312:	2301      	movs	r3, #1
 8001314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001316:	4b8e      	ldr	r3, [pc, #568]	; (8001550 <HAL_RCC_OscConfig+0x4f8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131e:	2b00      	cmp	r3, #0
 8001320:	d118      	bne.n	8001354 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001322:	4b8b      	ldr	r3, [pc, #556]	; (8001550 <HAL_RCC_OscConfig+0x4f8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a8a      	ldr	r2, [pc, #552]	; (8001550 <HAL_RCC_OscConfig+0x4f8>)
 8001328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800132e:	f7ff fc31 	bl	8000b94 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001336:	f7ff fc2d 	bl	8000b94 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b64      	cmp	r3, #100	; 0x64
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e0fd      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001348:	4b81      	ldr	r3, [pc, #516]	; (8001550 <HAL_RCC_OscConfig+0x4f8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x312>
 800135c:	4b7b      	ldr	r3, [pc, #492]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4a7a      	ldr	r2, [pc, #488]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6213      	str	r3, [r2, #32]
 8001368:	e02d      	b.n	80013c6 <HAL_RCC_OscConfig+0x36e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x334>
 8001372:	4b76      	ldr	r3, [pc, #472]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4a75      	ldr	r2, [pc, #468]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	6213      	str	r3, [r2, #32]
 800137e:	4b73      	ldr	r3, [pc, #460]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4a72      	ldr	r2, [pc, #456]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001384:	f023 0304 	bic.w	r3, r3, #4
 8001388:	6213      	str	r3, [r2, #32]
 800138a:	e01c      	b.n	80013c6 <HAL_RCC_OscConfig+0x36e>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b05      	cmp	r3, #5
 8001392:	d10c      	bne.n	80013ae <HAL_RCC_OscConfig+0x356>
 8001394:	4b6d      	ldr	r3, [pc, #436]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4a6c      	ldr	r2, [pc, #432]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6213      	str	r3, [r2, #32]
 80013a0:	4b6a      	ldr	r3, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4a69      	ldr	r2, [pc, #420]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6213      	str	r3, [r2, #32]
 80013ac:	e00b      	b.n	80013c6 <HAL_RCC_OscConfig+0x36e>
 80013ae:	4b67      	ldr	r3, [pc, #412]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4a66      	ldr	r2, [pc, #408]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	f023 0301 	bic.w	r3, r3, #1
 80013b8:	6213      	str	r3, [r2, #32]
 80013ba:	4b64      	ldr	r3, [pc, #400]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	4a63      	ldr	r2, [pc, #396]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	f023 0304 	bic.w	r3, r3, #4
 80013c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d015      	beq.n	80013fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ce:	f7ff fbe1 	bl	8000b94 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d4:	e00a      	b.n	80013ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d6:	f7ff fbdd 	bl	8000b94 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e0ab      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ec:	4b57      	ldr	r3, [pc, #348]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0ee      	beq.n	80013d6 <HAL_RCC_OscConfig+0x37e>
 80013f8:	e014      	b.n	8001424 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fbcb 	bl	8000b94 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001400:	e00a      	b.n	8001418 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001402:	f7ff fbc7 	bl	8000b94 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001410:	4293      	cmp	r3, r2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e095      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001418:	4b4c      	ldr	r3, [pc, #304]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1ee      	bne.n	8001402 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001424:	7dfb      	ldrb	r3, [r7, #23]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d105      	bne.n	8001436 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142a:	4b48      	ldr	r3, [pc, #288]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a47      	ldr	r2, [pc, #284]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001434:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 8081 	beq.w	8001542 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001440:	4b42      	ldr	r3, [pc, #264]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	2b08      	cmp	r3, #8
 800144a:	d061      	beq.n	8001510 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d146      	bne.n	80014e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001454:	4b3f      	ldr	r3, [pc, #252]	; (8001554 <HAL_RCC_OscConfig+0x4fc>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145a:	f7ff fb9b 	bl	8000b94 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001462:	f7ff fb97 	bl	8000b94 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e067      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001474:	4b35      	ldr	r3, [pc, #212]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f0      	bne.n	8001462 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001488:	d108      	bne.n	800149c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800148a:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	492d      	ldr	r1, [pc, #180]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800149c:	4b2b      	ldr	r3, [pc, #172]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a19      	ldr	r1, [r3, #32]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	430b      	orrs	r3, r1
 80014ae:	4927      	ldr	r1, [pc, #156]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <HAL_RCC_OscConfig+0x4fc>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fb6b 	bl	8000b94 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff fb67 	bl	8000b94 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e037      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x46a>
 80014e0:	e02f      	b.n	8001542 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_RCC_OscConfig+0x4fc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb54 	bl	8000b94 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff fb50 	bl	8000b94 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e020      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x498>
 800150e:	e018      	b.n	8001542 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e013      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	429a      	cmp	r2, r3
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d001      	beq.n	8001542 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000
 8001550:	40007000 	.word	0x40007000
 8001554:	42420060 	.word	0x42420060

08001558 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0d0      	b.n	800170e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800156c:	4b6a      	ldr	r3, [pc, #424]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d910      	bls.n	800159c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b67      	ldr	r3, [pc, #412]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 0207 	bic.w	r2, r3, #7
 8001582:	4965      	ldr	r1, [pc, #404]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	4b63      	ldr	r3, [pc, #396]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0b8      	b.n	800170e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d020      	beq.n	80015ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b4:	4b59      	ldr	r3, [pc, #356]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a58      	ldr	r2, [pc, #352]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015cc:	4b53      	ldr	r3, [pc, #332]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	4a52      	ldr	r2, [pc, #328]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d8:	4b50      	ldr	r3, [pc, #320]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	494d      	ldr	r1, [pc, #308]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d040      	beq.n	8001678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d107      	bne.n	800160e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d115      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e07f      	b.n	800170e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001616:	4b41      	ldr	r3, [pc, #260]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e073      	b.n	800170e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001626:	4b3d      	ldr	r3, [pc, #244]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e06b      	b.n	800170e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001636:	4b39      	ldr	r3, [pc, #228]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f023 0203 	bic.w	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4936      	ldr	r1, [pc, #216]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001648:	f7ff faa4 	bl	8000b94 <HAL_GetTick>
 800164c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164e:	e00a      	b.n	8001666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001650:	f7ff faa0 	bl	8000b94 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e053      	b.n	800170e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001666:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 020c 	and.w	r2, r3, #12
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	429a      	cmp	r2, r3
 8001676:	d1eb      	bne.n	8001650 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001678:	4b27      	ldr	r3, [pc, #156]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d210      	bcs.n	80016a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b24      	ldr	r3, [pc, #144]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 0207 	bic.w	r2, r3, #7
 800168e:	4922      	ldr	r1, [pc, #136]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e032      	b.n	800170e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d008      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	4916      	ldr	r1, [pc, #88]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	490e      	ldr	r1, [pc, #56]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016e6:	f000 f821 	bl	800172c <HAL_RCC_GetSysClockFreq>
 80016ea:	4601      	mov	r1, r0
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_RCC_ClockConfig+0x1c8>)
 80016f8:	5cd3      	ldrb	r3, [r2, r3]
 80016fa:	fa21 f303 	lsr.w	r3, r1, r3
 80016fe:	4a09      	ldr	r2, [pc, #36]	; (8001724 <HAL_RCC_ClockConfig+0x1cc>)
 8001700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_RCC_ClockConfig+0x1d0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fa02 	bl	8000b10 <HAL_InitTick>

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40022000 	.word	0x40022000
 800171c:	40021000 	.word	0x40021000
 8001720:	08002f90 	.word	0x08002f90
 8001724:	20000000 	.word	0x20000000
 8001728:	20000004 	.word	0x20000004

0800172c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800172c:	b490      	push	{r4, r7}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001732:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001734:	1d3c      	adds	r4, r7, #4
 8001736:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001738:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001756:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b04      	cmp	r3, #4
 8001764:	d002      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x40>
 8001766:	2b08      	cmp	r3, #8
 8001768:	d003      	beq.n	8001772 <HAL_RCC_GetSysClockFreq+0x46>
 800176a:	e02d      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800176c:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800176e:	623b      	str	r3, [r7, #32]
      break;
 8001770:	e02d      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	0c9b      	lsrs	r3, r3, #18
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800177e:	4413      	add	r3, r2
 8001780:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001784:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d013      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	0c5b      	lsrs	r3, r3, #17
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800179e:	4413      	add	r3, r2
 80017a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	4a0f      	ldr	r2, [pc, #60]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017aa:	fb02 f203 	mul.w	r2, r2, r3
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
 80017b6:	e004      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80017bc:	fb02 f303 	mul.w	r3, r2, r3
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	623b      	str	r3, [r7, #32]
      break;
 80017c6:	e002      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017ca:	623b      	str	r3, [r7, #32]
      break;
 80017cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ce:	6a3b      	ldr	r3, [r7, #32]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc90      	pop	{r4, r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	08002f7c 	.word	0x08002f7c
 80017e0:	08002f8c 	.word	0x08002f8c
 80017e4:	40021000 	.word	0x40021000
 80017e8:	007a1200 	.word	0x007a1200
 80017ec:	003d0900 	.word	0x003d0900

080017f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017f4:	4b02      	ldr	r3, [pc, #8]	; (8001800 <HAL_RCC_GetHCLKFreq+0x10>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	20000000 	.word	0x20000000

08001804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001808:	f7ff fff2 	bl	80017f0 <HAL_RCC_GetHCLKFreq>
 800180c:	4601      	mov	r1, r0
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	4a03      	ldr	r2, [pc, #12]	; (8001828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001820:	4618      	mov	r0, r3
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000
 8001828:	08002fa0 	.word	0x08002fa0

0800182c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001830:	f7ff ffde 	bl	80017f0 <HAL_RCC_GetHCLKFreq>
 8001834:	4601      	mov	r1, r0
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	0adb      	lsrs	r3, r3, #11
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	4a03      	ldr	r2, [pc, #12]	; (8001850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001848:	4618      	mov	r0, r3
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000
 8001850:	08002fa0 	.word	0x08002fa0

08001854 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <RCC_Delay+0x34>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0a      	ldr	r2, [pc, #40]	; (800188c <RCC_Delay+0x38>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	0a5b      	lsrs	r3, r3, #9
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	fb02 f303 	mul.w	r3, r2, r3
 800186e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001870:	bf00      	nop
  }
  while (Delay --);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1e5a      	subs	r2, r3, #1
 8001876:	60fa      	str	r2, [r7, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f9      	bne.n	8001870 <RCC_Delay+0x1c>
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000000 	.word	0x20000000
 800188c:	10624dd3 	.word	0x10624dd3

08001890 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e076      	b.n	8001990 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d108      	bne.n	80018bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018b2:	d009      	beq.n	80018c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
 80018ba:	e005      	b.n	80018c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7fe ffdc 	bl	80008a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194c:	ea42 0103 	orr.w	r1, r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	0c1a      	lsrs	r2, r3, #16
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f002 0204 	and.w	r2, r2, #4
 800196e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	69da      	ldr	r2, [r3, #28]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_SPI_Transmit+0x22>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e126      	b.n	8001c08 <HAL_SPI_Transmit+0x270>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019c2:	f7ff f8e7 	bl	8000b94 <HAL_GetTick>
 80019c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80019c8:	88fb      	ldrh	r3, [r7, #6]
 80019ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d002      	beq.n	80019de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80019d8:	2302      	movs	r3, #2
 80019da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80019dc:	e10b      	b.n	8001bf6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HAL_SPI_Transmit+0x52>
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80019ee:	e102      	b.n	8001bf6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2203      	movs	r2, #3
 80019f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	88fa      	ldrh	r2, [r7, #6]
 8001a08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	88fa      	ldrh	r2, [r7, #6]
 8001a0e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a36:	d10f      	bne.n	8001a58 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a62:	2b40      	cmp	r3, #64	; 0x40
 8001a64:	d007      	beq.n	8001a76 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a7e:	d14b      	bne.n	8001b18 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <HAL_SPI_Transmit+0xf6>
 8001a88:	8afb      	ldrh	r3, [r7, #22]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d13e      	bne.n	8001b0c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	881a      	ldrh	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	1c9a      	adds	r2, r3, #2
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ab2:	e02b      	b.n	8001b0c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d112      	bne.n	8001ae8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	881a      	ldrh	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	1c9a      	adds	r2, r3, #2
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ae6:	e011      	b.n	8001b0c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ae8:	f7ff f854 	bl	8000b94 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d803      	bhi.n	8001b00 <HAL_SPI_Transmit+0x168>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afe:	d102      	bne.n	8001b06 <HAL_SPI_Transmit+0x16e>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d102      	bne.n	8001b0c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b0a:	e074      	b.n	8001bf6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1ce      	bne.n	8001ab4 <HAL_SPI_Transmit+0x11c>
 8001b16:	e04c      	b.n	8001bb2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <HAL_SPI_Transmit+0x18e>
 8001b20:	8afb      	ldrh	r3, [r7, #22]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d140      	bne.n	8001ba8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	330c      	adds	r3, #12
 8001b30:	7812      	ldrb	r2, [r2, #0]
 8001b32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001b4c:	e02c      	b.n	8001ba8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d113      	bne.n	8001b84 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	330c      	adds	r3, #12
 8001b66:	7812      	ldrb	r2, [r2, #0]
 8001b68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b82:	e011      	b.n	8001ba8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b84:	f7ff f806 	bl	8000b94 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d803      	bhi.n	8001b9c <HAL_SPI_Transmit+0x204>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9a:	d102      	bne.n	8001ba2 <HAL_SPI_Transmit+0x20a>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d102      	bne.n	8001ba8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ba6:	e026      	b.n	8001bf6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1cd      	bne.n	8001b4e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	6839      	ldr	r1, [r7, #0]
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 fbb8 	bl	800232c <SPI_EndRxTxTransaction>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10a      	bne.n	8001be6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	77fb      	strb	r3, [r7, #31]
 8001bf2:	e000      	b.n	8001bf6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001bf4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c06:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c2c:	d112      	bne.n	8001c54 <HAL_SPI_Receive+0x44>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10e      	bne.n	8001c54 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001c3e:	88fa      	ldrh	r2, [r7, #6]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	4613      	mov	r3, r2
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 f8f1 	bl	8001e32 <HAL_SPI_TransmitReceive>
 8001c50:	4603      	mov	r3, r0
 8001c52:	e0ea      	b.n	8001e2a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_SPI_Receive+0x52>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e0e3      	b.n	8001e2a <HAL_SPI_Receive+0x21a>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c6a:	f7fe ff93 	bl	8000b94 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d002      	beq.n	8001c82 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c80:	e0ca      	b.n	8001e18 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <HAL_SPI_Receive+0x7e>
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d102      	bne.n	8001c94 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c92:	e0c1      	b.n	8001e18 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2204      	movs	r2, #4
 8001c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	88fa      	ldrh	r2, [r7, #6]
 8001cac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	88fa      	ldrh	r2, [r7, #6]
 8001cb2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cda:	d10f      	bne.n	8001cfc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cfa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d06:	2b40      	cmp	r3, #64	; 0x40
 8001d08:	d007      	beq.n	8001d1a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d162      	bne.n	8001de8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001d22:	e02e      	b.n	8001d82 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d115      	bne.n	8001d5e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f103 020c 	add.w	r2, r3, #12
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3e:	7812      	ldrb	r2, [r2, #0]
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d5c:	e011      	b.n	8001d82 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d5e:	f7fe ff19 	bl	8000b94 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d803      	bhi.n	8001d76 <HAL_SPI_Receive+0x166>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d74:	d102      	bne.n	8001d7c <HAL_SPI_Receive+0x16c>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001d80:	e04a      	b.n	8001e18 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1cb      	bne.n	8001d24 <HAL_SPI_Receive+0x114>
 8001d8c:	e031      	b.n	8001df2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d113      	bne.n	8001dc4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da6:	b292      	uxth	r2, r2
 8001da8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dae:	1c9a      	adds	r2, r3, #2
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001dc2:	e011      	b.n	8001de8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dc4:	f7fe fee6 	bl	8000b94 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d803      	bhi.n	8001ddc <HAL_SPI_Receive+0x1cc>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dda:	d102      	bne.n	8001de2 <HAL_SPI_Receive+0x1d2>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001de6:	e017      	b.n	8001e18 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1cd      	bne.n	8001d8e <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	6839      	ldr	r1, [r7, #0]
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 fa46 	bl	8002288 <SPI_EndRxTransaction>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2220      	movs	r2, #32
 8001e06:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	75fb      	strb	r3, [r7, #23]
 8001e14:	e000      	b.n	8001e18 <HAL_SPI_Receive+0x208>
  }

error :
 8001e16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b08c      	sub	sp, #48	; 0x30
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e40:	2301      	movs	r3, #1
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_SPI_TransmitReceive+0x26>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e18a      	b.n	800216e <HAL_SPI_TransmitReceive+0x33c>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e60:	f7fe fe98 	bl	8000b94 <HAL_GetTick>
 8001e64:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001e76:	887b      	ldrh	r3, [r7, #2]
 8001e78:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d00f      	beq.n	8001ea2 <HAL_SPI_TransmitReceive+0x70>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e88:	d107      	bne.n	8001e9a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d103      	bne.n	8001e9a <HAL_SPI_TransmitReceive+0x68>
 8001e92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d003      	beq.n	8001ea2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ea0:	e15b      	b.n	800215a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_SPI_TransmitReceive+0x82>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <HAL_SPI_TransmitReceive+0x82>
 8001eae:	887b      	ldrh	r3, [r7, #2]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d103      	bne.n	8001ebc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001eba:	e14e      	b.n	800215a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d003      	beq.n	8001ed0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2205      	movs	r2, #5
 8001ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	887a      	ldrh	r2, [r7, #2]
 8001ee6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	887a      	ldrh	r2, [r7, #2]
 8001ef2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	d007      	beq.n	8001f24 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f2c:	d178      	bne.n	8002020 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <HAL_SPI_TransmitReceive+0x10a>
 8001f36:	8b7b      	ldrh	r3, [r7, #26]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d166      	bne.n	800200a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	881a      	ldrh	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	1c9a      	adds	r2, r3, #2
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f60:	e053      	b.n	800200a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d11b      	bne.n	8001fa8 <HAL_SPI_TransmitReceive+0x176>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d016      	beq.n	8001fa8 <HAL_SPI_TransmitReceive+0x176>
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d113      	bne.n	8001fa8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	881a      	ldrh	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	1c9a      	adds	r2, r3, #2
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d119      	bne.n	8001fea <HAL_SPI_TransmitReceive+0x1b8>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d014      	beq.n	8001fea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fca:	b292      	uxth	r2, r2
 8001fcc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd2:	1c9a      	adds	r2, r3, #2
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001fea:	f7fe fdd3 	bl	8000b94 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d807      	bhi.n	800200a <HAL_SPI_TransmitReceive+0x1d8>
 8001ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002000:	d003      	beq.n	800200a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002008:	e0a7      	b.n	800215a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1a6      	bne.n	8001f62 <HAL_SPI_TransmitReceive+0x130>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002018:	b29b      	uxth	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1a1      	bne.n	8001f62 <HAL_SPI_TransmitReceive+0x130>
 800201e:	e07c      	b.n	800211a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <HAL_SPI_TransmitReceive+0x1fc>
 8002028:	8b7b      	ldrh	r3, [r7, #26]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d16b      	bne.n	8002106 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	330c      	adds	r3, #12
 8002038:	7812      	ldrb	r2, [r2, #0]
 800203a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800204a:	b29b      	uxth	r3, r3
 800204c:	3b01      	subs	r3, #1
 800204e:	b29a      	uxth	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002054:	e057      	b.n	8002106 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b02      	cmp	r3, #2
 8002062:	d11c      	bne.n	800209e <HAL_SPI_TransmitReceive+0x26c>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d017      	beq.n	800209e <HAL_SPI_TransmitReceive+0x26c>
 800206e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002070:	2b01      	cmp	r3, #1
 8002072:	d114      	bne.n	800209e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	330c      	adds	r3, #12
 800207e:	7812      	ldrb	r2, [r2, #0]
 8002080:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d119      	bne.n	80020e0 <HAL_SPI_TransmitReceive+0x2ae>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d014      	beq.n	80020e0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020dc:	2301      	movs	r3, #1
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80020e0:	f7fe fd58 	bl	8000b94 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d803      	bhi.n	80020f8 <HAL_SPI_TransmitReceive+0x2c6>
 80020f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f6:	d102      	bne.n	80020fe <HAL_SPI_TransmitReceive+0x2cc>
 80020f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d103      	bne.n	8002106 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002104:	e029      	b.n	800215a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800210a:	b29b      	uxth	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1a2      	bne.n	8002056 <HAL_SPI_TransmitReceive+0x224>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002114:	b29b      	uxth	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d19d      	bne.n	8002056 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800211a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f904 	bl	800232c <SPI_EndRxTxTransaction>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002136:	e010      	b.n	800215a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10b      	bne.n	8002158 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	e000      	b.n	800215a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002158:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800216a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800216e:	4618      	mov	r0, r3
 8002170:	3730      	adds	r7, #48	; 0x30
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	4613      	mov	r3, r2
 8002186:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002188:	f7fe fd04 	bl	8000b94 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	4413      	add	r3, r2
 8002196:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002198:	f7fe fcfc 	bl	8000b94 <HAL_GetTick>
 800219c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800219e:	4b39      	ldr	r3, [pc, #228]	; (8002284 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	015b      	lsls	r3, r3, #5
 80021a4:	0d1b      	lsrs	r3, r3, #20
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021ae:	e054      	b.n	800225a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b6:	d050      	beq.n	800225a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021b8:	f7fe fcec 	bl	8000b94 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d902      	bls.n	80021ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d13d      	bne.n	800224a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021e6:	d111      	bne.n	800220c <SPI_WaitFlagStateUntilTimeout+0x94>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021f0:	d004      	beq.n	80021fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fa:	d107      	bne.n	800220c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800220a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002214:	d10f      	bne.n	8002236 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002234:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e017      	b.n	800227a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	3b01      	subs	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4013      	ands	r3, r2
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	429a      	cmp	r2, r3
 8002268:	bf0c      	ite	eq
 800226a:	2301      	moveq	r3, #1
 800226c:	2300      	movne	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	461a      	mov	r2, r3
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	429a      	cmp	r2, r3
 8002276:	d19b      	bne.n	80021b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000000 	.word	0x20000000

08002288 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800229c:	d111      	bne.n	80022c2 <SPI_EndRxTransaction+0x3a>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022a6:	d004      	beq.n	80022b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b0:	d107      	bne.n	80022c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022c0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022ca:	d117      	bne.n	80022fc <SPI_EndRxTransaction+0x74>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d4:	d112      	bne.n	80022fc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2200      	movs	r2, #0
 80022de:	2101      	movs	r1, #1
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f7ff ff49 	bl	8002178 <SPI_WaitFlagStateUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01a      	beq.n	8002322 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f0:	f043 0220 	orr.w	r2, r3, #32
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e013      	b.n	8002324 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2200      	movs	r2, #0
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff ff36 	bl	8002178 <SPI_WaitFlagStateUntilTimeout>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	f043 0220 	orr.w	r2, r3, #32
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e000      	b.n	8002324 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2200      	movs	r2, #0
 8002340:	2180      	movs	r1, #128	; 0x80
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f7ff ff18 	bl	8002178 <SPI_WaitFlagStateUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d007      	beq.n	800235e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	f043 0220 	orr.w	r2, r3, #32
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e000      	b.n	8002360 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e03f      	b.n	80023fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe fad0 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2224      	movs	r2, #36	; 0x24
 8002398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f905 	bl	80025bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b08a      	sub	sp, #40	; 0x28
 8002406:	af02      	add	r7, sp, #8
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	4613      	mov	r3, r2
 8002410:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b20      	cmp	r3, #32
 8002420:	d17c      	bne.n	800251c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_UART_Transmit+0x2c>
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e075      	b.n	800251e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_UART_Transmit+0x3e>
 800243c:	2302      	movs	r3, #2
 800243e:	e06e      	b.n	800251e <HAL_UART_Transmit+0x11c>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2221      	movs	r2, #33	; 0x21
 8002452:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002456:	f7fe fb9d 	bl	8000b94 <HAL_GetTick>
 800245a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	88fa      	ldrh	r2, [r7, #6]
 8002460:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	88fa      	ldrh	r2, [r7, #6]
 8002466:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002470:	d108      	bne.n	8002484 <HAL_UART_Transmit+0x82>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d104      	bne.n	8002484 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	61bb      	str	r3, [r7, #24]
 8002482:	e003      	b.n	800248c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002494:	e02a      	b.n	80024ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2200      	movs	r2, #0
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f840 	bl	8002526 <UART_WaitOnFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e036      	b.n	800251e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10b      	bne.n	80024ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	3302      	adds	r3, #2
 80024ca:	61bb      	str	r3, [r7, #24]
 80024cc:	e007      	b.n	80024de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	781a      	ldrb	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	3301      	adds	r3, #1
 80024dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1cf      	bne.n	8002496 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2200      	movs	r2, #0
 80024fe:	2140      	movs	r1, #64	; 0x40
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f810 	bl	8002526 <UART_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e006      	b.n	800251e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	e000      	b.n	800251e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800251c:	2302      	movs	r3, #2
  }
}
 800251e:	4618      	mov	r0, r3
 8002520:	3720      	adds	r7, #32
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	603b      	str	r3, [r7, #0]
 8002532:	4613      	mov	r3, r2
 8002534:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002536:	e02c      	b.n	8002592 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253e:	d028      	beq.n	8002592 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <UART_WaitOnFlagUntilTimeout+0x30>
 8002546:	f7fe fb25 	bl	8000b94 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	429a      	cmp	r2, r3
 8002554:	d21d      	bcs.n	8002592 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002564:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e00f      	b.n	80025b2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4013      	ands	r3, r2
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	429a      	cmp	r2, r3
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d0c3      	beq.n	8002538 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025f6:	f023 030c 	bic.w	r3, r3, #12
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	430b      	orrs	r3, r1
 8002602:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a2c      	ldr	r2, [pc, #176]	; (80026d0 <UART_SetConfig+0x114>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d103      	bne.n	800262c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002624:	f7ff f902 	bl	800182c <HAL_RCC_GetPCLK2Freq>
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	e002      	b.n	8002632 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800262c:	f7ff f8ea 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8002630:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	009a      	lsls	r2, r3, #2
 800263c:	441a      	add	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	4a22      	ldr	r2, [pc, #136]	; (80026d4 <UART_SetConfig+0x118>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	0119      	lsls	r1, r3, #4
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	009a      	lsls	r2, r3, #2
 800265c:	441a      	add	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	fbb2 f2f3 	udiv	r2, r2, r3
 8002668:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <UART_SetConfig+0x118>)
 800266a:	fba3 0302 	umull	r0, r3, r3, r2
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2064      	movs	r0, #100	; 0x64
 8002672:	fb00 f303 	mul.w	r3, r0, r3
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	3332      	adds	r3, #50	; 0x32
 800267c:	4a15      	ldr	r2, [pc, #84]	; (80026d4 <UART_SetConfig+0x118>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002688:	4419      	add	r1, r3
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	009a      	lsls	r2, r3, #2
 8002694:	441a      	add	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	fbb2 f2f3 	udiv	r2, r2, r3
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <UART_SetConfig+0x118>)
 80026a2:	fba3 0302 	umull	r0, r3, r3, r2
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	2064      	movs	r0, #100	; 0x64
 80026aa:	fb00 f303 	mul.w	r3, r0, r3
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	3332      	adds	r3, #50	; 0x32
 80026b4:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <UART_SetConfig+0x118>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	f003 020f 	and.w	r2, r3, #15
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	440a      	add	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40013800 	.word	0x40013800
 80026d4:	51eb851f 	.word	0x51eb851f

080026d8 <__errno>:
 80026d8:	4b01      	ldr	r3, [pc, #4]	; (80026e0 <__errno+0x8>)
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	2000000c 	.word	0x2000000c

080026e4 <__libc_init_array>:
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	2500      	movs	r5, #0
 80026e8:	4e0c      	ldr	r6, [pc, #48]	; (800271c <__libc_init_array+0x38>)
 80026ea:	4c0d      	ldr	r4, [pc, #52]	; (8002720 <__libc_init_array+0x3c>)
 80026ec:	1ba4      	subs	r4, r4, r6
 80026ee:	10a4      	asrs	r4, r4, #2
 80026f0:	42a5      	cmp	r5, r4
 80026f2:	d109      	bne.n	8002708 <__libc_init_array+0x24>
 80026f4:	f000 fc34 	bl	8002f60 <_init>
 80026f8:	2500      	movs	r5, #0
 80026fa:	4e0a      	ldr	r6, [pc, #40]	; (8002724 <__libc_init_array+0x40>)
 80026fc:	4c0a      	ldr	r4, [pc, #40]	; (8002728 <__libc_init_array+0x44>)
 80026fe:	1ba4      	subs	r4, r4, r6
 8002700:	10a4      	asrs	r4, r4, #2
 8002702:	42a5      	cmp	r5, r4
 8002704:	d105      	bne.n	8002712 <__libc_init_array+0x2e>
 8002706:	bd70      	pop	{r4, r5, r6, pc}
 8002708:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800270c:	4798      	blx	r3
 800270e:	3501      	adds	r5, #1
 8002710:	e7ee      	b.n	80026f0 <__libc_init_array+0xc>
 8002712:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002716:	4798      	blx	r3
 8002718:	3501      	adds	r5, #1
 800271a:	e7f2      	b.n	8002702 <__libc_init_array+0x1e>
 800271c:	08002fdc 	.word	0x08002fdc
 8002720:	08002fdc 	.word	0x08002fdc
 8002724:	08002fdc 	.word	0x08002fdc
 8002728:	08002fe0 	.word	0x08002fe0

0800272c <memset>:
 800272c:	4603      	mov	r3, r0
 800272e:	4402      	add	r2, r0
 8002730:	4293      	cmp	r3, r2
 8002732:	d100      	bne.n	8002736 <memset+0xa>
 8002734:	4770      	bx	lr
 8002736:	f803 1b01 	strb.w	r1, [r3], #1
 800273a:	e7f9      	b.n	8002730 <memset+0x4>

0800273c <siprintf>:
 800273c:	b40e      	push	{r1, r2, r3}
 800273e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002742:	b500      	push	{lr}
 8002744:	b09c      	sub	sp, #112	; 0x70
 8002746:	ab1d      	add	r3, sp, #116	; 0x74
 8002748:	9002      	str	r0, [sp, #8]
 800274a:	9006      	str	r0, [sp, #24]
 800274c:	9107      	str	r1, [sp, #28]
 800274e:	9104      	str	r1, [sp, #16]
 8002750:	4808      	ldr	r0, [pc, #32]	; (8002774 <siprintf+0x38>)
 8002752:	4909      	ldr	r1, [pc, #36]	; (8002778 <siprintf+0x3c>)
 8002754:	f853 2b04 	ldr.w	r2, [r3], #4
 8002758:	9105      	str	r1, [sp, #20]
 800275a:	6800      	ldr	r0, [r0, #0]
 800275c:	a902      	add	r1, sp, #8
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	f000 f866 	bl	8002830 <_svfiprintf_r>
 8002764:	2200      	movs	r2, #0
 8002766:	9b02      	ldr	r3, [sp, #8]
 8002768:	701a      	strb	r2, [r3, #0]
 800276a:	b01c      	add	sp, #112	; 0x70
 800276c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002770:	b003      	add	sp, #12
 8002772:	4770      	bx	lr
 8002774:	2000000c 	.word	0x2000000c
 8002778:	ffff0208 	.word	0xffff0208

0800277c <__ssputs_r>:
 800277c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002780:	688e      	ldr	r6, [r1, #8]
 8002782:	4682      	mov	sl, r0
 8002784:	429e      	cmp	r6, r3
 8002786:	460c      	mov	r4, r1
 8002788:	4690      	mov	r8, r2
 800278a:	4699      	mov	r9, r3
 800278c:	d837      	bhi.n	80027fe <__ssputs_r+0x82>
 800278e:	898a      	ldrh	r2, [r1, #12]
 8002790:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002794:	d031      	beq.n	80027fa <__ssputs_r+0x7e>
 8002796:	2302      	movs	r3, #2
 8002798:	6825      	ldr	r5, [r4, #0]
 800279a:	6909      	ldr	r1, [r1, #16]
 800279c:	1a6f      	subs	r7, r5, r1
 800279e:	6965      	ldr	r5, [r4, #20]
 80027a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80027a8:	f109 0301 	add.w	r3, r9, #1
 80027ac:	443b      	add	r3, r7
 80027ae:	429d      	cmp	r5, r3
 80027b0:	bf38      	it	cc
 80027b2:	461d      	movcc	r5, r3
 80027b4:	0553      	lsls	r3, r2, #21
 80027b6:	d530      	bpl.n	800281a <__ssputs_r+0x9e>
 80027b8:	4629      	mov	r1, r5
 80027ba:	f000 fb37 	bl	8002e2c <_malloc_r>
 80027be:	4606      	mov	r6, r0
 80027c0:	b950      	cbnz	r0, 80027d8 <__ssputs_r+0x5c>
 80027c2:	230c      	movs	r3, #12
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295
 80027c8:	f8ca 3000 	str.w	r3, [sl]
 80027cc:	89a3      	ldrh	r3, [r4, #12]
 80027ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027d2:	81a3      	strh	r3, [r4, #12]
 80027d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027d8:	463a      	mov	r2, r7
 80027da:	6921      	ldr	r1, [r4, #16]
 80027dc:	f000 fab6 	bl	8002d4c <memcpy>
 80027e0:	89a3      	ldrh	r3, [r4, #12]
 80027e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80027e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ea:	81a3      	strh	r3, [r4, #12]
 80027ec:	6126      	str	r6, [r4, #16]
 80027ee:	443e      	add	r6, r7
 80027f0:	6026      	str	r6, [r4, #0]
 80027f2:	464e      	mov	r6, r9
 80027f4:	6165      	str	r5, [r4, #20]
 80027f6:	1bed      	subs	r5, r5, r7
 80027f8:	60a5      	str	r5, [r4, #8]
 80027fa:	454e      	cmp	r6, r9
 80027fc:	d900      	bls.n	8002800 <__ssputs_r+0x84>
 80027fe:	464e      	mov	r6, r9
 8002800:	4632      	mov	r2, r6
 8002802:	4641      	mov	r1, r8
 8002804:	6820      	ldr	r0, [r4, #0]
 8002806:	f000 faac 	bl	8002d62 <memmove>
 800280a:	68a3      	ldr	r3, [r4, #8]
 800280c:	2000      	movs	r0, #0
 800280e:	1b9b      	subs	r3, r3, r6
 8002810:	60a3      	str	r3, [r4, #8]
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	441e      	add	r6, r3
 8002816:	6026      	str	r6, [r4, #0]
 8002818:	e7dc      	b.n	80027d4 <__ssputs_r+0x58>
 800281a:	462a      	mov	r2, r5
 800281c:	f000 fb60 	bl	8002ee0 <_realloc_r>
 8002820:	4606      	mov	r6, r0
 8002822:	2800      	cmp	r0, #0
 8002824:	d1e2      	bne.n	80027ec <__ssputs_r+0x70>
 8002826:	6921      	ldr	r1, [r4, #16]
 8002828:	4650      	mov	r0, sl
 800282a:	f000 fab3 	bl	8002d94 <_free_r>
 800282e:	e7c8      	b.n	80027c2 <__ssputs_r+0x46>

08002830 <_svfiprintf_r>:
 8002830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002834:	461d      	mov	r5, r3
 8002836:	898b      	ldrh	r3, [r1, #12]
 8002838:	b09d      	sub	sp, #116	; 0x74
 800283a:	061f      	lsls	r7, r3, #24
 800283c:	4680      	mov	r8, r0
 800283e:	460c      	mov	r4, r1
 8002840:	4616      	mov	r6, r2
 8002842:	d50f      	bpl.n	8002864 <_svfiprintf_r+0x34>
 8002844:	690b      	ldr	r3, [r1, #16]
 8002846:	b96b      	cbnz	r3, 8002864 <_svfiprintf_r+0x34>
 8002848:	2140      	movs	r1, #64	; 0x40
 800284a:	f000 faef 	bl	8002e2c <_malloc_r>
 800284e:	6020      	str	r0, [r4, #0]
 8002850:	6120      	str	r0, [r4, #16]
 8002852:	b928      	cbnz	r0, 8002860 <_svfiprintf_r+0x30>
 8002854:	230c      	movs	r3, #12
 8002856:	f8c8 3000 	str.w	r3, [r8]
 800285a:	f04f 30ff 	mov.w	r0, #4294967295
 800285e:	e0c8      	b.n	80029f2 <_svfiprintf_r+0x1c2>
 8002860:	2340      	movs	r3, #64	; 0x40
 8002862:	6163      	str	r3, [r4, #20]
 8002864:	2300      	movs	r3, #0
 8002866:	9309      	str	r3, [sp, #36]	; 0x24
 8002868:	2320      	movs	r3, #32
 800286a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800286e:	2330      	movs	r3, #48	; 0x30
 8002870:	f04f 0b01 	mov.w	fp, #1
 8002874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002878:	9503      	str	r5, [sp, #12]
 800287a:	4637      	mov	r7, r6
 800287c:	463d      	mov	r5, r7
 800287e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002882:	b10b      	cbz	r3, 8002888 <_svfiprintf_r+0x58>
 8002884:	2b25      	cmp	r3, #37	; 0x25
 8002886:	d13e      	bne.n	8002906 <_svfiprintf_r+0xd6>
 8002888:	ebb7 0a06 	subs.w	sl, r7, r6
 800288c:	d00b      	beq.n	80028a6 <_svfiprintf_r+0x76>
 800288e:	4653      	mov	r3, sl
 8002890:	4632      	mov	r2, r6
 8002892:	4621      	mov	r1, r4
 8002894:	4640      	mov	r0, r8
 8002896:	f7ff ff71 	bl	800277c <__ssputs_r>
 800289a:	3001      	adds	r0, #1
 800289c:	f000 80a4 	beq.w	80029e8 <_svfiprintf_r+0x1b8>
 80028a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028a2:	4453      	add	r3, sl
 80028a4:	9309      	str	r3, [sp, #36]	; 0x24
 80028a6:	783b      	ldrb	r3, [r7, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 809d 	beq.w	80029e8 <_svfiprintf_r+0x1b8>
 80028ae:	2300      	movs	r3, #0
 80028b0:	f04f 32ff 	mov.w	r2, #4294967295
 80028b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028b8:	9304      	str	r3, [sp, #16]
 80028ba:	9307      	str	r3, [sp, #28]
 80028bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028c0:	931a      	str	r3, [sp, #104]	; 0x68
 80028c2:	462f      	mov	r7, r5
 80028c4:	2205      	movs	r2, #5
 80028c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80028ca:	4850      	ldr	r0, [pc, #320]	; (8002a0c <_svfiprintf_r+0x1dc>)
 80028cc:	f000 fa30 	bl	8002d30 <memchr>
 80028d0:	9b04      	ldr	r3, [sp, #16]
 80028d2:	b9d0      	cbnz	r0, 800290a <_svfiprintf_r+0xda>
 80028d4:	06d9      	lsls	r1, r3, #27
 80028d6:	bf44      	itt	mi
 80028d8:	2220      	movmi	r2, #32
 80028da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80028de:	071a      	lsls	r2, r3, #28
 80028e0:	bf44      	itt	mi
 80028e2:	222b      	movmi	r2, #43	; 0x2b
 80028e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80028e8:	782a      	ldrb	r2, [r5, #0]
 80028ea:	2a2a      	cmp	r2, #42	; 0x2a
 80028ec:	d015      	beq.n	800291a <_svfiprintf_r+0xea>
 80028ee:	462f      	mov	r7, r5
 80028f0:	2000      	movs	r0, #0
 80028f2:	250a      	movs	r5, #10
 80028f4:	9a07      	ldr	r2, [sp, #28]
 80028f6:	4639      	mov	r1, r7
 80028f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028fc:	3b30      	subs	r3, #48	; 0x30
 80028fe:	2b09      	cmp	r3, #9
 8002900:	d94d      	bls.n	800299e <_svfiprintf_r+0x16e>
 8002902:	b1b8      	cbz	r0, 8002934 <_svfiprintf_r+0x104>
 8002904:	e00f      	b.n	8002926 <_svfiprintf_r+0xf6>
 8002906:	462f      	mov	r7, r5
 8002908:	e7b8      	b.n	800287c <_svfiprintf_r+0x4c>
 800290a:	4a40      	ldr	r2, [pc, #256]	; (8002a0c <_svfiprintf_r+0x1dc>)
 800290c:	463d      	mov	r5, r7
 800290e:	1a80      	subs	r0, r0, r2
 8002910:	fa0b f000 	lsl.w	r0, fp, r0
 8002914:	4318      	orrs	r0, r3
 8002916:	9004      	str	r0, [sp, #16]
 8002918:	e7d3      	b.n	80028c2 <_svfiprintf_r+0x92>
 800291a:	9a03      	ldr	r2, [sp, #12]
 800291c:	1d11      	adds	r1, r2, #4
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	9103      	str	r1, [sp, #12]
 8002922:	2a00      	cmp	r2, #0
 8002924:	db01      	blt.n	800292a <_svfiprintf_r+0xfa>
 8002926:	9207      	str	r2, [sp, #28]
 8002928:	e004      	b.n	8002934 <_svfiprintf_r+0x104>
 800292a:	4252      	negs	r2, r2
 800292c:	f043 0302 	orr.w	r3, r3, #2
 8002930:	9207      	str	r2, [sp, #28]
 8002932:	9304      	str	r3, [sp, #16]
 8002934:	783b      	ldrb	r3, [r7, #0]
 8002936:	2b2e      	cmp	r3, #46	; 0x2e
 8002938:	d10c      	bne.n	8002954 <_svfiprintf_r+0x124>
 800293a:	787b      	ldrb	r3, [r7, #1]
 800293c:	2b2a      	cmp	r3, #42	; 0x2a
 800293e:	d133      	bne.n	80029a8 <_svfiprintf_r+0x178>
 8002940:	9b03      	ldr	r3, [sp, #12]
 8002942:	3702      	adds	r7, #2
 8002944:	1d1a      	adds	r2, r3, #4
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	9203      	str	r2, [sp, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	bfb8      	it	lt
 800294e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002952:	9305      	str	r3, [sp, #20]
 8002954:	4d2e      	ldr	r5, [pc, #184]	; (8002a10 <_svfiprintf_r+0x1e0>)
 8002956:	2203      	movs	r2, #3
 8002958:	7839      	ldrb	r1, [r7, #0]
 800295a:	4628      	mov	r0, r5
 800295c:	f000 f9e8 	bl	8002d30 <memchr>
 8002960:	b138      	cbz	r0, 8002972 <_svfiprintf_r+0x142>
 8002962:	2340      	movs	r3, #64	; 0x40
 8002964:	1b40      	subs	r0, r0, r5
 8002966:	fa03 f000 	lsl.w	r0, r3, r0
 800296a:	9b04      	ldr	r3, [sp, #16]
 800296c:	3701      	adds	r7, #1
 800296e:	4303      	orrs	r3, r0
 8002970:	9304      	str	r3, [sp, #16]
 8002972:	7839      	ldrb	r1, [r7, #0]
 8002974:	2206      	movs	r2, #6
 8002976:	4827      	ldr	r0, [pc, #156]	; (8002a14 <_svfiprintf_r+0x1e4>)
 8002978:	1c7e      	adds	r6, r7, #1
 800297a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800297e:	f000 f9d7 	bl	8002d30 <memchr>
 8002982:	2800      	cmp	r0, #0
 8002984:	d038      	beq.n	80029f8 <_svfiprintf_r+0x1c8>
 8002986:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <_svfiprintf_r+0x1e8>)
 8002988:	bb13      	cbnz	r3, 80029d0 <_svfiprintf_r+0x1a0>
 800298a:	9b03      	ldr	r3, [sp, #12]
 800298c:	3307      	adds	r3, #7
 800298e:	f023 0307 	bic.w	r3, r3, #7
 8002992:	3308      	adds	r3, #8
 8002994:	9303      	str	r3, [sp, #12]
 8002996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002998:	444b      	add	r3, r9
 800299a:	9309      	str	r3, [sp, #36]	; 0x24
 800299c:	e76d      	b.n	800287a <_svfiprintf_r+0x4a>
 800299e:	fb05 3202 	mla	r2, r5, r2, r3
 80029a2:	2001      	movs	r0, #1
 80029a4:	460f      	mov	r7, r1
 80029a6:	e7a6      	b.n	80028f6 <_svfiprintf_r+0xc6>
 80029a8:	2300      	movs	r3, #0
 80029aa:	250a      	movs	r5, #10
 80029ac:	4619      	mov	r1, r3
 80029ae:	3701      	adds	r7, #1
 80029b0:	9305      	str	r3, [sp, #20]
 80029b2:	4638      	mov	r0, r7
 80029b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029b8:	3a30      	subs	r2, #48	; 0x30
 80029ba:	2a09      	cmp	r2, #9
 80029bc:	d903      	bls.n	80029c6 <_svfiprintf_r+0x196>
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0c8      	beq.n	8002954 <_svfiprintf_r+0x124>
 80029c2:	9105      	str	r1, [sp, #20]
 80029c4:	e7c6      	b.n	8002954 <_svfiprintf_r+0x124>
 80029c6:	fb05 2101 	mla	r1, r5, r1, r2
 80029ca:	2301      	movs	r3, #1
 80029cc:	4607      	mov	r7, r0
 80029ce:	e7f0      	b.n	80029b2 <_svfiprintf_r+0x182>
 80029d0:	ab03      	add	r3, sp, #12
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	4622      	mov	r2, r4
 80029d6:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <_svfiprintf_r+0x1ec>)
 80029d8:	a904      	add	r1, sp, #16
 80029da:	4640      	mov	r0, r8
 80029dc:	f3af 8000 	nop.w
 80029e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80029e4:	4681      	mov	r9, r0
 80029e6:	d1d6      	bne.n	8002996 <_svfiprintf_r+0x166>
 80029e8:	89a3      	ldrh	r3, [r4, #12]
 80029ea:	065b      	lsls	r3, r3, #25
 80029ec:	f53f af35 	bmi.w	800285a <_svfiprintf_r+0x2a>
 80029f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029f2:	b01d      	add	sp, #116	; 0x74
 80029f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029f8:	ab03      	add	r3, sp, #12
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	4622      	mov	r2, r4
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <_svfiprintf_r+0x1ec>)
 8002a00:	a904      	add	r1, sp, #16
 8002a02:	4640      	mov	r0, r8
 8002a04:	f000 f882 	bl	8002b0c <_printf_i>
 8002a08:	e7ea      	b.n	80029e0 <_svfiprintf_r+0x1b0>
 8002a0a:	bf00      	nop
 8002a0c:	08002fa8 	.word	0x08002fa8
 8002a10:	08002fae 	.word	0x08002fae
 8002a14:	08002fb2 	.word	0x08002fb2
 8002a18:	00000000 	.word	0x00000000
 8002a1c:	0800277d 	.word	0x0800277d

08002a20 <_printf_common>:
 8002a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a24:	4691      	mov	r9, r2
 8002a26:	461f      	mov	r7, r3
 8002a28:	688a      	ldr	r2, [r1, #8]
 8002a2a:	690b      	ldr	r3, [r1, #16]
 8002a2c:	4606      	mov	r6, r0
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	bfb8      	it	lt
 8002a32:	4613      	movlt	r3, r2
 8002a34:	f8c9 3000 	str.w	r3, [r9]
 8002a38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a3c:	460c      	mov	r4, r1
 8002a3e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a42:	b112      	cbz	r2, 8002a4a <_printf_common+0x2a>
 8002a44:	3301      	adds	r3, #1
 8002a46:	f8c9 3000 	str.w	r3, [r9]
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	0699      	lsls	r1, r3, #26
 8002a4e:	bf42      	ittt	mi
 8002a50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a54:	3302      	addmi	r3, #2
 8002a56:	f8c9 3000 	strmi.w	r3, [r9]
 8002a5a:	6825      	ldr	r5, [r4, #0]
 8002a5c:	f015 0506 	ands.w	r5, r5, #6
 8002a60:	d107      	bne.n	8002a72 <_printf_common+0x52>
 8002a62:	f104 0a19 	add.w	sl, r4, #25
 8002a66:	68e3      	ldr	r3, [r4, #12]
 8002a68:	f8d9 2000 	ldr.w	r2, [r9]
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	42ab      	cmp	r3, r5
 8002a70:	dc29      	bgt.n	8002ac6 <_printf_common+0xa6>
 8002a72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002a76:	6822      	ldr	r2, [r4, #0]
 8002a78:	3300      	adds	r3, #0
 8002a7a:	bf18      	it	ne
 8002a7c:	2301      	movne	r3, #1
 8002a7e:	0692      	lsls	r2, r2, #26
 8002a80:	d42e      	bmi.n	8002ae0 <_printf_common+0xc0>
 8002a82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a86:	4639      	mov	r1, r7
 8002a88:	4630      	mov	r0, r6
 8002a8a:	47c0      	blx	r8
 8002a8c:	3001      	adds	r0, #1
 8002a8e:	d021      	beq.n	8002ad4 <_printf_common+0xb4>
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	68e5      	ldr	r5, [r4, #12]
 8002a94:	f003 0306 	and.w	r3, r3, #6
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	bf18      	it	ne
 8002a9c:	2500      	movne	r5, #0
 8002a9e:	f8d9 2000 	ldr.w	r2, [r9]
 8002aa2:	f04f 0900 	mov.w	r9, #0
 8002aa6:	bf08      	it	eq
 8002aa8:	1aad      	subeq	r5, r5, r2
 8002aaa:	68a3      	ldr	r3, [r4, #8]
 8002aac:	6922      	ldr	r2, [r4, #16]
 8002aae:	bf08      	it	eq
 8002ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	bfc4      	itt	gt
 8002ab8:	1a9b      	subgt	r3, r3, r2
 8002aba:	18ed      	addgt	r5, r5, r3
 8002abc:	341a      	adds	r4, #26
 8002abe:	454d      	cmp	r5, r9
 8002ac0:	d11a      	bne.n	8002af8 <_printf_common+0xd8>
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	e008      	b.n	8002ad8 <_printf_common+0xb8>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	4652      	mov	r2, sl
 8002aca:	4639      	mov	r1, r7
 8002acc:	4630      	mov	r0, r6
 8002ace:	47c0      	blx	r8
 8002ad0:	3001      	adds	r0, #1
 8002ad2:	d103      	bne.n	8002adc <_printf_common+0xbc>
 8002ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002adc:	3501      	adds	r5, #1
 8002ade:	e7c2      	b.n	8002a66 <_printf_common+0x46>
 8002ae0:	2030      	movs	r0, #48	; 0x30
 8002ae2:	18e1      	adds	r1, r4, r3
 8002ae4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002aee:	4422      	add	r2, r4
 8002af0:	3302      	adds	r3, #2
 8002af2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002af6:	e7c4      	b.n	8002a82 <_printf_common+0x62>
 8002af8:	2301      	movs	r3, #1
 8002afa:	4622      	mov	r2, r4
 8002afc:	4639      	mov	r1, r7
 8002afe:	4630      	mov	r0, r6
 8002b00:	47c0      	blx	r8
 8002b02:	3001      	adds	r0, #1
 8002b04:	d0e6      	beq.n	8002ad4 <_printf_common+0xb4>
 8002b06:	f109 0901 	add.w	r9, r9, #1
 8002b0a:	e7d8      	b.n	8002abe <_printf_common+0x9e>

08002b0c <_printf_i>:
 8002b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002b14:	460c      	mov	r4, r1
 8002b16:	7e09      	ldrb	r1, [r1, #24]
 8002b18:	b085      	sub	sp, #20
 8002b1a:	296e      	cmp	r1, #110	; 0x6e
 8002b1c:	4617      	mov	r7, r2
 8002b1e:	4606      	mov	r6, r0
 8002b20:	4698      	mov	r8, r3
 8002b22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b24:	f000 80b3 	beq.w	8002c8e <_printf_i+0x182>
 8002b28:	d822      	bhi.n	8002b70 <_printf_i+0x64>
 8002b2a:	2963      	cmp	r1, #99	; 0x63
 8002b2c:	d036      	beq.n	8002b9c <_printf_i+0x90>
 8002b2e:	d80a      	bhi.n	8002b46 <_printf_i+0x3a>
 8002b30:	2900      	cmp	r1, #0
 8002b32:	f000 80b9 	beq.w	8002ca8 <_printf_i+0x19c>
 8002b36:	2958      	cmp	r1, #88	; 0x58
 8002b38:	f000 8083 	beq.w	8002c42 <_printf_i+0x136>
 8002b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002b44:	e032      	b.n	8002bac <_printf_i+0xa0>
 8002b46:	2964      	cmp	r1, #100	; 0x64
 8002b48:	d001      	beq.n	8002b4e <_printf_i+0x42>
 8002b4a:	2969      	cmp	r1, #105	; 0x69
 8002b4c:	d1f6      	bne.n	8002b3c <_printf_i+0x30>
 8002b4e:	6820      	ldr	r0, [r4, #0]
 8002b50:	6813      	ldr	r3, [r2, #0]
 8002b52:	0605      	lsls	r5, r0, #24
 8002b54:	f103 0104 	add.w	r1, r3, #4
 8002b58:	d52a      	bpl.n	8002bb0 <_printf_i+0xa4>
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6011      	str	r1, [r2, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	da03      	bge.n	8002b6a <_printf_i+0x5e>
 8002b62:	222d      	movs	r2, #45	; 0x2d
 8002b64:	425b      	negs	r3, r3
 8002b66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002b6a:	486f      	ldr	r0, [pc, #444]	; (8002d28 <_printf_i+0x21c>)
 8002b6c:	220a      	movs	r2, #10
 8002b6e:	e039      	b.n	8002be4 <_printf_i+0xd8>
 8002b70:	2973      	cmp	r1, #115	; 0x73
 8002b72:	f000 809d 	beq.w	8002cb0 <_printf_i+0x1a4>
 8002b76:	d808      	bhi.n	8002b8a <_printf_i+0x7e>
 8002b78:	296f      	cmp	r1, #111	; 0x6f
 8002b7a:	d020      	beq.n	8002bbe <_printf_i+0xb2>
 8002b7c:	2970      	cmp	r1, #112	; 0x70
 8002b7e:	d1dd      	bne.n	8002b3c <_printf_i+0x30>
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	f043 0320 	orr.w	r3, r3, #32
 8002b86:	6023      	str	r3, [r4, #0]
 8002b88:	e003      	b.n	8002b92 <_printf_i+0x86>
 8002b8a:	2975      	cmp	r1, #117	; 0x75
 8002b8c:	d017      	beq.n	8002bbe <_printf_i+0xb2>
 8002b8e:	2978      	cmp	r1, #120	; 0x78
 8002b90:	d1d4      	bne.n	8002b3c <_printf_i+0x30>
 8002b92:	2378      	movs	r3, #120	; 0x78
 8002b94:	4865      	ldr	r0, [pc, #404]	; (8002d2c <_printf_i+0x220>)
 8002b96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b9a:	e055      	b.n	8002c48 <_printf_i+0x13c>
 8002b9c:	6813      	ldr	r3, [r2, #0]
 8002b9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ba2:	1d19      	adds	r1, r3, #4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6011      	str	r1, [r2, #0]
 8002ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bac:	2301      	movs	r3, #1
 8002bae:	e08c      	b.n	8002cca <_printf_i+0x1be>
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bb6:	6011      	str	r1, [r2, #0]
 8002bb8:	bf18      	it	ne
 8002bba:	b21b      	sxthne	r3, r3
 8002bbc:	e7cf      	b.n	8002b5e <_printf_i+0x52>
 8002bbe:	6813      	ldr	r3, [r2, #0]
 8002bc0:	6825      	ldr	r5, [r4, #0]
 8002bc2:	1d18      	adds	r0, r3, #4
 8002bc4:	6010      	str	r0, [r2, #0]
 8002bc6:	0628      	lsls	r0, r5, #24
 8002bc8:	d501      	bpl.n	8002bce <_printf_i+0xc2>
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	e002      	b.n	8002bd4 <_printf_i+0xc8>
 8002bce:	0668      	lsls	r0, r5, #25
 8002bd0:	d5fb      	bpl.n	8002bca <_printf_i+0xbe>
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	296f      	cmp	r1, #111	; 0x6f
 8002bd6:	bf14      	ite	ne
 8002bd8:	220a      	movne	r2, #10
 8002bda:	2208      	moveq	r2, #8
 8002bdc:	4852      	ldr	r0, [pc, #328]	; (8002d28 <_printf_i+0x21c>)
 8002bde:	2100      	movs	r1, #0
 8002be0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002be4:	6865      	ldr	r5, [r4, #4]
 8002be6:	2d00      	cmp	r5, #0
 8002be8:	60a5      	str	r5, [r4, #8]
 8002bea:	f2c0 8095 	blt.w	8002d18 <_printf_i+0x20c>
 8002bee:	6821      	ldr	r1, [r4, #0]
 8002bf0:	f021 0104 	bic.w	r1, r1, #4
 8002bf4:	6021      	str	r1, [r4, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d13d      	bne.n	8002c76 <_printf_i+0x16a>
 8002bfa:	2d00      	cmp	r5, #0
 8002bfc:	f040 808e 	bne.w	8002d1c <_printf_i+0x210>
 8002c00:	4665      	mov	r5, ip
 8002c02:	2a08      	cmp	r2, #8
 8002c04:	d10b      	bne.n	8002c1e <_printf_i+0x112>
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	07db      	lsls	r3, r3, #31
 8002c0a:	d508      	bpl.n	8002c1e <_printf_i+0x112>
 8002c0c:	6923      	ldr	r3, [r4, #16]
 8002c0e:	6862      	ldr	r2, [r4, #4]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	bfde      	ittt	le
 8002c14:	2330      	movle	r3, #48	; 0x30
 8002c16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c1e:	ebac 0305 	sub.w	r3, ip, r5
 8002c22:	6123      	str	r3, [r4, #16]
 8002c24:	f8cd 8000 	str.w	r8, [sp]
 8002c28:	463b      	mov	r3, r7
 8002c2a:	aa03      	add	r2, sp, #12
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	4630      	mov	r0, r6
 8002c30:	f7ff fef6 	bl	8002a20 <_printf_common>
 8002c34:	3001      	adds	r0, #1
 8002c36:	d14d      	bne.n	8002cd4 <_printf_i+0x1c8>
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3c:	b005      	add	sp, #20
 8002c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c42:	4839      	ldr	r0, [pc, #228]	; (8002d28 <_printf_i+0x21c>)
 8002c44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002c48:	6813      	ldr	r3, [r2, #0]
 8002c4a:	6821      	ldr	r1, [r4, #0]
 8002c4c:	1d1d      	adds	r5, r3, #4
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6015      	str	r5, [r2, #0]
 8002c52:	060a      	lsls	r2, r1, #24
 8002c54:	d50b      	bpl.n	8002c6e <_printf_i+0x162>
 8002c56:	07ca      	lsls	r2, r1, #31
 8002c58:	bf44      	itt	mi
 8002c5a:	f041 0120 	orrmi.w	r1, r1, #32
 8002c5e:	6021      	strmi	r1, [r4, #0]
 8002c60:	b91b      	cbnz	r3, 8002c6a <_printf_i+0x15e>
 8002c62:	6822      	ldr	r2, [r4, #0]
 8002c64:	f022 0220 	bic.w	r2, r2, #32
 8002c68:	6022      	str	r2, [r4, #0]
 8002c6a:	2210      	movs	r2, #16
 8002c6c:	e7b7      	b.n	8002bde <_printf_i+0xd2>
 8002c6e:	064d      	lsls	r5, r1, #25
 8002c70:	bf48      	it	mi
 8002c72:	b29b      	uxthmi	r3, r3
 8002c74:	e7ef      	b.n	8002c56 <_printf_i+0x14a>
 8002c76:	4665      	mov	r5, ip
 8002c78:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c7c:	fb02 3311 	mls	r3, r2, r1, r3
 8002c80:	5cc3      	ldrb	r3, [r0, r3]
 8002c82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002c86:	460b      	mov	r3, r1
 8002c88:	2900      	cmp	r1, #0
 8002c8a:	d1f5      	bne.n	8002c78 <_printf_i+0x16c>
 8002c8c:	e7b9      	b.n	8002c02 <_printf_i+0xf6>
 8002c8e:	6813      	ldr	r3, [r2, #0]
 8002c90:	6825      	ldr	r5, [r4, #0]
 8002c92:	1d18      	adds	r0, r3, #4
 8002c94:	6961      	ldr	r1, [r4, #20]
 8002c96:	6010      	str	r0, [r2, #0]
 8002c98:	0628      	lsls	r0, r5, #24
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	d501      	bpl.n	8002ca2 <_printf_i+0x196>
 8002c9e:	6019      	str	r1, [r3, #0]
 8002ca0:	e002      	b.n	8002ca8 <_printf_i+0x19c>
 8002ca2:	066a      	lsls	r2, r5, #25
 8002ca4:	d5fb      	bpl.n	8002c9e <_printf_i+0x192>
 8002ca6:	8019      	strh	r1, [r3, #0]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	4665      	mov	r5, ip
 8002cac:	6123      	str	r3, [r4, #16]
 8002cae:	e7b9      	b.n	8002c24 <_printf_i+0x118>
 8002cb0:	6813      	ldr	r3, [r2, #0]
 8002cb2:	1d19      	adds	r1, r3, #4
 8002cb4:	6011      	str	r1, [r2, #0]
 8002cb6:	681d      	ldr	r5, [r3, #0]
 8002cb8:	6862      	ldr	r2, [r4, #4]
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	f000 f837 	bl	8002d30 <memchr>
 8002cc2:	b108      	cbz	r0, 8002cc8 <_printf_i+0x1bc>
 8002cc4:	1b40      	subs	r0, r0, r5
 8002cc6:	6060      	str	r0, [r4, #4]
 8002cc8:	6863      	ldr	r3, [r4, #4]
 8002cca:	6123      	str	r3, [r4, #16]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cd2:	e7a7      	b.n	8002c24 <_printf_i+0x118>
 8002cd4:	6923      	ldr	r3, [r4, #16]
 8002cd6:	462a      	mov	r2, r5
 8002cd8:	4639      	mov	r1, r7
 8002cda:	4630      	mov	r0, r6
 8002cdc:	47c0      	blx	r8
 8002cde:	3001      	adds	r0, #1
 8002ce0:	d0aa      	beq.n	8002c38 <_printf_i+0x12c>
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	079b      	lsls	r3, r3, #30
 8002ce6:	d413      	bmi.n	8002d10 <_printf_i+0x204>
 8002ce8:	68e0      	ldr	r0, [r4, #12]
 8002cea:	9b03      	ldr	r3, [sp, #12]
 8002cec:	4298      	cmp	r0, r3
 8002cee:	bfb8      	it	lt
 8002cf0:	4618      	movlt	r0, r3
 8002cf2:	e7a3      	b.n	8002c3c <_printf_i+0x130>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	464a      	mov	r2, r9
 8002cf8:	4639      	mov	r1, r7
 8002cfa:	4630      	mov	r0, r6
 8002cfc:	47c0      	blx	r8
 8002cfe:	3001      	adds	r0, #1
 8002d00:	d09a      	beq.n	8002c38 <_printf_i+0x12c>
 8002d02:	3501      	adds	r5, #1
 8002d04:	68e3      	ldr	r3, [r4, #12]
 8002d06:	9a03      	ldr	r2, [sp, #12]
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	42ab      	cmp	r3, r5
 8002d0c:	dcf2      	bgt.n	8002cf4 <_printf_i+0x1e8>
 8002d0e:	e7eb      	b.n	8002ce8 <_printf_i+0x1dc>
 8002d10:	2500      	movs	r5, #0
 8002d12:	f104 0919 	add.w	r9, r4, #25
 8002d16:	e7f5      	b.n	8002d04 <_printf_i+0x1f8>
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ac      	bne.n	8002c76 <_printf_i+0x16a>
 8002d1c:	7803      	ldrb	r3, [r0, #0]
 8002d1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d26:	e76c      	b.n	8002c02 <_printf_i+0xf6>
 8002d28:	08002fb9 	.word	0x08002fb9
 8002d2c:	08002fca 	.word	0x08002fca

08002d30 <memchr>:
 8002d30:	b510      	push	{r4, lr}
 8002d32:	b2c9      	uxtb	r1, r1
 8002d34:	4402      	add	r2, r0
 8002d36:	4290      	cmp	r0, r2
 8002d38:	4603      	mov	r3, r0
 8002d3a:	d101      	bne.n	8002d40 <memchr+0x10>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e003      	b.n	8002d48 <memchr+0x18>
 8002d40:	781c      	ldrb	r4, [r3, #0]
 8002d42:	3001      	adds	r0, #1
 8002d44:	428c      	cmp	r4, r1
 8002d46:	d1f6      	bne.n	8002d36 <memchr+0x6>
 8002d48:	4618      	mov	r0, r3
 8002d4a:	bd10      	pop	{r4, pc}

08002d4c <memcpy>:
 8002d4c:	b510      	push	{r4, lr}
 8002d4e:	1e43      	subs	r3, r0, #1
 8002d50:	440a      	add	r2, r1
 8002d52:	4291      	cmp	r1, r2
 8002d54:	d100      	bne.n	8002d58 <memcpy+0xc>
 8002d56:	bd10      	pop	{r4, pc}
 8002d58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d60:	e7f7      	b.n	8002d52 <memcpy+0x6>

08002d62 <memmove>:
 8002d62:	4288      	cmp	r0, r1
 8002d64:	b510      	push	{r4, lr}
 8002d66:	eb01 0302 	add.w	r3, r1, r2
 8002d6a:	d807      	bhi.n	8002d7c <memmove+0x1a>
 8002d6c:	1e42      	subs	r2, r0, #1
 8002d6e:	4299      	cmp	r1, r3
 8002d70:	d00a      	beq.n	8002d88 <memmove+0x26>
 8002d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d76:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002d7a:	e7f8      	b.n	8002d6e <memmove+0xc>
 8002d7c:	4283      	cmp	r3, r0
 8002d7e:	d9f5      	bls.n	8002d6c <memmove+0xa>
 8002d80:	1881      	adds	r1, r0, r2
 8002d82:	1ad2      	subs	r2, r2, r3
 8002d84:	42d3      	cmn	r3, r2
 8002d86:	d100      	bne.n	8002d8a <memmove+0x28>
 8002d88:	bd10      	pop	{r4, pc}
 8002d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d8e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002d92:	e7f7      	b.n	8002d84 <memmove+0x22>

08002d94 <_free_r>:
 8002d94:	b538      	push	{r3, r4, r5, lr}
 8002d96:	4605      	mov	r5, r0
 8002d98:	2900      	cmp	r1, #0
 8002d9a:	d043      	beq.n	8002e24 <_free_r+0x90>
 8002d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002da0:	1f0c      	subs	r4, r1, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	bfb8      	it	lt
 8002da6:	18e4      	addlt	r4, r4, r3
 8002da8:	f000 f8d0 	bl	8002f4c <__malloc_lock>
 8002dac:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <_free_r+0x94>)
 8002dae:	6813      	ldr	r3, [r2, #0]
 8002db0:	4610      	mov	r0, r2
 8002db2:	b933      	cbnz	r3, 8002dc2 <_free_r+0x2e>
 8002db4:	6063      	str	r3, [r4, #4]
 8002db6:	6014      	str	r4, [r2, #0]
 8002db8:	4628      	mov	r0, r5
 8002dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dbe:	f000 b8c6 	b.w	8002f4e <__malloc_unlock>
 8002dc2:	42a3      	cmp	r3, r4
 8002dc4:	d90b      	bls.n	8002dde <_free_r+0x4a>
 8002dc6:	6821      	ldr	r1, [r4, #0]
 8002dc8:	1862      	adds	r2, r4, r1
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	bf01      	itttt	eq
 8002dce:	681a      	ldreq	r2, [r3, #0]
 8002dd0:	685b      	ldreq	r3, [r3, #4]
 8002dd2:	1852      	addeq	r2, r2, r1
 8002dd4:	6022      	streq	r2, [r4, #0]
 8002dd6:	6063      	str	r3, [r4, #4]
 8002dd8:	6004      	str	r4, [r0, #0]
 8002dda:	e7ed      	b.n	8002db8 <_free_r+0x24>
 8002ddc:	4613      	mov	r3, r2
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	b10a      	cbz	r2, 8002de6 <_free_r+0x52>
 8002de2:	42a2      	cmp	r2, r4
 8002de4:	d9fa      	bls.n	8002ddc <_free_r+0x48>
 8002de6:	6819      	ldr	r1, [r3, #0]
 8002de8:	1858      	adds	r0, r3, r1
 8002dea:	42a0      	cmp	r0, r4
 8002dec:	d10b      	bne.n	8002e06 <_free_r+0x72>
 8002dee:	6820      	ldr	r0, [r4, #0]
 8002df0:	4401      	add	r1, r0
 8002df2:	1858      	adds	r0, r3, r1
 8002df4:	4282      	cmp	r2, r0
 8002df6:	6019      	str	r1, [r3, #0]
 8002df8:	d1de      	bne.n	8002db8 <_free_r+0x24>
 8002dfa:	6810      	ldr	r0, [r2, #0]
 8002dfc:	6852      	ldr	r2, [r2, #4]
 8002dfe:	4401      	add	r1, r0
 8002e00:	6019      	str	r1, [r3, #0]
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	e7d8      	b.n	8002db8 <_free_r+0x24>
 8002e06:	d902      	bls.n	8002e0e <_free_r+0x7a>
 8002e08:	230c      	movs	r3, #12
 8002e0a:	602b      	str	r3, [r5, #0]
 8002e0c:	e7d4      	b.n	8002db8 <_free_r+0x24>
 8002e0e:	6820      	ldr	r0, [r4, #0]
 8002e10:	1821      	adds	r1, r4, r0
 8002e12:	428a      	cmp	r2, r1
 8002e14:	bf01      	itttt	eq
 8002e16:	6811      	ldreq	r1, [r2, #0]
 8002e18:	6852      	ldreq	r2, [r2, #4]
 8002e1a:	1809      	addeq	r1, r1, r0
 8002e1c:	6021      	streq	r1, [r4, #0]
 8002e1e:	6062      	str	r2, [r4, #4]
 8002e20:	605c      	str	r4, [r3, #4]
 8002e22:	e7c9      	b.n	8002db8 <_free_r+0x24>
 8002e24:	bd38      	pop	{r3, r4, r5, pc}
 8002e26:	bf00      	nop
 8002e28:	20000090 	.word	0x20000090

08002e2c <_malloc_r>:
 8002e2c:	b570      	push	{r4, r5, r6, lr}
 8002e2e:	1ccd      	adds	r5, r1, #3
 8002e30:	f025 0503 	bic.w	r5, r5, #3
 8002e34:	3508      	adds	r5, #8
 8002e36:	2d0c      	cmp	r5, #12
 8002e38:	bf38      	it	cc
 8002e3a:	250c      	movcc	r5, #12
 8002e3c:	2d00      	cmp	r5, #0
 8002e3e:	4606      	mov	r6, r0
 8002e40:	db01      	blt.n	8002e46 <_malloc_r+0x1a>
 8002e42:	42a9      	cmp	r1, r5
 8002e44:	d903      	bls.n	8002e4e <_malloc_r+0x22>
 8002e46:	230c      	movs	r3, #12
 8002e48:	6033      	str	r3, [r6, #0]
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	bd70      	pop	{r4, r5, r6, pc}
 8002e4e:	f000 f87d 	bl	8002f4c <__malloc_lock>
 8002e52:	4a21      	ldr	r2, [pc, #132]	; (8002ed8 <_malloc_r+0xac>)
 8002e54:	6814      	ldr	r4, [r2, #0]
 8002e56:	4621      	mov	r1, r4
 8002e58:	b991      	cbnz	r1, 8002e80 <_malloc_r+0x54>
 8002e5a:	4c20      	ldr	r4, [pc, #128]	; (8002edc <_malloc_r+0xb0>)
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	b91b      	cbnz	r3, 8002e68 <_malloc_r+0x3c>
 8002e60:	4630      	mov	r0, r6
 8002e62:	f000 f863 	bl	8002f2c <_sbrk_r>
 8002e66:	6020      	str	r0, [r4, #0]
 8002e68:	4629      	mov	r1, r5
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	f000 f85e 	bl	8002f2c <_sbrk_r>
 8002e70:	1c43      	adds	r3, r0, #1
 8002e72:	d124      	bne.n	8002ebe <_malloc_r+0x92>
 8002e74:	230c      	movs	r3, #12
 8002e76:	4630      	mov	r0, r6
 8002e78:	6033      	str	r3, [r6, #0]
 8002e7a:	f000 f868 	bl	8002f4e <__malloc_unlock>
 8002e7e:	e7e4      	b.n	8002e4a <_malloc_r+0x1e>
 8002e80:	680b      	ldr	r3, [r1, #0]
 8002e82:	1b5b      	subs	r3, r3, r5
 8002e84:	d418      	bmi.n	8002eb8 <_malloc_r+0x8c>
 8002e86:	2b0b      	cmp	r3, #11
 8002e88:	d90f      	bls.n	8002eaa <_malloc_r+0x7e>
 8002e8a:	600b      	str	r3, [r1, #0]
 8002e8c:	18cc      	adds	r4, r1, r3
 8002e8e:	50cd      	str	r5, [r1, r3]
 8002e90:	4630      	mov	r0, r6
 8002e92:	f000 f85c 	bl	8002f4e <__malloc_unlock>
 8002e96:	f104 000b 	add.w	r0, r4, #11
 8002e9a:	1d23      	adds	r3, r4, #4
 8002e9c:	f020 0007 	bic.w	r0, r0, #7
 8002ea0:	1ac3      	subs	r3, r0, r3
 8002ea2:	d0d3      	beq.n	8002e4c <_malloc_r+0x20>
 8002ea4:	425a      	negs	r2, r3
 8002ea6:	50e2      	str	r2, [r4, r3]
 8002ea8:	e7d0      	b.n	8002e4c <_malloc_r+0x20>
 8002eaa:	684b      	ldr	r3, [r1, #4]
 8002eac:	428c      	cmp	r4, r1
 8002eae:	bf16      	itet	ne
 8002eb0:	6063      	strne	r3, [r4, #4]
 8002eb2:	6013      	streq	r3, [r2, #0]
 8002eb4:	460c      	movne	r4, r1
 8002eb6:	e7eb      	b.n	8002e90 <_malloc_r+0x64>
 8002eb8:	460c      	mov	r4, r1
 8002eba:	6849      	ldr	r1, [r1, #4]
 8002ebc:	e7cc      	b.n	8002e58 <_malloc_r+0x2c>
 8002ebe:	1cc4      	adds	r4, r0, #3
 8002ec0:	f024 0403 	bic.w	r4, r4, #3
 8002ec4:	42a0      	cmp	r0, r4
 8002ec6:	d005      	beq.n	8002ed4 <_malloc_r+0xa8>
 8002ec8:	1a21      	subs	r1, r4, r0
 8002eca:	4630      	mov	r0, r6
 8002ecc:	f000 f82e 	bl	8002f2c <_sbrk_r>
 8002ed0:	3001      	adds	r0, #1
 8002ed2:	d0cf      	beq.n	8002e74 <_malloc_r+0x48>
 8002ed4:	6025      	str	r5, [r4, #0]
 8002ed6:	e7db      	b.n	8002e90 <_malloc_r+0x64>
 8002ed8:	20000090 	.word	0x20000090
 8002edc:	20000094 	.word	0x20000094

08002ee0 <_realloc_r>:
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee2:	4607      	mov	r7, r0
 8002ee4:	4614      	mov	r4, r2
 8002ee6:	460e      	mov	r6, r1
 8002ee8:	b921      	cbnz	r1, 8002ef4 <_realloc_r+0x14>
 8002eea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002eee:	4611      	mov	r1, r2
 8002ef0:	f7ff bf9c 	b.w	8002e2c <_malloc_r>
 8002ef4:	b922      	cbnz	r2, 8002f00 <_realloc_r+0x20>
 8002ef6:	f7ff ff4d 	bl	8002d94 <_free_r>
 8002efa:	4625      	mov	r5, r4
 8002efc:	4628      	mov	r0, r5
 8002efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f00:	f000 f826 	bl	8002f50 <_malloc_usable_size_r>
 8002f04:	42a0      	cmp	r0, r4
 8002f06:	d20f      	bcs.n	8002f28 <_realloc_r+0x48>
 8002f08:	4621      	mov	r1, r4
 8002f0a:	4638      	mov	r0, r7
 8002f0c:	f7ff ff8e 	bl	8002e2c <_malloc_r>
 8002f10:	4605      	mov	r5, r0
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d0f2      	beq.n	8002efc <_realloc_r+0x1c>
 8002f16:	4631      	mov	r1, r6
 8002f18:	4622      	mov	r2, r4
 8002f1a:	f7ff ff17 	bl	8002d4c <memcpy>
 8002f1e:	4631      	mov	r1, r6
 8002f20:	4638      	mov	r0, r7
 8002f22:	f7ff ff37 	bl	8002d94 <_free_r>
 8002f26:	e7e9      	b.n	8002efc <_realloc_r+0x1c>
 8002f28:	4635      	mov	r5, r6
 8002f2a:	e7e7      	b.n	8002efc <_realloc_r+0x1c>

08002f2c <_sbrk_r>:
 8002f2c:	b538      	push	{r3, r4, r5, lr}
 8002f2e:	2300      	movs	r3, #0
 8002f30:	4c05      	ldr	r4, [pc, #20]	; (8002f48 <_sbrk_r+0x1c>)
 8002f32:	4605      	mov	r5, r0
 8002f34:	4608      	mov	r0, r1
 8002f36:	6023      	str	r3, [r4, #0]
 8002f38:	f7fd fd72 	bl	8000a20 <_sbrk>
 8002f3c:	1c43      	adds	r3, r0, #1
 8002f3e:	d102      	bne.n	8002f46 <_sbrk_r+0x1a>
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	b103      	cbz	r3, 8002f46 <_sbrk_r+0x1a>
 8002f44:	602b      	str	r3, [r5, #0]
 8002f46:	bd38      	pop	{r3, r4, r5, pc}
 8002f48:	2000013c 	.word	0x2000013c

08002f4c <__malloc_lock>:
 8002f4c:	4770      	bx	lr

08002f4e <__malloc_unlock>:
 8002f4e:	4770      	bx	lr

08002f50 <_malloc_usable_size_r>:
 8002f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f54:	1f18      	subs	r0, r3, #4
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bfbc      	itt	lt
 8002f5a:	580b      	ldrlt	r3, [r1, r0]
 8002f5c:	18c0      	addlt	r0, r0, r3
 8002f5e:	4770      	bx	lr

08002f60 <_init>:
 8002f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f62:	bf00      	nop
 8002f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f66:	bc08      	pop	{r3}
 8002f68:	469e      	mov	lr, r3
 8002f6a:	4770      	bx	lr

08002f6c <_fini>:
 8002f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6e:	bf00      	nop
 8002f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f72:	bc08      	pop	{r3}
 8002f74:	469e      	mov	lr, r3
 8002f76:	4770      	bx	lr
