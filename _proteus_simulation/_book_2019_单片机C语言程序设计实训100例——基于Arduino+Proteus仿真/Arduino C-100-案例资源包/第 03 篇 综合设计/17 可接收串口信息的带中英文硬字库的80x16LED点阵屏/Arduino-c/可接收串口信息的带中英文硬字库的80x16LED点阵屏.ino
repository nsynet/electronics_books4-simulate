//-----------------------------------------------------------------
//  名称: 可接收串口信息的带中英文硬字库的80x16LED点阵屏
//-----------------------------------------------------------------
//  说明: 本例运行时,点阵屏将滚动显示一组固定信息
//	当接收到串口发送来的中英文/全角/半角字符时,点屏将开始
//	滚动显示所接收到的信息.
//
//-----------------------------------------------------------------
#include "LEDStr.h"						//待显示的字符串（含总个数定义）
#include <SPI.h>
//SPI接口存储器操作命令定义
#define RDSR		0x05						//读状态
#define READ		0x03						//读字节
#define WRITE	0x02						//写字节
//-----------------------------------------------------------------
#define CS		10						//从机选择控制引脚
#define CS_0()	digitalWrite(CS,LOW)		//拉低CS
#define CS_1()	digitalWrite(CS,HIGH)	//拉高CS
//-----------------------------------------------------------------
//74HC595引脚定义
#define SH_CP	17						//移位时钟脉冲
#define ST_CP	18						//输出锁存器控制脉冲
#define DS		19						//串行数据输入
//-----------------------------------------------------------------
//74HC154译码器使能与禁止
#define EN_74HC154()  digitalWrite(2,LOW)
#define DI_74HC154()  digitalWrite(2,HIGH)
//-----------------------------------------------------------------
uint8_t Buffer_Len;						//缓冲有效字符长度
uint8_t Dot_Matrix[MAX_WORD_COUNT * 32];	//待显示点阵数据缓冲
uint8_t Rec_END_Flag = 0;				//接收结束标志
//-----------------------------------------------------------------
// 初始配置
//-----------------------------------------------------------------
void setup() {

}
//-----------------------------------------------------------------
// 主程序
//-----------------------------------------------------------------
void loop() {


}
//-----------------------------------------------------------------
// 串口事件处理函数
//-----------------------------------------------------------------
uint8_t XserialEvent() {

}
//-----------------------------------------------------------------
// 595并行输出子程序
//-----------------------------------------------------------------
void Parallel_Output_595() {

}
//-----------------------------------------------------------------
// 根据Buffer缓冲的字符,从硬字库读取点阵数据并转换为LED要求的格式
//-----------------------------------------------------------------
void Read_SPI_ZK_and_Convert() {


}
//-----------------------------------------------------------------
// 向AT25F4096A写入三个字节的地址0x000000-0x07FFFF
//-----------------------------------------------------------------
void Write_3_Bytes_SPI_Address(uint32_t addr) {

}
//-----------------------------------------------------------------
// 从指定地址读多字节到缓冲
//-----------------------------------------------------------------
void Read_Bytes_From_AT25F4096A(uint32_t addr, uint8_t *p, uint16_t len){

}