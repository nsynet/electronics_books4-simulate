//-----------------------------------------------------------------
// 名称: 简易计算器设计
//-----------------------------------------------------------------
// 说明: 本例运行时，可进行四则运算的单次或连续整型数据运算，但不支持
//       带优先级的表达式求值.编译时注意将库文件夹Keypad复制到库文件夹
//       libraries. 另外要注意区别另一库文件夹keyboard.
//
//-----------------------------------------------------------------
#include <Keypad.h>
#include <LiquidCrystal.h>
LiquidCrystal lcd(8, 9, 10, 4, 5, 6, 7);	//初始化LCD
//定义4×4键盘行线与列线引脚
uint8_t rowPins[4] = { 3,  2, 1,   0};		//四条行线定义
uint8_t colPins[4] = {17, 16, 15, 14};		//四条列线定义
//定义4×4计算器键盘各键位对应的字符
char KeyCharsList[4][4] = {
	{'7','8','9','/'},
	{'4','5','6','*'},
	{'1','2','3','-'},
	{'C','0','=','+'}
};
//初始化Keypad类实例
Keypad kpd = Keypad(makeKeymap(KeyCharsList),rowPins,colPins,4,4);
#define MAX_DISPLAY_CHAR 9	//定义适合屏幕显示的ASCII字符的最大个数
enum ERROR { OK = 0, SLEEP = 1, ERROR = 2};	// 错误处理状态
static long a,b;			//当前运算符的前后两个操作数
static char CurrKeyChar;	//当前按键字符
static char Last_OP;		//最近输入的操作符
static char Last_Char;		//所输入的前一字符
static char result;			//当前运算的结果状态
//显示缓冲,数字输入缓冲及数字输入缓冲区索引定义
static char outputbuffer[MAX_DISPLAY_CHAR+1];
static char NumberStr[MAX_DISPLAY_CHAR+1];
static char NumberIdx;
//-----------------------------------------------------------------
// 初始配置
//-----------------------------------------------------------------
void setup() {

}
//-----------------------------------------------------------------
// 主循环: 循环扫描键盘并进行运算处理与显示
//-----------------------------------------------------------------
void loop(){


}
//-----------------------------------------------------------------
// 检查待显示数据是否越界
//-----------------------------------------------------------------
int calc_chkerror(long num) {
	
	
}
//-----------------------------------------------------------------
// 根据运算符按键进行运算处理
//-----------------------------------------------------------------
void Operator_Process(char OP) {

}