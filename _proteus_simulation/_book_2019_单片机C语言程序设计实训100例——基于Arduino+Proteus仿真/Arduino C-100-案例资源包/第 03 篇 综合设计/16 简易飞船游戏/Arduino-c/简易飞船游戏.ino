//-----------------------------------------------------------------
//	名称: 简易飞船游戏
//-----------------------------------------------------------------
//	说明: 程序启动时首先显示游戏封面，然后进入游戏状态，右边将陆续
//        出现石块向左飞行，左的飞船可以通过可变电阻器调节上下移动，
//        每当被石块碰撞飞船时H减1，S加1，H值变为0时，一次游戏结束。
//
//-----------------------------------------------------------------
#include <Arduino.h>
#include <U8g2lib.h>			//U8g2lib液晶驱动库
#include "MyU8g2fonts.c"		//自定义字模数据文件
U8G2_KS0108_128X64_1 u8g2(U8G2_R0, 8, 9, 10, 11, 4, 5, 6, 7, 
/*enable=*/ 18, /*dc=*/ 17, /*cs0=*/ 14, /*cs1=*/ 15, /*cs2=*/ U8X8_PIN_NONE, 
/* reset=*/  U8X8_PIN_NONE); 	// Set R/W to low!
#include "bitmaps.h"			//位图数据：包括封面、飞船、石块、文字、爆炸等
//-----------------------------------------------------------------
#define potPin	5				//模拟调节船只纵向坐标的输入引脚
#define Ship	0				//飞船
#define ROCK1	1				//8类石块（其索引用于标识当前轨道上石块类型）
#define ROCK2	2				//注：本例仅在6个轨道上用了其中的6类石块对象
#define ROCK3	3
#define ROCK4	4
#define ROCK5	5
#define ROCK6	6
#define ROCK7	7
#define ROCK8	8
//-----------------------------------------------------------------
#define ShipX	tracker[0][1]			//飞船X坐标
#define ShipY	tracker[0][2]			//飞船Y坐标
//-----------------------------------------------------------------
int lives = 3;							//存活数初值	（对应H）
int score = 0;							//得分		（对应S）
int level = 0;								//级别
int fastSpeed = 25;							//速度
long speedMillis[] = {0, 0, 0, 0, 0, 0};	//6个轨道对象速度数组
volatile long m = 0;						//当前计时变量
volatile int show_BLOWUP = 0;				//爆炸标识
static uint8_t tCount1 = 0,tCount2 = 0;		//记数变量
//-----------------------------------------------------------------
//轨道数组：含各对象位图、坐标、速度,其中0号轨道为飞船，1～6号轨道为石块
int tracker[8][5] = {
	//位图	Xpos	  Ypos           	Speed（随机速度可形成错落移动效果）
	{Ship,	18,			32,          	0             },
	{ROCK2,	119,	  random(0, 56),	random(25, 75)},
	{ROCK5,	119,	  random(0, 56),	random(25, 75)},
	{ROCK8,	119,	  random(0, 56),	random(25, 75)},
	{ROCK1, 119,	  random(0, 56),	random(25, 75)},
	{ROCK3,	119,	  random(0, 56),	random(25, 75)},
	{ROCK7,	119,	  random(0, 56),	random(25, 75)}
};
//-----------------------------------------------------------------
int trackerOld[8][5] = {	//8个轨道原数组（历史数据）：所含内容结构同上
	//位图   Xpos	  Ypos            Speed（随机速度可形成错落移动效果）
	{Ship, 	18,			32,          	0             },
	{ROCK2,	119,	  random(0, 56),	random(25, 75)},
	{ROCK5,	119,	  random(0, 56),	random(25, 75)},
	{ROCK8, 119,	  random(0, 56),	random(25, 75)},
	{ROCK1, 119,	  random(0, 56),	random(25, 75)},
	{ROCK3, 119,	  random(0, 56),	random(25, 75)},
	{ROCK7, 119,	  random(0, 56),	random(25, 75)}
};

//-----------------------------------------------------------------
// 初始配置
//-----------------------------------------------------------------
void setup() {

}
//-----------------------------------------------------------------
// 主循环
//-----------------------------------------------------------------
void loop() {


}
//-----------------------------------------------------------------
// 绘制一帧，包括6个轨道上的对象（石块）与最左边的飞船
//-----------------------------------------------------------------
void drawFrame() {

}
//-----------------------------------------------------------------
// 显示 H:尚存飞船数；S:得分值，即飞出屏幕最右端，未击毁飞船的石块数
//-----------------------------------------------------------------
void printData() {

}
//-----------------------------------------------------------------
// 更新位置：第i号轨道对象X坐标递减（为左移做准备），同时完成碰撞判断
//-----------------------------------------------------------------
void updatePos(uint8_t i) {


}
//-----------------------------------------------------------------
// 读取模拟控制信号，AD=0～1023,映射为飞船的纵坐标Y：0～56
//-----------------------------------------------------------------
void getControls() { 

}
//-----------------------------------------------------------------
// 碰撞探测
//-----------------------------------------------------------------
boolean collision(uint8_t i){

}
//-----------------------------------------------------------------
// 炸毁飞船
//-----------------------------------------------------------------
void BLOWUP() { 	

}
//-----------------------------------------------------------------
// 重置所有轨道上的对象数据
//-----------------------------------------------------------------
void resetTracker(){
	uint8_t trackerReset[8][5] = {	//生成各轨道对象相关重置数据（含随机值）
		{Ship,	15,		32,				0				},
		{ROCK2,	119,	random(0, 56),	random(25, 75)	},
		{ROCK5,	119,	random(0, 56),	random(25, 75)	},
		{ROCK8,	119,	random(0, 56),	random(25, 75)	},
		{ROCK1,	119,	random(0, 56),	random(25, 75)	},
		{ROCK3,	119,	random(0, 56),	random(25, 75)	},
		{ROCK7,	119,	random(0, 56),	random(25, 75)	}
	};
	for(uint8_t i = 0; i <= 6; i++){		//重置的数据更新到各当前轨道对象数组
		for(uint8_t d = 0; d <= 3; d++){	//各对象的四个参数全部更新
			tracker[i][d] = trackerReset[i][d];
		}
	}
}
//-----------------------------------------------------------------
// 显示爆炸效果（三个画面ex1、ex2、ex3重叠显示）
//-----------------------------------------------------------------
void explosionAnim(uint8_t xPos, uint8_t yPos) {

}