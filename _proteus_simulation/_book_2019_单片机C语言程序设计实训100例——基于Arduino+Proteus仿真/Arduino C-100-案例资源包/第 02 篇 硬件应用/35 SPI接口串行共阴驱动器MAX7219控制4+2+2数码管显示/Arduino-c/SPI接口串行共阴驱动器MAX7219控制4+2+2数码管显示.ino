//-----------------------------------------------------------------
//  名称: 兼容SPI接口串行共阴驱动器MAX7219控制集成式数码管显示
//-----------------------------------------------------------------
//  说明: 本例用MAX72XX控制两组8位数码管动态显示,大大减少了
//		  对单片机引脚和机器时间的占用.
//
//-----------------------------------------------------------------
#include <SPI.h>
#define SS1_MAX7221  10		//MAX7221片选线
#define SS2_MAX7219  9		//MAX7219片选线
//在非解码模式下MAX7219/7221对应的段码表,此表不同于直接驱动时所使用的段码表
//原来的各段顺序是：		DP,G,F,E,D,C,B,A
//MAX7219/7221的驱动顺序是：DP,A,B,C,D,E,F,G
//除小数点位未改变外，其他位是逆向排列的.
//下在前两行为0~F的段码,最后4位为"-(16)/°(17)/C(18)/黑屏(19)"的段码
const uint8_t SEGCODE_72XX[] = {
  0x7E,0x30,0x6D,0x79,0x33,0x5B,0x5F,0x70,	//0~7
  0x7F,0x7B,0x77,0x1F,0x4E,0x3D,0x4F,0x47,	//8~F
  0x01,0x63,0x4E,0x00						//16~19[ - °C 黑屏]
};
//7219待显示的内容为温度值:-32.75℃("-"前面的最高位黑屏)
//由于本例7219工作于非解码模式,在串行发送时,需要以下表为索引,
//发送SEGCODE_72XX中的对应段码
const uint8_t Disp_Buff[] = {19, 16, 3, 2, 7, 5, 17, 18};
//7221待显示的数字串"20150925"(由于本例7221工作于解码模式,故各数位直接发送)
const uint8_t Disp_Buffer1[] = {2, 0, 2, 0, 0, 9, 2, 5};
//-----------------------------------------------------------------
// 初始配置
//-----------------------------------------------------------------
void setup() {	

}
//-----------------------------------------------------------------
// 主循环
//-----------------------------------------------------------------
void loop() { }
//-----------------------------------------------------------------
// MAX72XX初始化(i=1,2对应7221:7219)
//-----------------------------------------------------------------
void Init_MAX72XX(uint8_t i) {

}
//-----------------------------------------------------------------
// 向MAX72XX指定地址(寄存器)写入1字节数据(Chip_No=1,2对应7221:7219)
//-----------------------------------------------------------------
void Write_MAX72XX(uint8_t addr,uint8_t dat,uint8_t Chip_No) {

}
