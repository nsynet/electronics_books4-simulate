//-----------------------------------------------------------------
//	名称: I2C接口存储器AT24C04读写与显示(4片)
//-----------------------------------------------------------------
//	说明: 按下K1-K4按键时,前两个分别向第1,2片AT24C04中写入400个随机字节
//		  后2个按键分别写第3,4片AT24C04,先写入200个0x01,再写入200个0x02
//		  写入后接着读取并显示.(400个字节的地址范围: 0x0000~0x018F)
//
//-----------------------------------------------------------------
#include <Wire.h>
// 向任意指定的地址写入一字节数据
// 器件地址码字节格式 (其中E2,E1为片选位,A8为块地址位)
// 位: B7 B6 B5 B4 B3 B2 B1 B0
// 值:  1  0   1  0  E2 E1 A8 RW
// Arduino从器件地址不含RW位，7位地址后3位为000时，从器件地址为0x50。
//-----------------------------------------------------------------
const uint8_t x_buff[] = { //共300个字节（未作删减，用于参照图4-45阅读）
	0x08,0x1F,0x3F,0x6C,0x4C,0x3C,0x3F,0x1F,0x00,0x18,0x19,0x1F,
	0x1F,0x79,0x7F,0x57,0x73,0x00,0x17,0x7F,0x7F,0x1F,0x7F,0x38,
	0x7F,0x7F,0x00,0x33,0x3F,0x7F,0x7F,0x7F,0x3F,0x21,0x3F,0x00,
	0x33,0x7F,0x7F,0x5F,0x7F,0x7F,0x7F,0x2F,0x00,0x2B,0x2F,0x2D,
	0x3F,0x3B,0x7F,0x7C,0x1F,0x00,0x08,0x5F,0x5F,0x7B,0x7F,0x4F,
	0x7F,0x7C,0x00,0x02,0xEE,0x77,0x7F,0x7F,0x7F,0x6F,0x07,0x00,
	0x3F,0x7F,0x7E,0x7F,0x7F,0x7F,0x7E,0x7F,0x00,0x3A,0x7F,0x7F,
	0x3F,0x3E,0x7F,0x7F,0x37,0x00,0x00,0x7F,0x7F,0x26,0x35,0x07,
	0x7F,0x7B,0x00,0x40,0x7C,0x7F,0x57,0x7F,0x7C,0x7C,0x7C,0x00,
	0x18,0x7F,0x7F,0x35,0x7F,0x7E,0x3F,0x3D,0x00,0x3F,0x7F,0x64,
	0x7F,0x3F,0x7C,0x54,0x3F,0x00,0x49,0x6F,0x2F,0x3F,0x7F,0x7F,
	0x7E,0x3E,0x00,0x03,0x4F,0x3C,0x7E,0x7F,0x7F,0x3E,0x74,0x00,
	0x3F,0x3F,0x6F,0xEC,0x6C,0x3F,0x3F,0x00,0x2B,0x2F,0x2D,0x3F,
	0x3B,0xBF,0x7C,0xBF,0xD0,0x00,0x9D,0x0D,0xE0,0x0F,0xE0,0xC0,
	0x00,0x00,0xD1,0xD1,0xD1,0x3D,0x3F,0xDF,0x6C,0x61,0xE0,0x3F,
	0xEF,0xE8,0x7F,0x79,0xBE,0xCE,0xBB,0xDB,0x7C,0xEF,0xE7,0xDF,
	0xEC,0x7C,0x7C,0xD0,0xD8,0x08,0x7F,0xDF,0x3F,0x7F,0x6B,0x49,
	0x00,0xEF,0xDF,0x64,0x7F,0xDF,0x7C,0x54,0xEF,0x00,0x3F,0x3F,
	0x3F,0xBF,0x1C,0x14,0x7F,0x7F,0x00,0x3F,0x7F,0xEE,0x7E,0x26,
	0xFE,0x3E,0xAF,0x90,0x00,0x03,0x03,0xD0,0xD0,0xD0,0x00,0x00,
	0xF0,0xFC,0xE4,0x5F,0x5F,0x34,0xAF,0x5F,0xA4,0x80,0x91,0xD1,
	0x0F,0xC0,0xE1,0xE1,0xEE,0x3F,0x3F,0x3F,0xD1,0x61,0x0D,0x3F,
	0x7F,0xF8,0xF1,0xAF,0xFE,0x3E,0x00,0x40,0x7C,0xAF,0x97,0x7F,
	0x7C,0x7C,0x7C,0x00,0xF8,0x08,0x7F,0x7F,0x3F,0x7F,0x6B,0x49,
	0x00,0x3F,0x7F,0x64,0x7F,0x3F,0x7C,0x54,0x3F,0x00,0xAF,0xBF
};
//-----------------------------------------------------------------
uint8_t n = 0, ChipNo = 0; 					//芯片号相关变量
uint8_t myBuff[300];							//300个字节缓冲区myBuff
char tempstr[5];								//用于格式化及显示的字符串缓冲
//-----------------------------------------------------------------
// 初始配置
//-----------------------------------------------------------------
void setup (){	

}	
//-----------------------------------------------------------------
// 主循环
//-----------------------------------------------------------------
void loop() {


}
//-----------------------------------------------------------------
// 判断器件是否在线
//-----------------------------------------------------------------
bool I2C_isPresent(uint8_t Dev_Addr) {   

}
//-----------------------------------------------------------------
// 向I2C EEPROM任意指定地址写入一字节数据
//-----------------------------------------------------------------
uint8_t Random_Write(uint8_t Dev_Addr,uint16_t mem_Addr, uint8_t d) {

}
//-----------------------------------------------------------------
// 向I2C EEPROM指定地址开始写入缓冲中的n字节数据(n<=PageSize:8)
//-----------------------------------------------------------------
int Write_nBytes(uint8_t Dev_Addr,uint16_t mem_Addr,uint8_t *pBuf, int n){

}
//-----------------------------------------------------------------
// 从I2C EEPROM任意指定地址读取1字节数据
//-----------------------------------------------------------------
uint8_t Random_Read(uint8_t Dev_Addr,uint16_t mem_Addr) {

}
//-----------------------------------------------------------------
// 从I2C EEPROM读取n字节数据到缓冲buf
//-----------------------------------------------------------------
int Sequential_Read(uint8_t Dev_Addr,uint16_t mem_Addr,char Buf[],int n) {

}