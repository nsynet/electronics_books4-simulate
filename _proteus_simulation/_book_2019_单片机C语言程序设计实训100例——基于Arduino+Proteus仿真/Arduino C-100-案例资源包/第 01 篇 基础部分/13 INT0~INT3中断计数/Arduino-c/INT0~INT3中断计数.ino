//-----------------------------------------------------------------
//  名称: INT0～INT3 中断计数
//-----------------------------------------------------------------
//  说明: 每次按下第1个计数键时第1组计数值累加并显示在右边的三只管上
//		  每次按下第2个计数键时第2组计数值累加并显示在左边的三只管上
//	      后两个按键分别清零
//
//-----------------------------------------------------------------
#define K1 2	//中断触发引脚定义（K1 - Arduino INT0）
#define K2 3	//中断触发引脚定义（K2 - Arduino INT1）
#define K3 21	//中断触发引脚定义（K3 - Arduino INT2）
#define K4 20	//中断触发引脚定义（K4 - Arduino INT3）
//-----------------------------------------------------------------
//0~9的共阳数码管段码表（最后一位为黑屏段码）
const uint8_t CA_SEGCODE[] =
{ 0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0xFF};
//-----------------------------------------------------------------
//6位数码管的段引脚(位码引脚)	
uint8_t ledPins_SEG[] = { 22, 23, 24, 25, 26, 27, 28, 29 };
//6位数码管的位引脚(位码引脚)
uint8_t ledPins_DIG[] = { 35, 34, 33, 32, 31, 30 };
//-----------------------------------------------------------------
//两组计数的显示缓冲,前三位为一组,后三位为另一组
uint8_t Disp_buff[] = {0,0,0,0,0,0};
//两个计数值
volatile int Count_A = 0,Count_B = 0;
//-----------------------------------------------------------------
// 初始配置
//-----------------------------------------------------------------
void setup() {

}
//-----------------------------------------------------------------
// 主循环
//-----------------------------------------------------------------
void loop() {
	Show_Counts();
}
//-----------------------------------------------------------------
// 数据显示
//-----------------------------------------------------------------
void Show_Counts() {

}
//-----------------------------------------------------------------
// 段码输出函数
//-----------------------------------------------------------------
void SEG_OUTPUT(uint8_t x) {

}
//-----------------------------------------------------------------
// 位码输出函数
//-----------------------------------------------------------------
void DIG_OUTPUT(uint8_t dx) {

}
//-----------------------------------------------------------------
// 中断服务函数：K1累加计数
//-----------------------------------------------------------------
void ISR_K1_Count() {

}
//-----------------------------------------------------------------
// 中断服务函数：K2累加计数
//-----------------------------------------------------------------
void ISR_K2_Count() {

}
//-----------------------------------------------------------------
// 中断服务函数：K3清0
//-----------------------------------------------------------------
void ISR_K3_Clear() {

}
//-----------------------------------------------------------------
// 中断服务函数：K4清0
//-----------------------------------------------------------------
void ISR_K4_Clear() {

}