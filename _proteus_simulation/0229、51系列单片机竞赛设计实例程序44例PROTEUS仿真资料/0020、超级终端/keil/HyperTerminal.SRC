; .\HyperTerminal.SRC generated from: HyperTerminal.c
; COMPILER INVOKED BY:
;        C:\Program Files\Keil\C51\BIN\C51.EXE HyperTerminal.c BROWSE DEBUG OBJECTEXTEND SRC(.\HyperTerminal.SRC)

$NOMOD51

NAME	HYPERTERMINAL

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
AC	BIT	0D0H.6
T0	BIT	0B0H.4
T1	BIT	0B0H.5
EA	BIT	0A8H.7
IE	DATA	0A8H
P0_0	BIT	080H.0
P1_0	BIT	090H.0
P0_1	BIT	080H.1
FL	BIT	0D0H.1
P2_0	BIT	0A0H.0
P1_1	BIT	090H.1
P0_2	BIT	080H.2
P3_0	BIT	0B0H.0
P2_1	BIT	0A0H.1
P1_2	BIT	090H.2
P0_3	BIT	080H.3
P3_1	BIT	0B0H.1
P2_2	BIT	0A0H.2
P1_3	BIT	090H.3
P0_4	BIT	080H.4
P3_2	BIT	0B0H.2
P2_3	BIT	0A0H.3
P1_4	BIT	090H.4
P0_5	BIT	080H.5
RD	BIT	0B0H.7
P3_3	BIT	0B0H.3
P2_4	BIT	0A0H.4
P1_5	BIT	090H.5
P0_6	BIT	080H.6
P3_4	BIT	0B0H.4
P2_5	BIT	0A0H.5
P1_6	BIT	090H.6
P0_7	BIT	080H.7
P3_5	BIT	0B0H.5
ES	BIT	0A8H.4
P2_6	BIT	0A0H.6
P1_7	BIT	090H.7
P3_6	BIT	0B0H.6
P2_7	BIT	0A0H.7
IP	DATA	0B8H
P3_7	BIT	0B0H.7
RI	BIT	098H.0
CY	BIT	0D0H.7
INT0	BIT	0B0H.2
INT1	BIT	0B0H.3
TI	BIT	098H.1
PS	BIT	0B8H.4
SP	DATA	081H
OV	BIT	0D0H.2
WR	BIT	0B0H.6
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
TMOD	DATA	089H
TCON	DATA	088H
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
TF1	BIT	088H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
PT0	BIT	0B8H.1
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
PT2	BIT	0B8H.5
TR0	BIT	088H.4
TR1	BIT	088H.6
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
DPH	DATA	083H
DPL	DATA	082H
REN	BIT	098H.4
RXD	BIT	0B0H.0
TXD	BIT	0B0H.1
F0	BIT	0D0H.5
PSW	DATA	0D0H
?PR?InitHyperTerminal?HYPERTERMINAL      SEGMENT CODE 
?PR?_SerialSendByte?HYPERTERMINAL        SEGMENT CODE 
?PR?_SerialSendStr?HYPERTERMINAL         SEGMENT CODE 
?PR?SerialInterrupt?HYPERTERMINAL        SEGMENT CODE 
?CO?HYPERTERMINAL    SEGMENT CODE 
	EXTRN	CODE (?C?CLDPTR)
	PUBLIC	SerialInterrupt
	PUBLIC	_SerialSendStr
	PUBLIC	_SerialSendByte
	PUBLIC	InitHyperTerminal

	RSEG  ?CO?HYPERTERMINAL
?SC_0:
	DB  01BH,'[' ,'1' ,';' ,'3' ,'2' ,'m' ,000H

?SC_8:
	DB  01BH,'[' ,'4' ,'0' ,'m' ,000H

?SC_14:
	DB  01BH,'[' ,'2' ,'J' ,000H

?SC_19:
	DB  '-' ,'-' ,'-' ,'-' ,'-' ,'-' ,'-' ,'-' ,'-' ,'-' 
	DB  '-' ,'-' ,'-' ,'-' ,'-' ,'-' ,'-' ,'-' ,'-' ,'-' 
	DB  '-' ,'-' ,'-' ,'-' ,'-' ,'-' ,'-' ,'-' ,'-' ,00DH
	DB  00AH,000H

?SC_51:
	DB  ' ' ,' ' ,'T' ,'h' ,'e' ,' ' ,'8' ,'0' ,'5' ,'1' 
	DB  ' ' ,'H' ,'y' ,'p' ,'e' ,'r' ,' ' ,'T' ,'e' ,'r' 
	DB  'm' ,'i' ,'n' ,'a' ,'l' ,00DH,00AH,000H

; #include "HyperTerminal.h"
; 
; void InitHyperTerminal(void)

	RSEG  ?PR?InitHyperTerminal?HYPERTERMINAL
InitHyperTerminal:
	USING	0
			; SOURCE LINE # 3
; {
			; SOURCE LINE # 4
; 	TMOD |= 0x20; 		/* timer1, mode 2, 8 bit reload */
			; SOURCE LINE # 5
	ORL  	TMOD,#020H
; 	SCON  = 0x50; 		/* serial mode 1, 8 bit uart, enable receive  */
			; SOURCE LINE # 6
	MOV  	SCON,#050H
; 	PCON  = 0x80; 		/* SMOD = 1, double baud */ 
			; SOURCE LINE # 7
	MOV  	PCON,#080H
; 	TH1   = 0xFF;		/* baud = 57600, fosc = 11.0592MHZ */
			; SOURCE LINE # 8
	MOV  	TH1,#0FFH
; 	TL1   = 0xFF;		
			; SOURCE LINE # 9
	MOV  	TL1,#0FFH
; 	RI    = 0; 			/* clear receive flag */
			; SOURCE LINE # 10
	CLR  	RI
; 	TI    = 0;			/* clear send flag */
			; SOURCE LINE # 11
	CLR  	TI
; 	TR1   = 1; 			/* start timer1 */
			; SOURCE LINE # 12
	SETB 	TR1
; 	ES    = 1;			/* enable serial interrupt */
			; SOURCE LINE # 13
	SETB 	ES
; 	EA    = 1;			/* enable all interrupt */
			; SOURCE LINE # 14
	SETB 	EA
; 	
; 
; 	SerialSendStr(F_LIGHTGREEN);
			; SOURCE LINE # 17
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_0)
	MOV  	R1,#LOW (?SC_0)
	LCALL	_SerialSendStr
; 	SerialSendStr(B_BLACK);
			; SOURCE LINE # 18
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_8)
	MOV  	R1,#LOW (?SC_8)
	LCALL	_SerialSendStr
; 	SerialSendStr(CLEARSCREEN);
			; SOURCE LINE # 19
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_14)
	MOV  	R1,#LOW (?SC_14)
	LCALL	_SerialSendStr
; 	SerialSendStr("-----------------------------\r\n");
			; SOURCE LINE # 20
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_19)
	MOV  	R1,#LOW (?SC_19)
	LCALL	_SerialSendStr
; 	SerialSendStr("  The 8051 Hyper Terminal\r\n");
			; SOURCE LINE # 21
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_51)
	MOV  	R1,#LOW (?SC_51)
	LCALL	_SerialSendStr
; 	SerialSendStr("-----------------------------\r\n");
			; SOURCE LINE # 22
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_19)
	MOV  	R1,#LOW (?SC_19)
	LJMP 	_SerialSendStr
; END OF InitHyperTerminal

; }
; 
; void SerialSendByte(char dat)

	RSEG  ?PR?_SerialSendByte?HYPERTERMINAL
_SerialSendByte:
			; SOURCE LINE # 25
;---- Variable 'dat?140' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 26
; 	SBUF = dat;
			; SOURCE LINE # 27
	MOV  	SBUF,R7
?C0002:
; 	while(TI == 0);
			; SOURCE LINE # 28
	JNB  	TI,?C0002
?C0003:
; 	TI = 0;
			; SOURCE LINE # 29
	CLR  	TI
; }
			; SOURCE LINE # 30
	RET  	
; END OF _SerialSendByte

; 
; void SerialSendStr(char *str)

	RSEG  ?PR?_SerialSendStr?HYPERTERMINAL
_SerialSendStr:
	USING	0
			; SOURCE LINE # 32
;---- Variable 'str?241' assigned to Register 'R1/R2/R3' ----
; {
			; SOURCE LINE # 33
?C0005:
; 	while(*str != '\0')
			; SOURCE LINE # 34
	LCALL	?C?CLDPTR
	MOV  	R7,A
	JZ   	?C0007
; 	{
			; SOURCE LINE # 35
; 		SerialSendByte(*str);
			; SOURCE LINE # 36
	LCALL	_SerialSendByte
; 		str++;
			; SOURCE LINE # 37
	MOV  	A,#01H
	ADD  	A,R1
	MOV  	R1,A
	CLR  	A
	ADDC 	A,R2
	MOV  	R2,A
; 	}
			; SOURCE LINE # 38
	SJMP 	?C0005
; }
			; SOURCE LINE # 39
?C0007:
	RET  	
; END OF _SerialSendStr

CSEG	AT	00023H
	LJMP	SerialInterrupt

; 
; void SerialInterrupt(void) interrupt 4 using 3

	RSEG  ?PR?SerialInterrupt?HYPERTERMINAL
	USING	3
SerialInterrupt:
	PUSH 	ACC
	PUSH 	B
	PUSH 	DPH
	PUSH 	DPL
	PUSH 	PSW
	USING	3
	MOV  	PSW,#018H
			; SOURCE LINE # 41
; {
; 	if(RI)
			; SOURCE LINE # 43
	JNB  	RI,?C0010
; 	{
			; SOURCE LINE # 44
; 		RI = 0;
			; SOURCE LINE # 45
	CLR  	RI
; 		if(SBUF == 'a')
			; SOURCE LINE # 46
	MOV  	A,SBUF
	CJNE 	A,#061H,?C0009
; 		{
			; SOURCE LINE # 47
; 			(*(void(*)( ))0)(); 
			; SOURCE LINE # 48
	LCALL	00H
; 		}
			; SOURCE LINE # 49
?C0009:
; 		SerialSendByte(SBUF);
			; SOURCE LINE # 50
	MOV  	R7,SBUF
	LCALL	_SerialSendByte
; 	}
			; SOURCE LINE # 51
; }
			; SOURCE LINE # 52
?C0010:
	POP  	PSW
	POP  	DPL
	POP  	DPH
	POP  	B
	POP  	ACC
	RETI 	
; END OF SerialInterrupt

	END
