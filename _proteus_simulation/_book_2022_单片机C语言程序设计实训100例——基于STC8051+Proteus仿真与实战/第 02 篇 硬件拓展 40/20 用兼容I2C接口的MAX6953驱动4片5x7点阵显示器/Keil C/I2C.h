//-----------------------------------------------------------------
// 名称: IIC总线通用宏及函数
//-----------------------------------------------------------------
#define NOP4()	{ _nop_();_nop_();_nop_();_nop_(); }
//总线启动	-------------------------------------------------------
#define IIC_Start()		\
{ SDA = 1; NOP4(); SCL = 1; NOP4(); SDA = 0; NOP4(); SCL = 0; }
//总线停止	-------------------------------------------------------
#define IIC_Stop()		\
{ SDA = 0; NOP4(); SCL = 1; NOP4(); SDA = 1; NOP4(); }
//-----------------------------------------------------------------
//以下3个有关应答的宏定义均生成第9个时钟脉冲,读取应答或发送应答/非应答
//1.主机读从机应答	-----------------------------------------------
//(SDA = 1设为输入,准备读取应答位,要使用该位作出处理时引用F0)
#define IIC_Rd_Ack()	\
{ SDA = 1; NOP4(); SCL = 1; NOP4(); F0 = !SDA; NOP4(); SCL = 0;	}
//2.主机发送应答位	-----------------------------------------------
#define IIC_Ack()		\
{ SDA = 0; NOP4(); SCL = 1; NOP4(); SCL = 0; NOP4(); SDA = 1;	}
//3.主机发送非应答位	-------------------------------------------
#define IIC_NAck()		\
{ SDA = 1; NOP4(); SCL = 1; NOP4(); SCL = 0; NOP4(); SDA = 0;	}
//-----------------------------------------------------------------
// 主机向IIC总线写一字节
//-----------------------------------------------------------------
bit IIC_WriteByte(u8 dat) {
	u8 i;
	for(i = 0; i < 8; i++)					//8个时钟脉冲
	{	NOP4(); dat <<= 1; SDA = CY; ;		//高位优先输出
		NOP4(); SCL = 1; NOP4(); SCL = 0;	//串行时钟脉冲输出
	}
	IIC_Rd_Ack();							//主机读从机应答位
	return F0;								//返回从机应答状态
} 
//-----------------------------------------------------------------
// 主机从IIC总线读一字节
//-----------------------------------------------------------------
//u8 IIC_ReadByte() {
//	u8 i,dat = 0x00; SDA = 1;			//置数据线为输入
//	for(i = 0; i < 8; i++)					//8时钟周期循环读取1字节
//	{	SCL = 1; NOP4();					//时钟线置高电平
//		dat = (dat<<1) | SDA; NOP4();		//主机读取1位
//		SCL = 0; NOP4();					//时钟线置低电平
//	}
//	return dat;								//返回读取的字节
//}
