                        .module adc.c
                        .area text(rom, con, rel)
 0000                   .dbfile E:\学习\AVR\adc\adc.c
 0000                   .dbfunc e adc_init _adc_init fV
                        .even
 0000           _adc_init::
 0000                   .dbline -1
 0000                   .dbline 9
 0000           ; #define _adc_c
 0000           ; #include <io8535v.h>
 0000           ; #include <macros.h>
 0000           ; #include <adc.h>
 0000           ; //#define debug_p (*(volatile uint *)0xa0)
 0000           ; //ADC initialisation
 0000           ; // Conversion time: 416uS
 0000           ; void adc_init(void)
 0000           ; {
 0000                   .dbline 10
 0000           ;  ADCSR = 0x00; //disable adc
 0000 2224              clr R2
 0002 26B8              out 0x6,R2
 0004                   .dbline 11
 0004           ;  ADMUX = 0x00; //select adc input 0
 0004 27B8              out 0x7,R2
 0006                   .dbline 12
 0006           ;  ADCSR = 0xcF;
 0006 8FEC              ldi R24,207
 0008 86B9              out 0x6,R24
 000A                   .dbline -2
 000A                   .dbline 13
 000A           ; }
 000A           L1:
 000A                   .dbline 0 ; func end
 000A 0895              ret
 000C                   .dbend
                        .area vector(rom, abs)
                        .org 28
 001C 06C0              rjmp _adc_isr
                        .area text(rom, con, rel)
 000C                   .dbfile E:\学习\AVR\adc\adc.c
 000C                   .dbfunc e adc_isr _adc_isr fV
 000C           ;      temp_val2 -> y+0
 000C           ;       temp_val -> R20,R21
                        .even
 000C           _adc_isr::
 000C 0A92              st -y,R0
 000E 1A92              st -y,R1
 0010 2A92              st -y,R2
 0012 3A92              st -y,R3
 0014 4A92              st -y,R4
 0016 5A92              st -y,R5
 0018 0A93              st -y,R16
 001A 1A93              st -y,R17
 001C 2A93              st -y,R18
 001E 3A93              st -y,R19
 0020 EA93              st -y,R30
 0022 FA93              st -y,R31
 0024 0FB6              in R0,0x3f
 0026 0A92              st -y,R0
 0028 00D0              rcall push_gset1
 002A 2497              sbiw R28,4
 002C                   .dbline -1
 002C                   .dbline 17
 002C           ; 
 002C           ; #pragma interrupt_handler adc_isr:15
 002C           ; void adc_isr(void)
 002C           ; {
 002C                   .dbline 21
 002C           ;  uint temp_val;
 002C           ;  float temp_val2;
 002C           ;  //conversion complete, read value (int) using...
 002C           ;  temp_val=ADCL;   //Read 8 low bits first (important)
 002C 44B1              in R20,0x4
 002E 5527              clr R21
 0030                   .dbline 22
 0030           ;  temp_val|=(int)ADCH << 8; //read 2 high bits and shift into top byte
 0030 25B0              in R2,0x5
 0032 3324              clr R3
 0034 322C              mov R3,R2
 0036 2224              clr R2
 0038 4229              or R20,R2
 003A 5329              or R21,R3
 003C                   .dbline 23
 003C           ;  temp_val2 =temp_val*PER_VOL_DATA;//两位整数两位小数，全当整数处理
 003C 00E0              ldi R16,<L3
 003E 10E0              ldi R17,>L3
 0040 00D0              rcall lpm32
 0042 3A93              st -y,R19
 0044 2A93              st -y,R18
 0046 1A93              st -y,R17
 0048 0A93              st -y,R16
 004A 00E0              ldi R16,<L4
 004C 10E0              ldi R17,>L4
 004E 00D0              rcall lpm32
 0050 3A93              st -y,R19
 0052 2A93              st -y,R18
 0054 1A93              st -y,R17
 0056 0A93              st -y,R16
 0058 8A01              movw R16,R20
 005A 1695              lsr R17
 005C 0795              ror R16
 005E 00D0              rcall int2fp
 0060 3A93              st -y,R19
 0062 2A93              st -y,R18
 0064 1A93              st -y,R17
 0066 0A93              st -y,R16
 0068 00D0              rcall empy32fs
 006A 8A01              movw R16,R20
 006C 0170              andi R16,1
 006E 1070              andi R17,0
 0070 00D0              rcall int2fp
 0072 3A93              st -y,R19
 0074 2A93              st -y,R18
 0076 1A93              st -y,R17
 0078 0A93              st -y,R16
 007A 00D0              rcall add32fs
 007C 00D0              rcall empy32f
 007E FE01              movw R30,R28
 0080 0083              std z+0,R16
 0082 1183              std z+1,R17
 0084 2283              std z+2,R18
 0086 3383              std z+3,R19
 0088                   .dbline 24
 0088           ;  adc_val = (uint)temp_val2;
 0088 FE01              movw R30,R28
 008A 2080              ldd R2,z+0
 008C 3180              ldd R3,z+1
 008E 4280              ldd R4,z+2
 0090 5380              ldd R5,z+3
 0092 5A92              st -y,R5
 0094 4A92              st -y,R4
 0096 3A92              st -y,R3
 0098 2A92              st -y,R2
 009A 00E0              ldi R16,<L7
 009C 10E0              ldi R17,>L7
 009E 00D0              rcall lpm32
 00A0 3A93              st -y,R19
 00A2 2A93              st -y,R18
 00A4 1A93              st -y,R17
 00A6 0A93              st -y,R16
 00A8 00D0              rcall cmp32f
 00AA B4F0              brlt L5
 00AC FE01              movw R30,R28
 00AE 2080              ldd R2,z+0
 00B0 3180              ldd R3,z+1
 00B2 4280              ldd R4,z+2
 00B4 5380              ldd R5,z+3
 00B6 5A92              st -y,R5
 00B8 4A92              st -y,R4
 00BA 3A92              st -y,R3
 00BC 2A92              st -y,R2
 00BE 00E0              ldi R16,<L7
 00C0 10E0              ldi R17,>L7
 00C2 00D0              rcall lpm32
 00C4 3A93              st -y,R19
 00C6 2A93              st -y,R18
 00C8 1A93              st -y,R17
 00CA 0A93              st -y,R16
 00CC 00D0              rcall sub32f
 00CE 00D0              rcall fp2int
 00D0 A801              movw R20,R16
 00D2 4050              subi R20,0  ; offset = 32768
 00D4 5048              sbci R21,128
 00D6 07C0              rjmp L6
 00D8           L5:
 00D8 FE01              movw R30,R28
 00DA 0081              ldd R16,z+0
 00DC 1181              ldd R17,z+1
 00DE 2281              ldd R18,z+2
 00E0 3381              ldd R19,z+3
 00E2 00D0              rcall fp2int
 00E4 A801              movw R20,R16
 00E6           L6:
 00E6 50930100          sts _adc_val+1,R21
 00EA 40930000          sts _adc_val,R20
 00EE                   .dbline 26
 00EE           ;  //debug_p = adc_val;
 00EE           ;  ADCSR|=0X40;
 00EE 369A              sbi 0x6,6
 00F0                   .dbline -2
 00F0                   .dbline 27
 00F0           ; }
 00F0           L2:
 00F0 2496              adiw R28,4
 00F2 00D0              rcall pop_gset1
 00F4 0990              ld R0,y+
 00F6 0FBE              out 0x3f,R0
 00F8 F991              ld R31,y+
 00FA E991              ld R30,y+
 00FC 3991              ld R19,y+
 00FE 2991              ld R18,y+
 0100 1991              ld R17,y+
 0102 0991              ld R16,y+
 0104 5990              ld R5,y+
 0106 4990              ld R4,y+
 0108 3990              ld R3,y+
 010A 2990              ld R2,y+
 010C 1990              ld R1,y+
 010E 0990              ld R0,y+
 0110                   .dbline 0 ; func end
 0110 1895              reti
 0112                   .dbsym l temp_val2 0 D
 0112                   .dbsym r temp_val 20 i
 0112                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile E:\学习\AVR\adc\adc.c
 0000           _adc_val::
 0000                   .blkb 2
 0002                   .dbfile E:/学习/AVR/adc/adc.h
 0002                   .dbsym e adc_val _adc_val i
                        .area lit(rom, con, rel)
 0000           L7:
 0000 00000047          .word 0x0,0x4700
 0004           L4:
 0004 00000040          .word 0x0,0x4000
 0008           L3:
 0008 0080BB3F          .word 0x8000,0x3fbb
